[
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "Error",
        "importPath": "sqlite3",
        "description": "sqlite3",
        "isExtraImport": true,
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "ducks",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ducks",
        "description": "ducks",
        "detail": "ducks",
        "documentation": {}
    },
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "TK",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Entry",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "StringVar",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Entry",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "END",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Tk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Entry",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "StringVar",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "mysql.connector",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "Error",
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "isExtraImport": true,
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "Employee",
        "importPath": "employee",
        "description": "employee",
        "isExtraImport": true,
        "detail": "employee",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "pytz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytz",
        "description": "pytz",
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "Player",
        "importPath": "Games.player",
        "description": "Games.player",
        "isExtraImport": true,
        "detail": "Games.player",
        "documentation": {}
    },
    {
        "label": "Player",
        "importPath": "Games.player",
        "description": "Games.player",
        "isExtraImport": true,
        "detail": "Games.player",
        "documentation": {}
    },
    {
        "label": "blackjack",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "blackjack",
        "description": "blackjack",
        "detail": "blackjack",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "codemySqlitecourse.database-Bearded-Daddy",
        "description": "codemySqlitecourse.database-Bearded-Daddy",
        "peekOfCode": "conn = sqlite3.connect(\"customer.db\")\n# Create a cursor.\nc = conn.cursor()\n# Create a Table for customer.\n# c.execute(\"\"\"CREATE TABLE customers (\n#         first_name TEXT,\n#         last _name TEXT,\n#         email TEXT\n#    ) \"\"\")\n# print(\"Command executed successfully\")",
        "detail": "codemySqlitecourse.database-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "codemySqlitecourse.database-Bearded-Daddy",
        "description": "codemySqlitecourse.database-Bearded-Daddy",
        "peekOfCode": "c = conn.cursor()\n# Create a Table for customer.\n# c.execute(\"\"\"CREATE TABLE customers (\n#         first_name TEXT,\n#         last _name TEXT,\n#         email TEXT\n#    ) \"\"\")\n# print(\"Command executed successfully\")\n# many_customers = [\n#     ('Mia', 'Marcelin', 'mia@gmail.com'),",
        "detail": "codemySqlitecourse.database-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "items",
        "kind": 5,
        "importPath": "codemySqlitecourse.database-Bearded-Daddy",
        "description": "codemySqlitecourse.database-Bearded-Daddy",
        "peekOfCode": "items = c.fetchall()\nprint(\"NAME \" + \"\\t\\tEMAIL\")\nprint(\"------\" + \"\\t\\t--------\")\nfor item in items:\n    print(item[0] + \" | \" + item[1] + \" | \" + item[2])\n# print(\"Command executed successfully\")\n# The five DATATYPES below are\n# NULL [NO CHAR]\n# INTEGER [A NUMBER INT]\n# REAL [A NUMBER WITH A DECIMAL]",
        "detail": "codemySqlitecourse.database-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "codemySqlitecourse.database",
        "description": "codemySqlitecourse.database",
        "peekOfCode": "conn = sqlite3.connect(\"customer.db\")\n# Create a cursor.\nc = conn.cursor()\n# Create a Table for customer.\n##c.execute(\"\"\"CREATE TABLE customers (\n##         first_name TEXT,\n##         last _name TEXT,\n##         email TEXT\n##    ) \"\"\")\nmany_customers = [",
        "detail": "codemySqlitecourse.database",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "codemySqlitecourse.database",
        "description": "codemySqlitecourse.database",
        "peekOfCode": "c = conn.cursor()\n# Create a Table for customer.\n##c.execute(\"\"\"CREATE TABLE customers (\n##         first_name TEXT,\n##         last _name TEXT,\n##         email TEXT\n##    ) \"\"\")\nmany_customers = [\n    ('Mia', 'Marcelin', 'mia@gmail.com'),\n   ('Brittany', 'Johnson', 'brittany@gmail.com'),",
        "detail": "codemySqlitecourse.database",
        "documentation": {}
    },
    {
        "label": "many_customers",
        "kind": 5,
        "importPath": "codemySqlitecourse.database",
        "description": "codemySqlitecourse.database",
        "peekOfCode": "many_customers = [\n    ('Mia', 'Marcelin', 'mia@gmail.com'),\n   ('Brittany', 'Johnson', 'brittany@gmail.com'),\n   ('Jennifer', 'Smith', 'jennifer@gmail.com'),\n]\nc.executemany(\"INSERT INTO customers VALUES(?,?,?)\",many_customers)\n# Query the database\nc.execute(\"SELECT * FROM customers WHERE first_name LIKE 'M%' \")\nitems = c.fetchall()\nfor item in items:",
        "detail": "codemySqlitecourse.database",
        "documentation": {}
    },
    {
        "label": "items",
        "kind": 5,
        "importPath": "codemySqlitecourse.database",
        "description": "codemySqlitecourse.database",
        "peekOfCode": "items = c.fetchall()\nfor item in items:\n    print(item)\n# print(c.fetchone()) #This one will fetch the first item in the table.\n# print(c.fetchmany(3)) #This one will fetch the number you enter in the paratheses.\n#print(C.fetchall()) #This one will fetch all of them.  \n#print(c.fetchall())\n#print(\"Command executed successfully\")\n# The five DATATYPES below are\n# NULL [NO CHAR]",
        "detail": "codemySqlitecourse.database",
        "documentation": {}
    },
    {
        "label": "factorial",
        "kind": 2,
        "importPath": "ExceptionHanding.examples",
        "description": "ExceptionHanding.examples",
        "peekOfCode": "def factorial(n):\n    # n! can also be defined as n * (n-1)!\n    \"\"\" calculates n! recursively\"\"\"\n    if n <= 1:\n        return 1\n    else:\n        return n * factorial(n-1)\ntry:\n    print(factorial(900))\nexcept (RecursionError, ZeroDivisionError, OverflowError):",
        "detail": "ExceptionHanding.examples",
        "documentation": {}
    },
    {
        "label": "test_text",
        "kind": 5,
        "importPath": "ExceptionHanding.exception_challenge",
        "description": "ExceptionHanding.exception_challenge",
        "peekOfCode": "test_text = input(\"Enter a number: \")\ntest_number = int(test_text)\nprint(\"The number you entered is:\",test_number)",
        "detail": "ExceptionHanding.exception_challenge",
        "documentation": {}
    },
    {
        "label": "test_number",
        "kind": 5,
        "importPath": "ExceptionHanding.exception_challenge",
        "description": "ExceptionHanding.exception_challenge",
        "peekOfCode": "test_number = int(test_text)\nprint(\"The number you entered is:\",test_number)",
        "detail": "ExceptionHanding.exception_challenge",
        "documentation": {}
    },
    {
        "label": "getint",
        "kind": 2,
        "importPath": "ExceptionHanding.get_ints",
        "description": "ExceptionHanding.get_ints",
        "peekOfCode": "def getint(prompt):\n    while True:\n        try:\n            number = int(input(prompt))\n# if a valid number is entered in line 7 the code is just going to continue\n# and the number will just be returned. #noqa\n            return number\n        except EOFError:  # You should really use except ValueError.\n            # If an invalid input is entered a ValueError except will be\n            # raised. #noqa",
        "detail": "ExceptionHanding.get_ints",
        "documentation": {}
    },
    {
        "label": "first_number",
        "kind": 5,
        "importPath": "ExceptionHanding.get_ints",
        "description": "ExceptionHanding.get_ints",
        "peekOfCode": "first_number = getint(\"Please enter first number \")\nsecond_number = getint(\"Please enter second number \")\n# the code below is a try block that will catch a ZeroDivisionError if you try to divide by zero.  # noqa\ntry:\n    print(\"{} divided by {} is {}\".format(first_number, second_number,  # On\n                                          # this line we are using replacement fields.  # noqa\n                                          # This .format has three parameters inside the parentheis.  # noqa\n                                          first_number / second_number))\nexcept ZeroDivisionError:\n    print()",
        "detail": "ExceptionHanding.get_ints",
        "documentation": {}
    },
    {
        "label": "second_number",
        "kind": 5,
        "importPath": "ExceptionHanding.get_ints",
        "description": "ExceptionHanding.get_ints",
        "peekOfCode": "second_number = getint(\"Please enter second number \")\n# the code below is a try block that will catch a ZeroDivisionError if you try to divide by zero.  # noqa\ntry:\n    print(\"{} divided by {} is {}\".format(first_number, second_number,  # On\n                                          # this line we are using replacement fields.  # noqa\n                                          # This .format has three parameters inside the parentheis.  # noqa\n                                          first_number / second_number))\nexcept ZeroDivisionError:\n    print()\n    print(\"You can't divide by zero\")",
        "detail": "ExceptionHanding.get_ints",
        "documentation": {}
    },
    {
        "label": "Wing",
        "kind": 6,
        "importPath": "Games.ducks",
        "description": "Games.ducks",
        "peekOfCode": "class Wing(object):\n    def __init__(self, ratio):\n        self.ratio = ratio\n    def fly(self):\n        if self.ratio > 1:\n            print(\"Wee, this is fun.\")\n        elif self.ratio == 1:\n            print(\"This is hard work, but I'm flying.\")\n        else:\n            print(\"I think I'll just walk.\")",
        "detail": "Games.ducks",
        "documentation": {}
    },
    {
        "label": "Duck",
        "kind": 6,
        "importPath": "Games.ducks",
        "description": "Games.ducks",
        "peekOfCode": "class Duck(object):\n    def __init__(self):\n        self._wing = Wing(1.8)\n    def walk(self):\n        print(\"Waddle, waddle, waddle\")\n    def swim(self):\n        print(\"Come on in, the water's lovely\")\n    def quack(self):\n        print(\"Quack quack\")\n    def fly(self):",
        "detail": "Games.ducks",
        "documentation": {}
    },
    {
        "label": "Penguin",
        "kind": 6,
        "importPath": "Games.ducks",
        "description": "Games.ducks",
        "peekOfCode": "class Penguin(object):\n    def __init__(self):\n        self.fly = self.aviate\n    def walk(self):\n        print(\"Waddle, waddle, I waddle too\")\n    def swim(self):\n        print(\"Come on in, but it's a bit chilly this far South\")\n    def quack(self):\n        print(\"Are you having a laugh? I'm a penguin!\")\n    def aviate(self):",
        "detail": "Games.ducks",
        "documentation": {}
    },
    {
        "label": "Mallard",
        "kind": 6,
        "importPath": "Games.ducks",
        "description": "Games.ducks",
        "peekOfCode": "class Mallard(Duck):\n    pass\nclass Flock(object):\n    def __init__(self):\n        self.flock = []\n# In the following we added hints to the add_duck method. The hints lets\n# anyone using the add_duck module understands what they should be providing\n# to the method.  We added annonation Inside the paratheses of the method we\n# added a parameter, duck.\n    def add_duck(self, duck: Duck) -> None:",
        "detail": "Games.ducks",
        "documentation": {}
    },
    {
        "label": "Flock",
        "kind": 6,
        "importPath": "Games.ducks",
        "description": "Games.ducks",
        "peekOfCode": "class Flock(object):\n    def __init__(self):\n        self.flock = []\n# In the following we added hints to the add_duck method. The hints lets\n# anyone using the add_duck module understands what they should be providing\n# to the method.  We added annonation Inside the paratheses of the method we\n# added a parameter, duck.\n    def add_duck(self, duck: Duck) -> None:\n        fly_method = getattr(duck, 'fly', None)\n        if callable(fly_method):",
        "detail": "Games.ducks",
        "documentation": {}
    },
    {
        "label": "Enemy",
        "kind": 6,
        "importPath": "Games.enemy",
        "description": "Games.enemy",
        "peekOfCode": "class Enemy:\n    def __init__(self, name=\"Enemy\", hit_points=0, lives=1):\n        self._name = name\n        self._hit_points = hit_points\n        self._lives = lives\n        self._alive = True\n    def take_damage(self, damage):\n        remaining_points = self._hit_points - damage\n        if remaining_points >= 0:\n            self._hit_points = remaining_points",
        "detail": "Games.enemy",
        "documentation": {}
    },
    {
        "label": "Troll",
        "kind": 6,
        "importPath": "Games.enemy",
        "description": "Games.enemy",
        "peekOfCode": "class Troll(Enemy):\n    def __init__(self, name):\n        #  super(Troll, self).__init__(name = name, lives = 1, hit_points = 23)\n        super().__init__(name=name, lives=1, hit_points=23)\n    def grunt(self):\n        print(\"Me {0._name}, {0._name}, stomp you\".format(self))\nclass Vampyre(Enemy):\n    def __init__(self, name):\n        super().__init__(name=name, lives=3, hit_points=12)\n    def dodges(self):",
        "detail": "Games.enemy",
        "documentation": {}
    },
    {
        "label": "Vampyre",
        "kind": 6,
        "importPath": "Games.enemy",
        "description": "Games.enemy",
        "peekOfCode": "class Vampyre(Enemy):\n    def __init__(self, name):\n        super().__init__(name=name, lives=3, hit_points=12)\n    def dodges(self):\n        if random.randint(1, 3) == 3:\n            print(\"***** {0._name} dodges *****\".format(self))\n            return True\n        else:\n            return False\n    def take_damage(self, damage):",
        "detail": "Games.enemy",
        "documentation": {}
    },
    {
        "label": "VampyreKing",
        "kind": 6,
        "importPath": "Games.enemy",
        "description": "Games.enemy",
        "peekOfCode": "class VampyreKing(Vampyre):\n    def __init__(self, name):\n        super().__init__(name)\n        self._hit_points = 140\n    # A VampyreKing is going to be incredibly powerful, and any points of\n    # damage inflicted will be divided by 4.\n    # todo I need to create a damage inflicted function that when attacking\n    # will divide by 4.\n    # VampyreKing objects will also start off with 140 hit points and only\n    # takes a quarter of the damage inflicted.",
        "detail": "Games.enemy",
        "documentation": {}
    },
    {
        "label": "Tag",
        "kind": 6,
        "importPath": "Games.html_duck",
        "description": "Games.html_duck",
        "peekOfCode": "class Tag(object):\n    def __init__(self, name, contents):\n        self.start_tag = '<()>'.format(name)\n        self.end_tag = '</()>'.format(name)\n        self.contents = contents\n    def __str__(self):\n        return \"{0.start_tag}{0.contents}{0.end_tag}\".format(self)\n    def display(self, file=None):\n        print(self, file=file)\nclass DocType(Tag):",
        "detail": "Games.html_duck",
        "documentation": {}
    },
    {
        "label": "DocType",
        "kind": 6,
        "importPath": "Games.html_duck",
        "description": "Games.html_duck",
        "peekOfCode": "class DocType(Tag):\n    def __init__(self):\n        super().__init__('!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" http://www.w3.org/TR/html4/strict.dtd', '')\n        self.end_tag = ''   # DOCTYPE doesn't have an end tag\nclass Head(Tag):\n    def __init__(self, title=None):\n        super().__init__('head', '')\n        if title:\n            self._title_tag = Tag('title', title)\n            self.contents = str(self._title_tag)",
        "detail": "Games.html_duck",
        "documentation": {}
    },
    {
        "label": "Head",
        "kind": 6,
        "importPath": "Games.html_duck",
        "description": "Games.html_duck",
        "peekOfCode": "class Head(Tag):\n    def __init__(self, title=None):\n        super().__init__('head', '')\n        if title:\n            self._title_tag = Tag('title', title)\n            self.contents = str(self._title_tag)\nclass Body(Tag):\n    def __init__(self):\n        super().__init__('body', '')    # body contents will be built up separatly\n        self._body_contents = []",
        "detail": "Games.html_duck",
        "documentation": {}
    },
    {
        "label": "Body",
        "kind": 6,
        "importPath": "Games.html_duck",
        "description": "Games.html_duck",
        "peekOfCode": "class Body(Tag):\n    def __init__(self):\n        super().__init__('body', '')    # body contents will be built up separatly\n        self._body_contents = []\n    def add_tag(self, name, contents):\n        new_tag = Tag(name, contents)\n        self._body_contents.append(new_tag)\n    def display(self, file=None):\n        for tag in self._body_contents:\n            self.contents += str(tag)",
        "detail": "Games.html_duck",
        "documentation": {}
    },
    {
        "label": "HtmlDoc",
        "kind": 6,
        "importPath": "Games.html_duck",
        "description": "Games.html_duck",
        "peekOfCode": "class HtmlDoc(object):\n    def __init__(self, doc_type, head, body):\n        self._doc_type = doc_type\n        self._head = head\n        self._body = body\n    def add_tag(self, name, contents):\n        self._body.add_tag(name, contents)\n    def display(self, file=None):\n        self._doc_type.display(file=file)\n        print('<html>', file=file)",
        "detail": "Games.html_duck",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Games.main",
        "description": "Games.main",
        "peekOfCode": "a = 3\n# This is a string.\nb = \"grevy\"\n# This is a tuple.\nc = 1, 2, 3\nprint(a)\nprint(b)\nprint(c)",
        "detail": "Games.main",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Games.main",
        "description": "Games.main",
        "peekOfCode": "b = \"grevy\"\n# This is a tuple.\nc = 1, 2, 3\nprint(a)\nprint(b)\nprint(c)",
        "detail": "Games.main",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "Games.main",
        "description": "Games.main",
        "peekOfCode": "c = 1, 2, 3\nprint(a)\nprint(b)\nprint(c)",
        "detail": "Games.main",
        "documentation": {}
    },
    {
        "label": "flock",
        "kind": 5,
        "importPath": "Games.migration",
        "description": "Games.migration",
        "peekOfCode": "flock = ducks.Flock()\ndonald = ducks.Duck()\ndaisy = ducks.Duck()\nduck3 = ducks.Duck()\nduck4 = ducks.Duck()\nduck5 = ducks.Duck()\nduck6 = ducks.Duck()\nduck7 = ducks.Duck()\npercy = ducks.Penguin()\nflock.add_duck(donald)",
        "detail": "Games.migration",
        "documentation": {}
    },
    {
        "label": "donald",
        "kind": 5,
        "importPath": "Games.migration",
        "description": "Games.migration",
        "peekOfCode": "donald = ducks.Duck()\ndaisy = ducks.Duck()\nduck3 = ducks.Duck()\nduck4 = ducks.Duck()\nduck5 = ducks.Duck()\nduck6 = ducks.Duck()\nduck7 = ducks.Duck()\npercy = ducks.Penguin()\nflock.add_duck(donald)\nflock.add_duck(daisy)",
        "detail": "Games.migration",
        "documentation": {}
    },
    {
        "label": "daisy",
        "kind": 5,
        "importPath": "Games.migration",
        "description": "Games.migration",
        "peekOfCode": "daisy = ducks.Duck()\nduck3 = ducks.Duck()\nduck4 = ducks.Duck()\nduck5 = ducks.Duck()\nduck6 = ducks.Duck()\nduck7 = ducks.Duck()\npercy = ducks.Penguin()\nflock.add_duck(donald)\nflock.add_duck(daisy)\nflock.add_duck(duck3)",
        "detail": "Games.migration",
        "documentation": {}
    },
    {
        "label": "duck3",
        "kind": 5,
        "importPath": "Games.migration",
        "description": "Games.migration",
        "peekOfCode": "duck3 = ducks.Duck()\nduck4 = ducks.Duck()\nduck5 = ducks.Duck()\nduck6 = ducks.Duck()\nduck7 = ducks.Duck()\npercy = ducks.Penguin()\nflock.add_duck(donald)\nflock.add_duck(daisy)\nflock.add_duck(duck3)\nflock.add_duck(duck4)",
        "detail": "Games.migration",
        "documentation": {}
    },
    {
        "label": "duck4",
        "kind": 5,
        "importPath": "Games.migration",
        "description": "Games.migration",
        "peekOfCode": "duck4 = ducks.Duck()\nduck5 = ducks.Duck()\nduck6 = ducks.Duck()\nduck7 = ducks.Duck()\npercy = ducks.Penguin()\nflock.add_duck(donald)\nflock.add_duck(daisy)\nflock.add_duck(duck3)\nflock.add_duck(duck4)\nflock.add_duck(percy)",
        "detail": "Games.migration",
        "documentation": {}
    },
    {
        "label": "duck5",
        "kind": 5,
        "importPath": "Games.migration",
        "description": "Games.migration",
        "peekOfCode": "duck5 = ducks.Duck()\nduck6 = ducks.Duck()\nduck7 = ducks.Duck()\npercy = ducks.Penguin()\nflock.add_duck(donald)\nflock.add_duck(daisy)\nflock.add_duck(duck3)\nflock.add_duck(duck4)\nflock.add_duck(percy)\nflock.add_duck(duck5)",
        "detail": "Games.migration",
        "documentation": {}
    },
    {
        "label": "duck6",
        "kind": 5,
        "importPath": "Games.migration",
        "description": "Games.migration",
        "peekOfCode": "duck6 = ducks.Duck()\nduck7 = ducks.Duck()\npercy = ducks.Penguin()\nflock.add_duck(donald)\nflock.add_duck(daisy)\nflock.add_duck(duck3)\nflock.add_duck(duck4)\nflock.add_duck(percy)\nflock.add_duck(duck5)\nflock.add_duck(duck6)",
        "detail": "Games.migration",
        "documentation": {}
    },
    {
        "label": "duck7",
        "kind": 5,
        "importPath": "Games.migration",
        "description": "Games.migration",
        "peekOfCode": "duck7 = ducks.Duck()\npercy = ducks.Penguin()\nflock.add_duck(donald)\nflock.add_duck(daisy)\nflock.add_duck(duck3)\nflock.add_duck(duck4)\nflock.add_duck(percy)\nflock.add_duck(duck5)\nflock.add_duck(duck6)\nflock.add_duck(duck7)",
        "detail": "Games.migration",
        "documentation": {}
    },
    {
        "label": "percy",
        "kind": 5,
        "importPath": "Games.migration",
        "description": "Games.migration",
        "peekOfCode": "percy = ducks.Penguin()\nflock.add_duck(donald)\nflock.add_duck(daisy)\nflock.add_duck(duck3)\nflock.add_duck(duck4)\nflock.add_duck(percy)\nflock.add_duck(duck5)\nflock.add_duck(duck6)\nflock.add_duck(duck7)\nflock.migrate()",
        "detail": "Games.migration",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "Games.player",
        "description": "Games.player",
        "peekOfCode": "class Player(object):\n    def __init__(self, name):\n        self.name = name\n        self._lives = 3\n        self._level = 1\n        self._score = 0\n    def _get_lives(self):\n        return self._lives\n    def _set_lives(self, lives):\n        if lives >= 0:",
        "detail": "Games.player",
        "documentation": {}
    },
    {
        "label": "Fruit",
        "kind": 6,
        "importPath": "Json Tutorial.py.__pycache__.preview.main",
        "description": "Json Tutorial.py.__pycache__.preview.main",
        "peekOfCode": "class Fruit:\n    def __init__(self, name: str, calories: float):\n        self.name = name\n        self.calories = calories\n    def describe_fruit(self):\n        print(self.name, self.calories, sep=': ')\nif __name__== '__main__':\n    fruit: Fruit = Fruit('Banana', 100)\n    fruit.describe_fruit()\n    fruit.calories = 150",
        "detail": "Json Tutorial.py.__pycache__.preview.main",
        "documentation": {}
    },
    {
        "label": "Scrollbox",
        "kind": 6,
        "importPath": "MusicBrowser.jukebox",
        "description": "MusicBrowser.jukebox",
        "peekOfCode": "class Scrollbox(tkinter.Listbox):\n    def __init__(self, window, **kwargs):\n        super().__init__(window, **kwargs)\n        self.scrollbar = tkinter.Scrollbar(\n            window, orient=tkinter.VERTICAL, command=self.yview\n        )\n    def grid(self, row, column, sticky=\"nsw\", rowspan=1, columnspan=1, **kwargs):\n        super().grid(\n            row=row,\n            column=column,",
        "detail": "MusicBrowser.jukebox",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "MusicBrowser.jukebox",
        "description": "MusicBrowser.jukebox",
        "peekOfCode": "conn = sqlite3.connect(\"music.sqlite\")\nclass Scrollbox(tkinter.Listbox):\n    def __init__(self, window, **kwargs):\n        super().__init__(window, **kwargs)\n        self.scrollbar = tkinter.Scrollbar(\n            window, orient=tkinter.VERTICAL, command=self.yview\n        )\n    def grid(self, row, column, sticky=\"nsw\", rowspan=1, columnspan=1, **kwargs):\n        super().grid(\n            row=row,",
        "detail": "MusicBrowser.jukebox",
        "documentation": {}
    },
    {
        "label": "mainWindow",
        "kind": 5,
        "importPath": "MusicBrowser.jukebox",
        "description": "MusicBrowser.jukebox",
        "peekOfCode": "mainWindow = tkinter.Tk()\nmainWindow.title(\"Music DB Browser\")\nmainWindow.geometry(\"1024x768\")\nmainWindow.columnconfigure(0, weight=2)\nmainWindow.columnconfigure(1, weight=2)\nmainWindow.columnconfigure(2, weight=2)\nmainWindow.columnconfigure(3, weight=1)  # spacer column on right\nmainWindow.rowconfigure(0, weight=1)\nmainWindow.rowconfigure(1, weight=5)\nmainWindow.rowconfigure(2, weight=5)",
        "detail": "MusicBrowser.jukebox",
        "documentation": {}
    },
    {
        "label": "artistList",
        "kind": 5,
        "importPath": "MusicBrowser.jukebox",
        "description": "MusicBrowser.jukebox",
        "peekOfCode": "artistList = Scrollbox(mainWindow, background=\"red\")\nartistList.grid(row=1, column=0, sticky=\"nsew\", rowspan=2, padx=(30, 0))\nartistList.config(border=2, relief=\"sunken\")\nfor artist in conn.execute(\"SELECT artists.name From artists ORDER BY artists.name\"):\n    artistList.insert(tkinter.END, artist[0])\n# ======= Albums Listbox =======\nalbumLV = tkinter.Variable(mainWindow)\nalbumLV.set((\"Choose An Album\",))\nalbumList = Scrollbox(mainWindow, listvariable=albumLV)\nalbumList.grid(row=1, column=1, sticky=\"nsew\", padx=(30, 0))",
        "detail": "MusicBrowser.jukebox",
        "documentation": {}
    },
    {
        "label": "albumLV",
        "kind": 5,
        "importPath": "MusicBrowser.jukebox",
        "description": "MusicBrowser.jukebox",
        "peekOfCode": "albumLV = tkinter.Variable(mainWindow)\nalbumLV.set((\"Choose An Album\",))\nalbumList = Scrollbox(mainWindow, listvariable=albumLV)\nalbumList.grid(row=1, column=1, sticky=\"nsew\", padx=(30, 0))\nalbumList.config(border=2, relief=\"sunken\")\n# ======= Songs Listbox =======\nsongLV = tkinter.Variable(mainWindow)\nsongLV.set((\"Choose A Song\",))\nsongList = Scrollbox(mainWindow, listvariable=songLV, background=\"light blue\")\nsongList.grid(row=1, column=2, sticky=\"nsew\", padx=(30, 0))",
        "detail": "MusicBrowser.jukebox",
        "documentation": {}
    },
    {
        "label": "albumList",
        "kind": 5,
        "importPath": "MusicBrowser.jukebox",
        "description": "MusicBrowser.jukebox",
        "peekOfCode": "albumList = Scrollbox(mainWindow, listvariable=albumLV)\nalbumList.grid(row=1, column=1, sticky=\"nsew\", padx=(30, 0))\nalbumList.config(border=2, relief=\"sunken\")\n# ======= Songs Listbox =======\nsongLV = tkinter.Variable(mainWindow)\nsongLV.set((\"Choose A Song\",))\nsongList = Scrollbox(mainWindow, listvariable=songLV, background=\"light blue\")\nsongList.grid(row=1, column=2, sticky=\"nsew\", padx=(30, 0))\nsongList.config(border=2, relief=\"sunken\")\n# ======= Main Loop =======",
        "detail": "MusicBrowser.jukebox",
        "documentation": {}
    },
    {
        "label": "songLV",
        "kind": 5,
        "importPath": "MusicBrowser.jukebox",
        "description": "MusicBrowser.jukebox",
        "peekOfCode": "songLV = tkinter.Variable(mainWindow)\nsongLV.set((\"Choose A Song\",))\nsongList = Scrollbox(mainWindow, listvariable=songLV, background=\"light blue\")\nsongList.grid(row=1, column=2, sticky=\"nsew\", padx=(30, 0))\nsongList.config(border=2, relief=\"sunken\")\n# ======= Main Loop =======\ntestList = range(0, 100)\nalbumLV.set(tuple(testList))\nmainWindow.mainloop()\nprint(\"Closing database connection\")",
        "detail": "MusicBrowser.jukebox",
        "documentation": {}
    },
    {
        "label": "songList",
        "kind": 5,
        "importPath": "MusicBrowser.jukebox",
        "description": "MusicBrowser.jukebox",
        "peekOfCode": "songList = Scrollbox(mainWindow, listvariable=songLV, background=\"light blue\")\nsongList.grid(row=1, column=2, sticky=\"nsew\", padx=(30, 0))\nsongList.config(border=2, relief=\"sunken\")\n# ======= Main Loop =======\ntestList = range(0, 100)\nalbumLV.set(tuple(testList))\nmainWindow.mainloop()\nprint(\"Closing database connection\")\nconn.close()",
        "detail": "MusicBrowser.jukebox",
        "documentation": {}
    },
    {
        "label": "testList",
        "kind": 5,
        "importPath": "MusicBrowser.jukebox",
        "description": "MusicBrowser.jukebox",
        "peekOfCode": "testList = range(0, 100)\nalbumLV.set(tuple(testList))\nmainWindow.mainloop()\nprint(\"Closing database connection\")\nconn.close()",
        "detail": "MusicBrowser.jukebox",
        "documentation": {}
    },
    {
        "label": "build_tuple",
        "kind": 2,
        "importPath": "MusicBrowser.star_args",
        "description": "MusicBrowser.star_args",
        "peekOfCode": "def build_tuple(*args):\n    return args\nmessage_tuple = build_tuple(\"hello\", \"planet\", \"earth\", \"take\", \"me\", \"to\", \"your\", \"leader\")  # noqa: E501\nprint(type(message_tuple))\nprint(message_tuple)\nnumber_tuple = build_tuple(1, 2, 3, 4, 5, 6)\nprint(type(number_tuple))\nprint(number_tuple)",
        "detail": "MusicBrowser.star_args",
        "documentation": {}
    },
    {
        "label": "message_tuple",
        "kind": 5,
        "importPath": "MusicBrowser.star_args",
        "description": "MusicBrowser.star_args",
        "peekOfCode": "message_tuple = build_tuple(\"hello\", \"planet\", \"earth\", \"take\", \"me\", \"to\", \"your\", \"leader\")  # noqa: E501\nprint(type(message_tuple))\nprint(message_tuple)\nnumber_tuple = build_tuple(1, 2, 3, 4, 5, 6)\nprint(type(number_tuple))\nprint(number_tuple)",
        "detail": "MusicBrowser.star_args",
        "documentation": {}
    },
    {
        "label": "number_tuple",
        "kind": 5,
        "importPath": "MusicBrowser.star_args",
        "description": "MusicBrowser.star_args",
        "peekOfCode": "number_tuple = build_tuple(1, 2, 3, 4, 5, 6)\nprint(type(number_tuple))\nprint(number_tuple)",
        "detail": "MusicBrowser.star_args",
        "documentation": {}
    },
    {
        "label": "print_backwards",
        "kind": 2,
        "importPath": "MusicBrowser.star_kwargs",
        "description": "MusicBrowser.star_kwargs",
        "peekOfCode": "def print_backwards(*args, **kwargs):\n    end_character = kwargs.pop('end', '\\n')\n    sep_character = kwargs.pop('sep', ' ')\n    for word in args[:0:-1]:    # change the range\n        print(word[::-1], end=sep_character, **kwargs)\n    print(args[0][::-1], end=end_character, **kwargs)   # and print the first word separately #noqa\n    # print(end=end_character)  # which means we don't need this line\n# In this print statement we use the \"end=' '\"\" to continue the end of a string to the same line and not send it to a new line. #noqa\n# Adding the \"file=file\" allows us to print this script to a file.\n# You just add a named peremeter and pass that on to the built-in function, which is what is happening in the next line.   # noqa: E501",
        "detail": "MusicBrowser.star_kwargs",
        "documentation": {}
    },
    {
        "label": "backwards_print",
        "kind": 2,
        "importPath": "MusicBrowser.star_kwargs",
        "description": "MusicBrowser.star_kwargs",
        "peekOfCode": "def backwards_print(*args, **kwargs):\n    sep_character = kwargs.pop('sep', ' ')\n    print(sep_character.join(word[::-1] for word in args[::-1]), **kwargs)\nwith open(\"backwards.txt\", \"w\") as backwards:\n    # The line above first gives the open command to create a text file 'write' to the text file and call the file 'backwards'. # noqa\n    print_backwards(\"hello\", \"planet\", \"earth\", \"take\", \"me\", \"to\", \"your\", \"leader\", end=\"n\")  # noqa\n    print(\"Another String\")\n# print_backwards is a modified version of the print function. You then have to add the print parameters file equals the name of the file. #noqa\nprint()\nprint(\"hello\", \"planet\", \"earth\", \"take\", \"me\", \"to\", \"your\", \"leader\", end='', sep='\\n**\\n')  # noqa",
        "detail": "MusicBrowser.star_kwargs",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "MySQL.checkdb",
        "description": "MySQL.checkdb",
        "peekOfCode": "conn = sqlite3.connect(\"contacts.sqlite\")\nname = input(\"Please enter a name to search for? \")\nfor row in conn.execute(\"SELECT * FROM contacts WHERE name = ?\", (name,)):\n    print(row)\n# the name at the end in parathesis has comma with it to make it a tuple.\n# If you do not use a comma you will get a ProgrammingError:\n# Incorrect number of bindings supplied. The current statement uses 1, and there are 5 supplied.  # noqa\n# Also in that line you can use LIKE so that the query does not have to be case sensative.  # noqa\nconn.close()",
        "detail": "MySQL.checkdb",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "MySQL.checkdb",
        "description": "MySQL.checkdb",
        "peekOfCode": "name = input(\"Please enter a name to search for? \")\nfor row in conn.execute(\"SELECT * FROM contacts WHERE name = ?\", (name,)):\n    print(row)\n# the name at the end in parathesis has comma with it to make it a tuple.\n# If you do not use a comma you will get a ProgrammingError:\n# Incorrect number of bindings supplied. The current statement uses 1, and there are 5 supplied.  # noqa\n# Also in that line you can use LIKE so that the query does not have to be case sensative.  # noqa\nconn.close()",
        "detail": "MySQL.checkdb",
        "documentation": {}
    },
    {
        "label": "Employee",
        "kind": 6,
        "importPath": "MySQL.employee",
        "description": "MySQL.employee",
        "peekOfCode": "class Employee:\n    \"\"\"A sample Employee class\"\"\"\n    def __init__(self, first, last, pay):\n        self.first = first\n        self.last = last\n        self.pay = pay\n    @property\n    def email(self):\n        return '{}.{}@email.com'.format(self.first, self.last)\n    @property",
        "detail": "MySQL.employee",
        "documentation": {}
    },
    {
        "label": "create_connection",
        "kind": 2,
        "importPath": "MySQL.MySQL_Connection_Created",
        "description": "MySQL.MySQL_Connection_Created",
        "peekOfCode": "def create_connection(host_name, user_name, user_password):\n    connection = None\n    try:\n        connection = mysql.connector.connect(\n                host=host_name,\n                user=user_name,\n                passwd=user_password\n        )\n        print(\"Connection to MySQL DB successful\")\n    except Error as e:",
        "detail": "MySQL.MySQL_Connection_Created",
        "documentation": {}
    },
    {
        "label": "create_database",
        "kind": 2,
        "importPath": "MySQL.MySQL_Connection_Created",
        "description": "MySQL.MySQL_Connection_Created",
        "peekOfCode": "def create_database(connection, query):\n    cursor = connection.cursor()\n    try:\n        cursor.execute(query)\n        print(\"Database created successfully\")\n    except Error as e:\n        print(f\"The error '{e}' occurred\")",
        "detail": "MySQL.MySQL_Connection_Created",
        "documentation": {}
    },
    {
        "label": "connection",
        "kind": 5,
        "importPath": "MySQL.MySQL_Connection_Created",
        "description": "MySQL.MySQL_Connection_Created",
        "peekOfCode": "connection = create_connection(\"localhost\", \"root\", \"\")\ndef create_database(connection, query):\n    cursor = connection.cursor()\n    try:\n        cursor.execute(query)\n        print(\"Database created successfully\")\n    except Error as e:\n        print(f\"The error '{e}' occurred\")",
        "detail": "MySQL.MySQL_Connection_Created",
        "documentation": {}
    },
    {
        "label": "create_connection",
        "kind": 2,
        "importPath": "MySQL.Python_Sqlite",
        "description": "MySQL.Python_Sqlite",
        "peekOfCode": "def create_connection(path):\n    connection = None\n    try:\n        connection = sqlite3.connect(path)\n        print(\"Connection to SQLite DB successful\")\n    except Error as e:\n        print(f\"The error '{e}' occurred\")\n    return connection\nconnection = create_connection(\"E:\\\\sm_app.sqlite\")",
        "detail": "MySQL.Python_Sqlite",
        "documentation": {}
    },
    {
        "label": "connection",
        "kind": 5,
        "importPath": "MySQL.Python_Sqlite",
        "description": "MySQL.Python_Sqlite",
        "peekOfCode": "connection = create_connection(\"E:\\\\sm_app.sqlite\")",
        "detail": "MySQL.Python_Sqlite",
        "documentation": {}
    },
    {
        "label": "insert_emp",
        "kind": 2,
        "importPath": "MySQL.sqlite_demo",
        "description": "MySQL.sqlite_demo",
        "peekOfCode": "def insert_emp(emp):\n    with conn:\n        c.execute(\"INSERT INTO employees VALUES (:first, :last, :pay)\", \n          {'first': emp.first, 'last': emp.last, 'pay':emp.pay})\ndef get_emps_by_name(lastname):\n    c.execute(\"SELECT * FROM employees WHERE last = last\", {'lastname': lastname})\n    return c.fetchall()\ndef update_pay(emp, pay):\n    with conn:\n        c.execute(\"\"\"UPDATE employees SET pay = :pay",
        "detail": "MySQL.sqlite_demo",
        "documentation": {}
    },
    {
        "label": "get_emps_by_name",
        "kind": 2,
        "importPath": "MySQL.sqlite_demo",
        "description": "MySQL.sqlite_demo",
        "peekOfCode": "def get_emps_by_name(lastname):\n    c.execute(\"SELECT * FROM employees WHERE last = last\", {'lastname': lastname})\n    return c.fetchall()\ndef update_pay(emp, pay):\n    with conn:\n        c.execute(\"\"\"UPDATE employees SET pay = :pay\n                    WHERE first = :first AND last = :last\"\"\",\n                    {'first': emp.first, 'last': emp.last, 'pay': pay})\ndef remove_emp(emp):\n    with conn:",
        "detail": "MySQL.sqlite_demo",
        "documentation": {}
    },
    {
        "label": "update_pay",
        "kind": 2,
        "importPath": "MySQL.sqlite_demo",
        "description": "MySQL.sqlite_demo",
        "peekOfCode": "def update_pay(emp, pay):\n    with conn:\n        c.execute(\"\"\"UPDATE employees SET pay = :pay\n                    WHERE first = :first AND last = :last\"\"\",\n                    {'first': emp.first, 'last': emp.last, 'pay': pay})\ndef remove_emp(emp):\n    with conn:\n        c.execute(\"DELETE from employees WHERE first = :first AND last = :last\",\n                  {'first': emp.first, 'last': emp.last})\nemp_1 = Employee('David', 'Mann', 90000)",
        "detail": "MySQL.sqlite_demo",
        "documentation": {}
    },
    {
        "label": "remove_emp",
        "kind": 2,
        "importPath": "MySQL.sqlite_demo",
        "description": "MySQL.sqlite_demo",
        "peekOfCode": "def remove_emp(emp):\n    with conn:\n        c.execute(\"DELETE from employees WHERE first = :first AND last = :last\",\n                  {'first': emp.first, 'last': emp.last})\nemp_1 = Employee('David', 'Mann', 90000)\nemp_2 = Employee('Tamela', 'Mann', 80000)\ninsert_emp(emp_1)\ninsert_emp(emp_2)\nemps = get_emps_by_name('Mann')\nprint(emps)",
        "detail": "MySQL.sqlite_demo",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "MySQL.sqlite_demo",
        "description": "MySQL.sqlite_demo",
        "peekOfCode": "conn = sqlite3.connect(':memory:')\nc = conn.cursor()\nc.execute(\"\"\"CREATE TABLE employees (\n            first text,\n            last text,\n            pay integer\n            )\"\"\")\ndef insert_emp(emp):\n    with conn:\n        c.execute(\"INSERT INTO employees VALUES (:first, :last, :pay)\", ",
        "detail": "MySQL.sqlite_demo",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "MySQL.sqlite_demo",
        "description": "MySQL.sqlite_demo",
        "peekOfCode": "c = conn.cursor()\nc.execute(\"\"\"CREATE TABLE employees (\n            first text,\n            last text,\n            pay integer\n            )\"\"\")\ndef insert_emp(emp):\n    with conn:\n        c.execute(\"INSERT INTO employees VALUES (:first, :last, :pay)\", \n          {'first': emp.first, 'last': emp.last, 'pay':emp.pay})",
        "detail": "MySQL.sqlite_demo",
        "documentation": {}
    },
    {
        "label": "emp_1",
        "kind": 5,
        "importPath": "MySQL.sqlite_demo",
        "description": "MySQL.sqlite_demo",
        "peekOfCode": "emp_1 = Employee('David', 'Mann', 90000)\nemp_2 = Employee('Tamela', 'Mann', 80000)\ninsert_emp(emp_1)\ninsert_emp(emp_2)\nemps = get_emps_by_name('Mann')\nprint(emps)\nupdate_pay(emp_2, 95000)\nremove_emp(emp_1)\nemps = get_emps_by_name('Mann')\nprint(emps)",
        "detail": "MySQL.sqlite_demo",
        "documentation": {}
    },
    {
        "label": "emp_2",
        "kind": 5,
        "importPath": "MySQL.sqlite_demo",
        "description": "MySQL.sqlite_demo",
        "peekOfCode": "emp_2 = Employee('Tamela', 'Mann', 80000)\ninsert_emp(emp_1)\ninsert_emp(emp_2)\nemps = get_emps_by_name('Mann')\nprint(emps)\nupdate_pay(emp_2, 95000)\nremove_emp(emp_1)\nemps = get_emps_by_name('Mann')\nprint(emps)\nconn.close()",
        "detail": "MySQL.sqlite_demo",
        "documentation": {}
    },
    {
        "label": "emps",
        "kind": 5,
        "importPath": "MySQL.sqlite_demo",
        "description": "MySQL.sqlite_demo",
        "peekOfCode": "emps = get_emps_by_name('Mann')\nprint(emps)\nupdate_pay(emp_2, 95000)\nremove_emp(emp_1)\nemps = get_emps_by_name('Mann')\nprint(emps)\nconn.close()",
        "detail": "MySQL.sqlite_demo",
        "documentation": {}
    },
    {
        "label": "emps",
        "kind": 5,
        "importPath": "MySQL.sqlite_demo",
        "description": "MySQL.sqlite_demo",
        "peekOfCode": "emps = get_emps_by_name('Mann')\nprint(emps)\nconn.close()",
        "detail": "MySQL.sqlite_demo",
        "documentation": {}
    },
    {
        "label": "Account",
        "kind": 6,
        "importPath": "oop.accounts",
        "description": "oop.accounts",
        "peekOfCode": "class Account:\n    \"\"\" Simple account class with balance \"\"\"\n    @staticmethod\n    def _current_time():\n        utc_time = datetime.datetime.utcnow()\n        return pytz.utc.localize(utc_time)\n    \"\"\" This class creates a function for the account holders name and balance \"\"\"\n    def __init__(self, name, balance):\n        self._name = name\n        self.__balance = balance",
        "detail": "oop.accounts",
        "documentation": {}
    },
    {
        "label": "Kettle",
        "kind": 6,
        "importPath": "oop.builtins",
        "description": "oop.builtins",
        "peekOfCode": "class Kettle(object):\n    power_source = \"electricity\"\n    def __init__(self, make, price):\n        self.make = make\n        self.price = price\n        self.on = False\n    def switch_on(self):\n        self.on = True\nkenwood = Kettle(\"Kenwood\", 8.99)\nprint(kenwood.make)",
        "detail": "oop.builtins",
        "documentation": {}
    },
    {
        "label": "kenwood",
        "kind": 5,
        "importPath": "oop.builtins",
        "description": "oop.builtins",
        "peekOfCode": "kenwood = Kettle(\"Kenwood\", 8.99)\nprint(kenwood.make)\nprint(kenwood.price)\nkenwood.price = 12.75\nprint(kenwood.price)\nhamilton = Kettle(\"Hamilton\", 14.55)\nprint(\"Models: {} = {}, {} = {}\". format(kenwood.make, kenwood.price, hamilton.make, hamilton.price))\nprint(\"Models: {0.make} = {0.price}, {1.make} = {1.price}\".format(kenwood, hamilton))\nprint(hamilton.on)\nhamilton.switch_on()",
        "detail": "oop.builtins",
        "documentation": {}
    },
    {
        "label": "kenwood.price",
        "kind": 5,
        "importPath": "oop.builtins",
        "description": "oop.builtins",
        "peekOfCode": "kenwood.price = 12.75\nprint(kenwood.price)\nhamilton = Kettle(\"Hamilton\", 14.55)\nprint(\"Models: {} = {}, {} = {}\". format(kenwood.make, kenwood.price, hamilton.make, hamilton.price))\nprint(\"Models: {0.make} = {0.price}, {1.make} = {1.price}\".format(kenwood, hamilton))\nprint(hamilton.on)\nhamilton.switch_on()\nprint(hamilton.on)\nKettle.switch_on(kenwood)\nprint(kenwood.on)",
        "detail": "oop.builtins",
        "documentation": {}
    },
    {
        "label": "hamilton",
        "kind": 5,
        "importPath": "oop.builtins",
        "description": "oop.builtins",
        "peekOfCode": "hamilton = Kettle(\"Hamilton\", 14.55)\nprint(\"Models: {} = {}, {} = {}\". format(kenwood.make, kenwood.price, hamilton.make, hamilton.price))\nprint(\"Models: {0.make} = {0.price}, {1.make} = {1.price}\".format(kenwood, hamilton))\nprint(hamilton.on)\nhamilton.switch_on()\nprint(hamilton.on)\nKettle.switch_on(kenwood)\nprint(kenwood.on)\nkenwood.switch_on()\nprint(\"*\" * 80)",
        "detail": "oop.builtins",
        "documentation": {}
    },
    {
        "label": "kenwood.power",
        "kind": 5,
        "importPath": "oop.builtins",
        "description": "oop.builtins",
        "peekOfCode": "kenwood.power = 1.5\nprint(kenwood.power)\nhamilton.power = 2.4\nprint(hamilton.power)\nprint(\"Switch to atomic power\")\nKettle.power_source = \"atomic\"\nprint(Kettle.power_source)\nprint(\"Switch kenwood to gas\")\nkenwood.power_source = \"gas\"\nprint(kenwood.power_source)",
        "detail": "oop.builtins",
        "documentation": {}
    },
    {
        "label": "hamilton.power",
        "kind": 5,
        "importPath": "oop.builtins",
        "description": "oop.builtins",
        "peekOfCode": "hamilton.power = 2.4\nprint(hamilton.power)\nprint(\"Switch to atomic power\")\nKettle.power_source = \"atomic\"\nprint(Kettle.power_source)\nprint(\"Switch kenwood to gas\")\nkenwood.power_source = \"gas\"\nprint(kenwood.power_source)\nprint(hamilton.power_source)\nprint(Kettle.__dict__)",
        "detail": "oop.builtins",
        "documentation": {}
    },
    {
        "label": "Kettle.power_source",
        "kind": 5,
        "importPath": "oop.builtins",
        "description": "oop.builtins",
        "peekOfCode": "Kettle.power_source = \"atomic\"\nprint(Kettle.power_source)\nprint(\"Switch kenwood to gas\")\nkenwood.power_source = \"gas\"\nprint(kenwood.power_source)\nprint(hamilton.power_source)\nprint(Kettle.__dict__)\nprint(kenwood.__dict__)\nprint(hamilton.__dir__)",
        "detail": "oop.builtins",
        "documentation": {}
    },
    {
        "label": "kenwood.power_source",
        "kind": 5,
        "importPath": "oop.builtins",
        "description": "oop.builtins",
        "peekOfCode": "kenwood.power_source = \"gas\"\nprint(kenwood.power_source)\nprint(hamilton.power_source)\nprint(Kettle.__dict__)\nprint(kenwood.__dict__)\nprint(hamilton.__dir__)",
        "detail": "oop.builtins",
        "documentation": {}
    },
    {
        "label": "a_string",
        "kind": 5,
        "importPath": "oop.demo",
        "description": "oop.demo",
        "peekOfCode": "a_string = \"this a\\na string split\\t\\tand tabbed\"\nprint(a_string)\nraw_string = r\"this is\\na string split\\t\\tand tabbed\"\nprint(raw_string)\nb_string = \"this is\" + chr(10) + \"a string split\" + chr(9) + chr(9) + \"and tabbed\"\nprint(b_string)\nbackslash_string = \"this is a backlash \\followed by some text\"\nprint(backslash_string)\nbackslash_string = \"this is a backslash \\\\followed by some text\"\nprint(backslash_string)",
        "detail": "oop.demo",
        "documentation": {}
    },
    {
        "label": "raw_string",
        "kind": 5,
        "importPath": "oop.demo",
        "description": "oop.demo",
        "peekOfCode": "raw_string = r\"this is\\na string split\\t\\tand tabbed\"\nprint(raw_string)\nb_string = \"this is\" + chr(10) + \"a string split\" + chr(9) + chr(9) + \"and tabbed\"\nprint(b_string)\nbackslash_string = \"this is a backlash \\followed by some text\"\nprint(backslash_string)\nbackslash_string = \"this is a backslash \\\\followed by some text\"\nprint(backslash_string)\nerror_string = r\"this string ends with a \\\\\"",
        "detail": "oop.demo",
        "documentation": {}
    },
    {
        "label": "b_string",
        "kind": 5,
        "importPath": "oop.demo",
        "description": "oop.demo",
        "peekOfCode": "b_string = \"this is\" + chr(10) + \"a string split\" + chr(9) + chr(9) + \"and tabbed\"\nprint(b_string)\nbackslash_string = \"this is a backlash \\followed by some text\"\nprint(backslash_string)\nbackslash_string = \"this is a backslash \\\\followed by some text\"\nprint(backslash_string)\nerror_string = r\"this string ends with a \\\\\"",
        "detail": "oop.demo",
        "documentation": {}
    },
    {
        "label": "backslash_string",
        "kind": 5,
        "importPath": "oop.demo",
        "description": "oop.demo",
        "peekOfCode": "backslash_string = \"this is a backlash \\followed by some text\"\nprint(backslash_string)\nbackslash_string = \"this is a backslash \\\\followed by some text\"\nprint(backslash_string)\nerror_string = r\"this string ends with a \\\\\"",
        "detail": "oop.demo",
        "documentation": {}
    },
    {
        "label": "backslash_string",
        "kind": 5,
        "importPath": "oop.demo",
        "description": "oop.demo",
        "peekOfCode": "backslash_string = \"this is a backslash \\\\followed by some text\"\nprint(backslash_string)\nerror_string = r\"this string ends with a \\\\\"",
        "detail": "oop.demo",
        "documentation": {}
    },
    {
        "label": "error_string",
        "kind": 5,
        "importPath": "oop.demo",
        "description": "oop.demo",
        "peekOfCode": "error_string = r\"this string ends with a \\\\\"",
        "detail": "oop.demo",
        "documentation": {}
    },
    {
        "label": "grevy",
        "kind": 5,
        "importPath": "oop.main-Bearded-Daddy",
        "description": "oop.main-Bearded-Daddy",
        "peekOfCode": "grevy = Player(\"Grevy\")\nprint(grevy.name)\nprint(grevy.lives)\ngrevy.lives -= 1\nprint(grevy)\ngrevy.lives -= 1\nprint(grevy)\ngrevy.lives -= 1\nprint(grevy)\ngrevy.lives -= 1",
        "detail": "oop.main-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "grevy",
        "kind": 5,
        "importPath": "oop.main-LivingRoom-Computer",
        "description": "oop.main-LivingRoom-Computer",
        "peekOfCode": "grevy = Player(\"Grevy\")\nprint(grevy.name)\nprint(grevy.lives)\ngrevy.lives -= 1\nprint(grevy.lives)\n=======\ngrevy = Player(\"Grevy\")\nprint(grevy.name)\nprint(grevy.lives)\ngrevy.lives -= 1",
        "detail": "oop.main-LivingRoom-Computer",
        "documentation": {}
    },
    {
        "label": "grevy",
        "kind": 5,
        "importPath": "oop.main-LivingRoom-Computer",
        "description": "oop.main-LivingRoom-Computer",
        "peekOfCode": "grevy = Player(\"Grevy\")\nprint(grevy.name)\nprint(grevy.lives)\ngrevy.lives -= 1\nprint(grevy)\ngrevy.lives -= 1\nprint(grevy)\ngrevy.lives -= 1\nprint(grevy)\ngrevy.lives -= 1",
        "detail": "oop.main-LivingRoom-Computer",
        "documentation": {}
    },
    {
        "label": "Kettle",
        "kind": 6,
        "importPath": "oop.oop",
        "description": "oop.oop",
        "peekOfCode": "class Kettle(object):\n    def __init__(self, make, price):\n        self.make = make\n        self.price = price\n        self.on = False\nkenwood = Kettle(\"Kenwood\", 8.99)\nprint(kenwood.make)\nprint(kenwood.price)\nkenwood.price = 12.75\nprint(kenwood.price)",
        "detail": "oop.oop",
        "documentation": {}
    },
    {
        "label": "kenwood",
        "kind": 5,
        "importPath": "oop.oop",
        "description": "oop.oop",
        "peekOfCode": "kenwood = Kettle(\"Kenwood\", 8.99)\nprint(kenwood.make)\nprint(kenwood.price)\nkenwood.price = 12.75\nprint(kenwood.price)\nhamilton = Kettle(\"Hamilton\", 14.55)\nprint(\"Models: {} = {}, {} = {}\".format(kenwood.make, kenwood.price, hamilton.make, hamilton.price))",
        "detail": "oop.oop",
        "documentation": {}
    },
    {
        "label": "kenwood.price",
        "kind": 5,
        "importPath": "oop.oop",
        "description": "oop.oop",
        "peekOfCode": "kenwood.price = 12.75\nprint(kenwood.price)\nhamilton = Kettle(\"Hamilton\", 14.55)\nprint(\"Models: {} = {}, {} = {}\".format(kenwood.make, kenwood.price, hamilton.make, hamilton.price))",
        "detail": "oop.oop",
        "documentation": {}
    },
    {
        "label": "hamilton",
        "kind": 5,
        "importPath": "oop.oop",
        "description": "oop.oop",
        "peekOfCode": "hamilton = Kettle(\"Hamilton\", 14.55)\nprint(\"Models: {} = {}, {} = {}\".format(kenwood.make, kenwood.price, hamilton.make, hamilton.price))",
        "detail": "oop.oop",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "oop.player-Bearded-Daddy",
        "description": "oop.player-Bearded-Daddy",
        "peekOfCode": "class Player(object):\n    def __init__(self, name):\n        self.name = name\n        self.lives = 3\n        self.level = 1\n        self.score = 0\n    def _get_lives(self):\n        return self.lives\n    def _set_lives(self, lives):\n        if lives >= 0:",
        "detail": "oop.player-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "oop.player-LivingRoom-Computer",
        "description": "oop.player-LivingRoom-Computer",
        "peekOfCode": "class Player(object):\n<<<<<<< HEAD\n    def __init__(self, name):\n        self.name = name\n        self._lives = 3\n=======\n    def __init__(self, name):\n        self.name = name\n        self.lives = 3\n>>>>>>> d8d76de5c5eaf5716245077a1bd736626a24dd52",
        "detail": "oop.player-LivingRoom-Computer",
        "documentation": {}
    },
    {
        "label": "Song",
        "kind": 6,
        "importPath": "oop.song",
        "description": "oop.song",
        "peekOfCode": "class Song:\n    \"\"\" Class to represent a song.\n    Attributes:\n        title (str): The title of the song.\n        artist (str): The name of the song's creator.\n        duration (int): The duration of the song in seconds. May be zero.\n    \"\"\"\n    def __init__(self, title, artist, duration=0):\n        self.title = title\n        self.artist = artist",
        "detail": "oop.song",
        "documentation": {}
    },
    {
        "label": "Album",
        "kind": 6,
        "importPath": "oop.song",
        "description": "oop.song",
        "peekOfCode": "class Album:\n    \"\"\" Class to represent an Album, using it's track list.\n    Attributes:\n        name (str): The name of the album.\n        year (int): The year was album was released.\n        artist: (str): The name of the artist responsible for the album.\n        If not specified, the artist will default to an artist with the name \"Various Artists\".\n        tracks (List[Song]): A list of the songs on the album.\n    Methods:\n        add_song: Used to add a new song to the album's track list.",
        "detail": "oop.song",
        "documentation": {}
    },
    {
        "label": "Artist",
        "kind": 6,
        "importPath": "oop.song",
        "description": "oop.song",
        "peekOfCode": "class Artist: \n    \"\"\"Basic class to store artist details.\n    Attributes:\n        name (str): The name of the artist.\n        albums (List[Album]): A list of the albums by this artist.\n            The list includes only those albums in this collection, it is \n            not an exhaustive list of the artist's published albums.\n    Methods:\n        add_ablum: Use to add a new album to the artist's albums list.\n    \"\"\"",
        "detail": "oop.song",
        "documentation": {}
    },
    {
        "label": "find_object",
        "kind": 2,
        "importPath": "oop.song",
        "description": "oop.song",
        "peekOfCode": "def find_object(field, object_list):\n    \"\"\"Check 'object_list' to see if an object with a 'name' attribute equal to 'field' exists, return it if so.\"\"\"\n    for item in object_list:\n        if item.name == field:\n            return item\n    return None\ndef load_data():\n    artist_list = []\n    with open(\"albums.txt\", \"r\") as albums:\n        for line in albums:",
        "detail": "oop.song",
        "documentation": {}
    },
    {
        "label": "load_data",
        "kind": 2,
        "importPath": "oop.song",
        "description": "oop.song",
        "peekOfCode": "def load_data():\n    artist_list = []\n    with open(\"albums.txt\", \"r\") as albums:\n        for line in albums:\n            # data row should consist of (artist, album, year, song).\n            artist_field, album_field, year_field, song_field = tuple(line.strip('\\n').split('\\t'))\n            year_field = int(year_field)\n            print(\"{}:{}:{}:{}\".format(artist_field, album_field, year_field, song_field))\n            new_artist = find_object(artist_field, artist_list)             \n            if new_artist is None:",
        "detail": "oop.song",
        "documentation": {}
    },
    {
        "label": "create_checkfile",
        "kind": 2,
        "importPath": "oop.song",
        "description": "oop.song",
        "peekOfCode": "def create_checkfile(artist_list):\n    \"\"\"Create a check file from the object data for comparison with the original file.\"\"\"\n    with open(\"checkfile.txt\", \"w\") as checkfile:\n        for new_artist in artist_list:\n            for new_album in new_artist.albums:\n                for new_song in new_album.tracks:\n                    print(\"{0.name}\\t{1.name}\\t{1.year}\\t{2.title}\".format(new_artist, new_album, new_song),file=checkfile)\nif __name__=='__main__':\n    artists = load_data()\n    print(\"There are {} artists\".format(len(artists)))",
        "detail": "oop.song",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "PythonPractice.sqlite3",
        "description": "PythonPractice.sqlite3",
        "peekOfCode": "conn = sqlite3.connect('store_transactions.db')\ncursor = conn.cursor()\n# create a store table\ncommand1 = \"\"\"CREATE TABLE IF NOT EXISTS\nstores(store_id INTEGER PRIMARY KEY, location TEXT)\"\"\"\ncursor.execute(command1)\n# create a purchase table\ncommand2 = \"\"\"CREATE TABLE IF NOT EXISTS\npurchases(purchase_id INTEGER PRIMARY KEY, store_id INTEGER, total_cost FLOAT,\nFOREIGN KEY(store_id) REFERENCES stores(store_id))\"\"\"",
        "detail": "PythonPractice.sqlite3",
        "documentation": {}
    },
    {
        "label": "cursor",
        "kind": 5,
        "importPath": "PythonPractice.sqlite3",
        "description": "PythonPractice.sqlite3",
        "peekOfCode": "cursor = conn.cursor()\n# create a store table\ncommand1 = \"\"\"CREATE TABLE IF NOT EXISTS\nstores(store_id INTEGER PRIMARY KEY, location TEXT)\"\"\"\ncursor.execute(command1)\n# create a purchase table\ncommand2 = \"\"\"CREATE TABLE IF NOT EXISTS\npurchases(purchase_id INTEGER PRIMARY KEY, store_id INTEGER, total_cost FLOAT,\nFOREIGN KEY(store_id) REFERENCES stores(store_id))\"\"\"\ncursor.execute(command2)",
        "detail": "PythonPractice.sqlite3",
        "documentation": {}
    },
    {
        "label": "command1",
        "kind": 5,
        "importPath": "PythonPractice.sqlite3",
        "description": "PythonPractice.sqlite3",
        "peekOfCode": "command1 = \"\"\"CREATE TABLE IF NOT EXISTS\nstores(store_id INTEGER PRIMARY KEY, location TEXT)\"\"\"\ncursor.execute(command1)\n# create a purchase table\ncommand2 = \"\"\"CREATE TABLE IF NOT EXISTS\npurchases(purchase_id INTEGER PRIMARY KEY, store_id INTEGER, total_cost FLOAT,\nFOREIGN KEY(store_id) REFERENCES stores(store_id))\"\"\"\ncursor.execute(command2)\n# add three rows to our stores table\ncursor.execute(\"INSERT INTO store VALUES (21, 'Minneapolis, MN')\")",
        "detail": "PythonPractice.sqlite3",
        "documentation": {}
    },
    {
        "label": "command2",
        "kind": 5,
        "importPath": "PythonPractice.sqlite3",
        "description": "PythonPractice.sqlite3",
        "peekOfCode": "command2 = \"\"\"CREATE TABLE IF NOT EXISTS\npurchases(purchase_id INTEGER PRIMARY KEY, store_id INTEGER, total_cost FLOAT,\nFOREIGN KEY(store_id) REFERENCES stores(store_id))\"\"\"\ncursor.execute(command2)\n# add three rows to our stores table\ncursor.execute(\"INSERT INTO store VALUES (21, 'Minneapolis, MN')\")\ncursor.execute(\"INSERT INTO store VALUES (95, 'Chicago, IL')\")\ncursor.execute(\"INSERT INTO store VALUES (64, 'Iowa City, IA')\")\n# add to our purchases table\ncursor.execute(\"INSERT INTO purchases VALUES (54, 21, 15.49)\")",
        "detail": "PythonPractice.sqlite3",
        "documentation": {}
    },
    {
        "label": "results",
        "kind": 5,
        "importPath": "PythonPractice.sqlite3",
        "description": "PythonPractice.sqlite3",
        "peekOfCode": "results = cursor.fetchall()\nprint(results)",
        "detail": "PythonPractice.sqlite3",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "Python_Projects.DeletingObjectProperties",
        "description": "Python_Projects.DeletingObjectProperties",
        "peekOfCode": "class Person:\n  def __init__(self, name, age):\n    self.name = name\n    self.age = age\n  def myfunc(self):\n    print(\"Hello my name is \" + self.name)\np1 = Person(\"John\", 36)\ndel p1\nprint(p1)",
        "detail": "Python_Projects.DeletingObjectProperties",
        "documentation": {}
    },
    {
        "label": "p1",
        "kind": 5,
        "importPath": "Python_Projects.DeletingObjectProperties",
        "description": "Python_Projects.DeletingObjectProperties",
        "peekOfCode": "p1 = Person(\"John\", 36)\ndel p1\nprint(p1)",
        "detail": "Python_Projects.DeletingObjectProperties",
        "documentation": {}
    },
    {
        "label": "magic_8_ball",
        "kind": 2,
        "importPath": "Python_Projects.eight_ball",
        "description": "Python_Projects.eight_ball",
        "peekOfCode": "def magic_8_ball(question):\n    responses = [\n        \"It is certain.\",\n        \"It is decidedly so.\",\n        \"Without a doubt.\",\n        \"Yes - definitely.\",\n        \"You may rely on it.\",\n        \"As I see it, yes.\",\n        \"Most likely.\",\n        \"Outlook good.\",",
        "detail": "Python_Projects.eight_ball",
        "documentation": {}
    },
    {
        "label": "question",
        "kind": 5,
        "importPath": "Python_Projects.eight_ball",
        "description": "Python_Projects.eight_ball",
        "peekOfCode": "question = input(\"Ask a question: \")\nmagic_8_ball(question)",
        "detail": "Python_Projects.eight_ball",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "RollingBack.db.checkdb",
        "description": "RollingBack.db.checkdb",
        "peekOfCode": "db = sqlite3.connect(\"accounts.sqlite\", detect_types=sqlite3.PARSE_DECLTYPES)\nfor row in db.execute(\"SELECT * FROM localhistory\"):\n    print(row)\ndb.close()",
        "detail": "RollingBack.db.checkdb",
        "documentation": {}
    },
    {
        "label": "carlist",
        "kind": 5,
        "importPath": "RollingBack.db.pickling",
        "description": "RollingBack.db.pickling",
        "peekOfCode": "carlist = ['Toyota', 'BMW', 'Audi', 'Suzuki', 'Honda']\n# open a file to store the pickle of cars\nwith open('carlist.pkl','wb') as carpickle: # To open you need parameters, the file name and the  # noqa\n    pickle.dump(carlist, carpickle) # Dump is the functions that creates the pickle file. It takes two agruements.  # noqa\n    # The first is the file we want to pickle and the second arguement is the file object.  # noqa",
        "detail": "RollingBack.db.pickling",
        "documentation": {}
    },
    {
        "label": "Account",
        "kind": 6,
        "importPath": "RollingBack.db.rollback",
        "description": "RollingBack.db.rollback",
        "peekOfCode": "class Account(object):\n    \"\"\"This class creates an object called Account.\"\"\"\n    @staticmethod\n    def _current_time():\n        return pytz.utc.localize(datetime.datetime.utcnow())\n        # local_time = pytz.utc.localize(datetime.datetime.utcnow)\n        # return local_time.astimezone()\ndef __init__(self, name: str, opening_balance: int = 0):\n    cursor = db.execute(\"SELECT name, balance FROM accounts WHERE (name = ?)\", (name,))  # noqa\n    row = cursor.fetchone()",
        "detail": "RollingBack.db.rollback",
        "documentation": {}
    },
    {
        "label": "deposit",
        "kind": 2,
        "importPath": "RollingBack.db.rollback",
        "description": "RollingBack.db.rollback",
        "peekOfCode": "def deposit(self, amount: int) -> float:\n    \"\"\"deposit function indicates a deposit.\n    Parameters\n    ----------\n    amount\n        The amount indicates the total of the deposit.\n    Returns\n    -------\n        Once this function is run we will return a floating number.\n    \"\"\"",
        "detail": "RollingBack.db.rollback",
        "documentation": {}
    },
    {
        "label": "withdraw",
        "kind": 2,
        "importPath": "RollingBack.db.rollback",
        "description": "RollingBack.db.rollback",
        "peekOfCode": "def withdraw(self, amount: int) -> float:\n    \"\"\"withdraw function shows the amount taken out.\n    Parameters\n    ----------\n    amount\n        This indicates the total taken out.\n    Returns\n    -------\n        The return function will indicate a floating number.\n    \"\"\"",
        "detail": "RollingBack.db.rollback",
        "documentation": {}
    },
    {
        "label": "show_balance",
        "kind": 2,
        "importPath": "RollingBack.db.rollback",
        "description": "RollingBack.db.rollback",
        "peekOfCode": "def show_balance(self):\n    \"\"\"show_balance This line indicates the balance.\n    \"\"\"\n    print(\"Balance on account {} is {:.2f}\".format(self.name, self._balance / 100))  # noqa\nif __name__ == '__main__':\n    john = Account()\n    john.deposit(5000)\n    john.deposit(10)\n    john.deposit(10)\n    john.withdraw(30)",
        "detail": "RollingBack.db.rollback",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "RollingBack.db.rollback",
        "description": "RollingBack.db.rollback",
        "peekOfCode": "db = sqlite3.connect(\"accounts.sqlite\", detect_types=sqlite3.PARSE_DECLTYPES)\n# this is the database connection to sqlite with a .sqlite extention # noqa\ndb.execute(\"\"\"CREATE TABLE IF NOT EXISTS accounts\n(name TEXT PRIMARY KEY NOT NULL, balance INTEGER NOT NULL)\"\"\")\n# noqa: #E501 This is the accounts table.\ndb.execute(\"CREATE TABLE IF NOT EXISTS history (time TIMESTAMP NOT NULL,\"\n           \" account TEXT NOT NULL, amount INTEGER NOT NULL, PRIMARY KEY (time, account))\") # noqa\ndb.execute(\"CREATE VIEW IF NOT EXISTS localhistory AS\"\n           \" SELECT strftime('%Y-%m-%d %H:%M:%f', history.time, 'localtime') AS localtime,\"  # noqa\n           \" history.account, history.amount FROM history ORDER BY history.time\")  # noqa",
        "detail": "RollingBack.db.rollback",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "RollingBack.db.tzcheck",
        "description": "RollingBack.db.tzcheck",
        "peekOfCode": "db = sqlite3.connect(\"accounts.sqlite\", detect_types=sqlite3.PARSE_DECLTYPES)\n#for row in db.execute (\"SELECT strftime('%Y-%m-%d %H:%M:%f', history.time, 'localtime') AS localtime,\" \"             # noqa: E501\n#                       history.account, history.amount FROM history ORDER BY history.time\"):  # noqa: E501\nfor row in db.execute(\"SELECT * FROM history\"):\n    utc_time = row[0]\n    # picked_zone = row[3]\n    # zone = pickle.loads(picked_zone)\n    zone = pytz.timezone(\"Australia/Adelaide\")\n    local_time = pytz.utc.localize(utc_time).astimezone(zone)\n    print(\"{}\\t{}\\t{}\".format(utc_time, local_time, local_time.tzinfo))",
        "detail": "RollingBack.db.tzcheck",
        "documentation": {}
    },
    {
        "label": "Account",
        "kind": 6,
        "importPath": "RollingBack.db.tztest",
        "description": "RollingBack.db.tztest",
        "peekOfCode": "class Account(object):\n    \"\"\"This class creates an object called Account.\"\"\"\n    @staticmethod\n    def _current_time():\n        # return pytz.utc.localize(datetime.datetime.utcnow())\n        # local_time = pytz.utc.localize(datetime.datetime.utcnow)\n        # return local_time.astimezone()\n        utc_time = pytz.utc.localize(datetime.datetime.utcnow())\n        local_time = utc_time.astimezone()\n        zone = local_time.tzinfo",
        "detail": "RollingBack.db.tztest",
        "documentation": {}
    },
    {
        "label": "deposit",
        "kind": 2,
        "importPath": "RollingBack.db.tztest",
        "description": "RollingBack.db.tztest",
        "peekOfCode": "def deposit(self, amount: int) -> float:\n    \"\"\"deposit function indicates a deposit.\n    Parameters\n    ----------\n    amount\n        The amount indicates the total of the deposit.\n    Returns\n    -------\n        Once this function is run we will return a floating number.\n    \"\"\"",
        "detail": "RollingBack.db.tztest",
        "documentation": {}
    },
    {
        "label": "withdraw",
        "kind": 2,
        "importPath": "RollingBack.db.tztest",
        "description": "RollingBack.db.tztest",
        "peekOfCode": "def withdraw(self, amount: int) -> float:\n    \"\"\"withdraw function shows the amount taken out.\n    Parameters\n    ----------\n    amount\n        This indicates the total taken out.\n    Returns\n    -------\n        The return function will indicate a floating number.\n    \"\"\"",
        "detail": "RollingBack.db.tztest",
        "documentation": {}
    },
    {
        "label": "show_balance",
        "kind": 2,
        "importPath": "RollingBack.db.tztest",
        "description": "RollingBack.db.tztest",
        "peekOfCode": "def show_balance(self):\n    \"\"\"show_balance This line indicates the balance.\n    \"\"\"\n    print(\"Balance on account {} is {:.2f}\".format(self.name, self._balance / 100))  # noqa\nif __name__ == '__main__':\n    john = Account()\n    john.deposit(5000)\n    john.deposit(10)\n    john.deposit(10)\n    john.withdraw(30)",
        "detail": "RollingBack.db.tztest",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "RollingBack.db.tztest",
        "description": "RollingBack.db.tztest",
        "peekOfCode": "db = sqlite3.connect(\"accounts.sqlite\", detect_types=sqlite3.PARSE_DECLTYPES)\n# this is the database connection to sqlite with a .sqlite extention # noqa\ndb.execute(\"\"\"CREATE TABLE IF NOT EXISTS accounts\n(name TEXT PRIMARY KEY NOT NULL, balance INTEGER NOT NULL)\"\"\")\n# noqa: #E501 This is the accounts table.\ndb.execute(\"CREATE TABLE IF NOT EXISTS history (time TIMESTAMP NOT NULL,\"\n           \" account TEXT NOT NULL, amount INTEGER NOT NULL,\"\n           \"zone INTEGER NOT NULL, PRIMARY KEY (time, account))\")\n# On line 13 we added a new column called zone.\ndb.execute(\"CREATE VIEW IF NOT EXISTS localhistory AS\"",
        "detail": "RollingBack.db.tztest",
        "documentation": {}
    },
    {
        "label": "albums",
        "kind": 5,
        "importPath": "Sequences.nested_data",
        "description": "Sequences.nested_data",
        "peekOfCode": "albums = [\n    (\"Welcome to my Nightmare\", \"Alice Cooper\", 1975,\n     [\n         (1, \"Welcome to my Nightmare\"),\n         (2, \"Devil's Food\"),\n         (3, \"The Black Widow\"),\n         (4, \"Some Folks\"),\n         (5, \"Only Women Bleed\"),\n     ]\n     ),",
        "detail": "Sequences.nested_data",
        "documentation": {}
    },
    {
        "label": "album",
        "kind": 5,
        "importPath": "Sequences.nested_data",
        "description": "Sequences.nested_data",
        "peekOfCode": "album = albums[2]\nprint(album)\nsongs = albums[3]\nprint(songs)\nsong = songs[1]\nprint(song)\nprint(song[1])",
        "detail": "Sequences.nested_data",
        "documentation": {}
    },
    {
        "label": "songs",
        "kind": 5,
        "importPath": "Sequences.nested_data",
        "description": "Sequences.nested_data",
        "peekOfCode": "songs = albums[3]\nprint(songs)\nsong = songs[1]\nprint(song)\nprint(song[1])",
        "detail": "Sequences.nested_data",
        "documentation": {}
    },
    {
        "label": "song",
        "kind": 5,
        "importPath": "Sequences.nested_data",
        "description": "Sequences.nested_data",
        "peekOfCode": "song = songs[1]\nprint(song)\nprint(song[1])",
        "detail": "Sequences.nested_data",
        "documentation": {}
    },
    {
        "label": "albums",
        "kind": 5,
        "importPath": "Sequences.tuples_intro",
        "description": "Sequences.tuples_intro",
        "peekOfCode": "albums = [(\"Welcome to my Nightmare\", \"Alice Cooper\", 1975),\n            (\"Bad Company\", \"Bad Company\", 1974),\n            (\"Nightflight\", \"Budgie\", 1981),\n            (\"More Mayhem\", \"Emilda May\", 2011),\n            (\"Ride the Lightning\", \"Metallica\", 1984),\n         ]\nprint(len(albums))\nfor album in albums:\n    name, artist, year = album\n    print(\"Album: {}, Artist: {}, Year: {}\"",
        "detail": "Sequences.tuples_intro",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Sequences.unpacking",
        "description": "Sequences.unpacking",
        "peekOfCode": "a = b = c = d = e = f = 42\nprint(c)\nx, y, z  = 1, 2, 76\nprint(x)\nprint(y)\nprint(z)\nprint(\"Unpacking a tuple\")\ndata = 1, 2, 76 # data represents a tuple\nx, y, z = data\nprint(x)",
        "detail": "Sequences.unpacking",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Sequences.unpacking",
        "description": "Sequences.unpacking",
        "peekOfCode": "data = 1, 2, 76 # data represents a tuple\nx, y, z = data\nprint(x)\nprint(y)\nprint(z)\nprint(\"Unpacking a list\")\ndata_list = [12, 13, 14]\ndata_list.append(15)\np, q, r = data_list\nprint(p)",
        "detail": "Sequences.unpacking",
        "documentation": {}
    },
    {
        "label": "data_list",
        "kind": 5,
        "importPath": "Sequences.unpacking",
        "description": "Sequences.unpacking",
        "peekOfCode": "data_list = [12, 13, 14]\ndata_list.append(15)\np, q, r = data_list\nprint(p)\nprint(q)\nprint(r)",
        "detail": "Sequences.unpacking",
        "documentation": {}
    },
    {
        "label": "load_images",
        "kind": 2,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "def load_images(card_images):\n    suits = ['heart', 'club', 'diamond', 'spade']\n    face_cards = ['jack', 'queen', 'king']\n    if tkinter.TkVersion >= 8.6:\n        extension = 'png'\n    else:\n        extension = 'ppm'\n    # For each suit, retrieve the image for the cards\n    for suit in suits:\n        # First the number cards 1 to 10",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "score_hand",
        "kind": 2,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "def score_hand(hand):\n    # calculate the total score of all cards in list.\n    # Only one ace can have the value of 11, and this will be reduce to 1 if the hand would bust.\n    score = 0\n    ace = False\n    for next_card in hand:\n        card_value = next_card[0]\n        if card_value == 1 and not ace:\n            ace = True\n            card_value = 11",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "deal_dealer",
        "kind": 2,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "def deal_dealer():\n    dealer_score = score_hand(dealer_hand)\n    while 0 < dealer_score < 17:\n        dealer_hand.append(_deal_card(dealer_card_frame))\n        dealer_score = score_hand(dealer_hand)\n        #TODO what does label.set do?\n        dealer_score_label.set(dealer_score)\n    player_score = score_hand(player_hand)\n    if player_score > 21:\n        result_text.set(\"Dealer Wins!\")",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "deal_player",
        "kind": 2,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "def deal_player():\n    player_hand.append(_deal_card(player_card_frame))\n    player_score = score_hand(player_hand)      \n    player_score_label.set(score_hand(player_hand))\n    # if player_score > 21:\n    #         result_text.set(\"Dealer Wins!\")\ndef initial_deal():\n    deal_dealer()       \n    dealer_hand.append(_deal_card(dealer_card_frame))        \n    dealer_score_label.set(score_hand(dealer_hand))        ",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "initial_deal",
        "kind": 2,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "def initial_deal():\n    deal_dealer()       \n    dealer_hand.append(_deal_card(dealer_card_frame))        \n    dealer_score_label.set(score_hand(dealer_hand))        \n    deal_player()\n    player_hand.append(_deal_card(player_card_frame))\n    player_score_label.set(score_hand(player_hand))\ndef new_deal():\n    global dealer_card_frame\n    global player_card_frame",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "new_deal",
        "kind": 2,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "def new_deal():\n    global dealer_card_frame\n    global player_card_frame\n    global dealer_hand\n    global player_hand\n    # Embedded frame to hold the card images\n    dealer_card_frame.destroy()\n    dealer_card_frame = tkinter.Frame(card_frame, background='green')\n    dealer_card_frame.grid(row=0, column=1, sticky='ew', rowspan=2)\n    # Embedded frame to hold the card images",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "shuffle",
        "kind": 2,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "def shuffle():\n    random.shuffle(deck)\ndef play():\n    initial_deal()\n    mainWindow.mainloop()\nmainWindow = tkinter.Tk()\n# Set up the screen and frames for the dealer and player\nmainWindow.title(\"Grevy's Black Jack\")\nmainWindow.geometry(\"640x480\")\nmainWindow.configure(background=\"green\")",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "play",
        "kind": 2,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "def play():\n    initial_deal()\n    mainWindow.mainloop()\nmainWindow = tkinter.Tk()\n# Set up the screen and frames for the dealer and player\nmainWindow.title(\"Grevy's Black Jack\")\nmainWindow.geometry(\"640x480\")\nmainWindow.configure(background=\"green\")\nresult_text = tkinter.StringVar()\nresult = tkinter.Label(mainWindow, textvariable=result_text)",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "mainWindow",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "mainWindow = tkinter.Tk()\n# Set up the screen and frames for the dealer and player\nmainWindow.title(\"Grevy's Black Jack\")\nmainWindow.geometry(\"640x480\")\nmainWindow.configure(background=\"green\")\nresult_text = tkinter.StringVar()\nresult = tkinter.Label(mainWindow, textvariable=result_text)\nresult.grid(row=0, column=0, columnspan=3)\ncard_frame = tkinter.Frame(mainWindow, relief=\"sunken\",\n                        borderwidth=1, background=\"green\")",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "result_text",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "result_text = tkinter.StringVar()\nresult = tkinter.Label(mainWindow, textvariable=result_text)\nresult.grid(row=0, column=0, columnspan=3)\ncard_frame = tkinter.Frame(mainWindow, relief=\"sunken\",\n                        borderwidth=1, background=\"green\")\ncard_frame.grid(row=1, column=0, sticky=\"ew\", columnspan=3, rowspan=2)\ndealer_score_label = tkinter.IntVar()\ntkinter.Label(card_frame, text=\"Dealer\", background=\"green\",\n            fg=\"white\").grid(row=0, column=0)\ntkinter.Label(card_frame, textvariable=dealer_score_label,",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "result = tkinter.Label(mainWindow, textvariable=result_text)\nresult.grid(row=0, column=0, columnspan=3)\ncard_frame = tkinter.Frame(mainWindow, relief=\"sunken\",\n                        borderwidth=1, background=\"green\")\ncard_frame.grid(row=1, column=0, sticky=\"ew\", columnspan=3, rowspan=2)\ndealer_score_label = tkinter.IntVar()\ntkinter.Label(card_frame, text=\"Dealer\", background=\"green\",\n            fg=\"white\").grid(row=0, column=0)\ntkinter.Label(card_frame, textvariable=dealer_score_label,\n            background=\"green\", fg=\"white\").grid(row=1, column=0)",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "card_frame",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "card_frame = tkinter.Frame(mainWindow, relief=\"sunken\",\n                        borderwidth=1, background=\"green\")\ncard_frame.grid(row=1, column=0, sticky=\"ew\", columnspan=3, rowspan=2)\ndealer_score_label = tkinter.IntVar()\ntkinter.Label(card_frame, text=\"Dealer\", background=\"green\",\n            fg=\"white\").grid(row=0, column=0)\ntkinter.Label(card_frame, textvariable=dealer_score_label,\n            background=\"green\", fg=\"white\").grid(row=1, column=0)\n# Embedded frame to hold the card images.\ndealer_card_frame = tkinter.Frame(card_frame, background=\"green\")",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "dealer_score_label",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "dealer_score_label = tkinter.IntVar()\ntkinter.Label(card_frame, text=\"Dealer\", background=\"green\",\n            fg=\"white\").grid(row=0, column=0)\ntkinter.Label(card_frame, textvariable=dealer_score_label,\n            background=\"green\", fg=\"white\").grid(row=1, column=0)\n# Embedded frame to hold the card images.\ndealer_card_frame = tkinter.Frame(card_frame, background=\"green\")\ndealer_card_frame.grid(row=0, column=1, sticky=\"ew\", rowspan=2)\nplayer_score_label = tkinter.IntVar()\ntkinter.Label(card_frame, text=\"Player\", background=\"green\",",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "dealer_card_frame",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "dealer_card_frame = tkinter.Frame(card_frame, background=\"green\")\ndealer_card_frame.grid(row=0, column=1, sticky=\"ew\", rowspan=2)\nplayer_score_label = tkinter.IntVar()\ntkinter.Label(card_frame, text=\"Player\", background=\"green\",\n            fg=\"white\").grid(row=2, column=0)\ntkinter.Label(card_frame, textvariable=player_score_label,\n            background=\"green\", fg=\"white\").grid(row=3, column=0)\n# Embedded frame to hold the card images\nplayer_card_frame = tkinter.Frame(card_frame, background=\"green\")\nplayer_card_frame.grid(row=2, column=1, sticky=\"ew\", rowspan=2)",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "player_score_label",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "player_score_label = tkinter.IntVar()\ntkinter.Label(card_frame, text=\"Player\", background=\"green\",\n            fg=\"white\").grid(row=2, column=0)\ntkinter.Label(card_frame, textvariable=player_score_label,\n            background=\"green\", fg=\"white\").grid(row=3, column=0)\n# Embedded frame to hold the card images\nplayer_card_frame = tkinter.Frame(card_frame, background=\"green\")\nplayer_card_frame.grid(row=2, column=1, sticky=\"ew\", rowspan=2)\nbutton_frame = tkinter.Frame(mainWindow)\nbutton_frame.grid(row=3, column=0, columnspan=3, sticky=\"w\")",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "player_card_frame",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "player_card_frame = tkinter.Frame(card_frame, background=\"green\")\nplayer_card_frame.grid(row=2, column=1, sticky=\"ew\", rowspan=2)\nbutton_frame = tkinter.Frame(mainWindow)\nbutton_frame.grid(row=3, column=0, columnspan=3, sticky=\"w\")\ndealer_button = tkinter.Button(\n    button_frame, text=\"Dealer\", command=deal_dealer)\ndealer_button.grid(row=0, column=0)\nplayer_button = tkinter.Button(\n    button_frame, text=\"Player\", command=deal_player)\nplayer_button.grid(row=0, column=1)",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "button_frame",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "button_frame = tkinter.Frame(mainWindow)\nbutton_frame.grid(row=3, column=0, columnspan=3, sticky=\"w\")\ndealer_button = tkinter.Button(\n    button_frame, text=\"Dealer\", command=deal_dealer)\ndealer_button.grid(row=0, column=0)\nplayer_button = tkinter.Button(\n    button_frame, text=\"Player\", command=deal_player)\nplayer_button.grid(row=0, column=1)\nnew_deal_button = tkinter.Button(\n    button_frame, text=\"New Deal\", command=new_deal)",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "dealer_button",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "dealer_button = tkinter.Button(\n    button_frame, text=\"Dealer\", command=deal_dealer)\ndealer_button.grid(row=0, column=0)\nplayer_button = tkinter.Button(\n    button_frame, text=\"Player\", command=deal_player)\nplayer_button.grid(row=0, column=1)\nnew_deal_button = tkinter.Button(\n    button_frame, text=\"New Deal\", command=new_deal)\nnew_deal_button.grid(row=0, column=2)\nshuffle_button = tkinter.Button(button_frame, text=\"Shuffle\", command=shuffle)",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "player_button",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "player_button = tkinter.Button(\n    button_frame, text=\"Player\", command=deal_player)\nplayer_button.grid(row=0, column=1)\nnew_deal_button = tkinter.Button(\n    button_frame, text=\"New Deal\", command=new_deal)\nnew_deal_button.grid(row=0, column=2)\nshuffle_button = tkinter.Button(button_frame, text=\"Shuffle\", command=shuffle)\nshuffle_button.grid(row=0, column=3)\n# Load cards\ncards = []",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "new_deal_button",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "new_deal_button = tkinter.Button(\n    button_frame, text=\"New Deal\", command=new_deal)\nnew_deal_button.grid(row=0, column=2)\nshuffle_button = tkinter.Button(button_frame, text=\"Shuffle\", command=shuffle)\nshuffle_button.grid(row=0, column=3)\n# Load cards\ncards = []\nload_images(cards)\nprint(cards)\n# Create a new deck of cards and shuffle them.",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "shuffle_button",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "shuffle_button = tkinter.Button(button_frame, text=\"Shuffle\", command=shuffle)\nshuffle_button.grid(row=0, column=3)\n# Load cards\ncards = []\nload_images(cards)\nprint(cards)\n# Create a new deck of cards and shuffle them.\ndeck = list(cards) + list(cards) + list(cards)\nshuffle()\n# Create the list to store the dealer's and player's hands",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "cards",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "cards = []\nload_images(cards)\nprint(cards)\n# Create a new deck of cards and shuffle them.\ndeck = list(cards) + list(cards) + list(cards)\nshuffle()\n# Create the list to store the dealer's and player's hands\ndealer_hand = []\nplayer_hand = []\n# deal_player()",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "deck",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "deck = list(cards) + list(cards) + list(cards)\nshuffle()\n# Create the list to store the dealer's and player's hands\ndealer_hand = []\nplayer_hand = []\n# deal_player()\n# dealer_hand.append(_deal_card(dealer_card_frame))\n# dealer_score_label.set(score_hand(dealer_hand))\n# deal_player()\nif __name__ == \"__main__\":",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "dealer_hand",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "dealer_hand = []\nplayer_hand = []\n# deal_player()\n# dealer_hand.append(_deal_card(dealer_card_frame))\n# dealer_score_label.set(score_hand(dealer_hand))\n# deal_player()\nif __name__ == \"__main__\":\n    play()",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "player_hand",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "player_hand = []\n# deal_player()\n# dealer_hand.append(_deal_card(dealer_card_frame))\n# dealer_score_label.set(score_hand(dealer_hand))\n# deal_player()\nif __name__ == \"__main__\":\n    play()",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "load_images",
        "kind": 2,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "def load_images(card_images):\n    suits = ['heart', 'club', 'diamond', 'spade']\n    face_cards = ['jack', 'queen', 'king']\n    if tkinter.TkVersion >= 8.6:\n        extension = 'png'\n    else:\n        extension = 'ppm'\n    # For each suit, retrieve the image for the cards\n    for suit in suits:\n        # First the number cards 1 to 10",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "score_hand",
        "kind": 2,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "def score_hand(hand):\n    # calculate the total score of all cards in list.\n    # Only one ace can have the value of 11, and this will be reduce to 1 if the hand would bust.\n    score = 0\n    ace = False\n    for next_card in hand:\n        card_value = next_card[0]\n        if card_value == 1 and not ace:\n            ace = True\n            card_value = 11",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "deal_dealer",
        "kind": 2,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "def deal_dealer():\n    dealer_score = score_hand(dealer_hand)\n    while 0 < dealer_score < 17:\n        dealer_hand.append(_deal_card(dealer_card_frame))\n        dealer_score = score_hand(dealer_hand)\n        #TODO what does label.set do?\n        dealer_score_label.set(dealer_score)\n    player_score = score_hand(player_hand)\n    if player_score > 21:\n        result_text.set(\"Dealer Wins!\")",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "deal_player",
        "kind": 2,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "def deal_player():\n    player_hand.append(_deal_card(player_card_frame))\n    player_score = score_hand(player_hand)      \n    player_score_label.set(score_hand(player_hand))\n    # if player_score > 21:\n    #         result_text.set(\"Dealer Wins!\")\ndef initial_deal():\n    deal_dealer()       \n    dealer_hand.append(_deal_card(dealer_card_frame))        \n    dealer_score_label.set(score_hand(dealer_hand))        ",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "initial_deal",
        "kind": 2,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "def initial_deal():\n    deal_dealer()       \n    dealer_hand.append(_deal_card(dealer_card_frame))        \n    dealer_score_label.set(score_hand(dealer_hand))        \n    deal_player()\n    player_hand.append(_deal_card(player_card_frame))\n    player_score_label.set(score_hand(player_hand))\ndef new_deal():\n    global dealer_card_frame\n    global player_card_frame",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "new_deal",
        "kind": 2,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "def new_deal():\n    global dealer_card_frame\n    global player_card_frame\n    global dealer_hand\n    global player_hand\n    # Embedded frame to hold the card images\n    dealer_card_frame.destroy()\n    dealer_card_frame = tkinter.Frame(card_frame, background='green')\n    dealer_card_frame.grid(row=0, column=1, sticky='ew', rowspan=2)\n    # Embedded frame to hold the card images",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "shuffle",
        "kind": 2,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "def shuffle():\n    random.shuffle(deck)\ndef play():\n    initial_deal()\n    mainWindow.mainloop()\nmainWindow = tkinter.Tk()\n# Set up the screen and frames for the dealer and player\nmainWindow.title(\"Grevy's Black Jack\")\nmainWindow.geometry(\"640x480\")\nmainWindow.configure(background=\"green\")",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "play",
        "kind": 2,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "def play():\n    initial_deal()\n    mainWindow.mainloop()\nmainWindow = tkinter.Tk()\n# Set up the screen and frames for the dealer and player\nmainWindow.title(\"Grevy's Black Jack\")\nmainWindow.geometry(\"640x480\")\nmainWindow.configure(background=\"green\")\nresult_text = tkinter.StringVar()\nresult = tkinter.Label(mainWindow, textvariable=result_text)",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "mainWindow",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "mainWindow = tkinter.Tk()\n# Set up the screen and frames for the dealer and player\nmainWindow.title(\"Grevy's Black Jack\")\nmainWindow.geometry(\"640x480\")\nmainWindow.configure(background=\"green\")\nresult_text = tkinter.StringVar()\nresult = tkinter.Label(mainWindow, textvariable=result_text)\nresult.grid(row=0, column=0, columnspan=3)\ncard_frame = tkinter.Frame(mainWindow, relief=\"sunken\",\n                        borderwidth=1, background=\"green\")",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "result_text",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "result_text = tkinter.StringVar()\nresult = tkinter.Label(mainWindow, textvariable=result_text)\nresult.grid(row=0, column=0, columnspan=3)\ncard_frame = tkinter.Frame(mainWindow, relief=\"sunken\",\n                        borderwidth=1, background=\"green\")\ncard_frame.grid(row=1, column=0, sticky=\"ew\", columnspan=3, rowspan=2)\ndealer_score_label = tkinter.IntVar()\ntkinter.Label(card_frame, text=\"Dealer\", background=\"green\",\n            fg=\"white\").grid(row=0, column=0)\ntkinter.Label(card_frame, textvariable=dealer_score_label,",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "result = tkinter.Label(mainWindow, textvariable=result_text)\nresult.grid(row=0, column=0, columnspan=3)\ncard_frame = tkinter.Frame(mainWindow, relief=\"sunken\",\n                        borderwidth=1, background=\"green\")\ncard_frame.grid(row=1, column=0, sticky=\"ew\", columnspan=3, rowspan=2)\ndealer_score_label = tkinter.IntVar()\ntkinter.Label(card_frame, text=\"Dealer\", background=\"green\",\n            fg=\"white\").grid(row=0, column=0)\ntkinter.Label(card_frame, textvariable=dealer_score_label,\n            background=\"green\", fg=\"white\").grid(row=1, column=0)",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "card_frame",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "card_frame = tkinter.Frame(mainWindow, relief=\"sunken\",\n                        borderwidth=1, background=\"green\")\ncard_frame.grid(row=1, column=0, sticky=\"ew\", columnspan=3, rowspan=2)\ndealer_score_label = tkinter.IntVar()\ntkinter.Label(card_frame, text=\"Dealer\", background=\"green\",\n            fg=\"white\").grid(row=0, column=0)\ntkinter.Label(card_frame, textvariable=dealer_score_label,\n            background=\"green\", fg=\"white\").grid(row=1, column=0)\n# Embedded frame to hold the card images.\ndealer_card_frame = tkinter.Frame(card_frame, background=\"green\")",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "dealer_score_label",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "dealer_score_label = tkinter.IntVar()\ntkinter.Label(card_frame, text=\"Dealer\", background=\"green\",\n            fg=\"white\").grid(row=0, column=0)\ntkinter.Label(card_frame, textvariable=dealer_score_label,\n            background=\"green\", fg=\"white\").grid(row=1, column=0)\n# Embedded frame to hold the card images.\ndealer_card_frame = tkinter.Frame(card_frame, background=\"green\")\ndealer_card_frame.grid(row=0, column=1, sticky=\"ew\", rowspan=2)\nplayer_score_label = tkinter.IntVar()\ntkinter.Label(card_frame, text=\"Player\", background=\"green\",",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "dealer_card_frame",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "dealer_card_frame = tkinter.Frame(card_frame, background=\"green\")\ndealer_card_frame.grid(row=0, column=1, sticky=\"ew\", rowspan=2)\nplayer_score_label = tkinter.IntVar()\ntkinter.Label(card_frame, text=\"Player\", background=\"green\",\n            fg=\"white\").grid(row=2, column=0)\ntkinter.Label(card_frame, textvariable=player_score_label,\n            background=\"green\", fg=\"white\").grid(row=3, column=0)\n# Embedded frame to hold the card images\nplayer_card_frame = tkinter.Frame(card_frame, background=\"green\")\nplayer_card_frame.grid(row=2, column=1, sticky=\"ew\", rowspan=2)",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "player_score_label",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "player_score_label = tkinter.IntVar()\ntkinter.Label(card_frame, text=\"Player\", background=\"green\",\n            fg=\"white\").grid(row=2, column=0)\ntkinter.Label(card_frame, textvariable=player_score_label,\n            background=\"green\", fg=\"white\").grid(row=3, column=0)\n# Embedded frame to hold the card images\nplayer_card_frame = tkinter.Frame(card_frame, background=\"green\")\nplayer_card_frame.grid(row=2, column=1, sticky=\"ew\", rowspan=2)\nbutton_frame = tkinter.Frame(mainWindow)\nbutton_frame.grid(row=3, column=0, columnspan=3, sticky=\"w\")",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "player_card_frame",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "player_card_frame = tkinter.Frame(card_frame, background=\"green\")\nplayer_card_frame.grid(row=2, column=1, sticky=\"ew\", rowspan=2)\nbutton_frame = tkinter.Frame(mainWindow)\nbutton_frame.grid(row=3, column=0, columnspan=3, sticky=\"w\")\ndealer_button = tkinter.Button(\n    button_frame, text=\"Dealer\", command=deal_dealer)\ndealer_button.grid(row=0, column=0)\nplayer_button = tkinter.Button(\n    button_frame, text=\"Player\", command=deal_player)\nplayer_button.grid(row=0, column=1)",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "button_frame",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "button_frame = tkinter.Frame(mainWindow)\nbutton_frame.grid(row=3, column=0, columnspan=3, sticky=\"w\")\ndealer_button = tkinter.Button(\n    button_frame, text=\"Dealer\", command=deal_dealer)\ndealer_button.grid(row=0, column=0)\nplayer_button = tkinter.Button(\n    button_frame, text=\"Player\", command=deal_player)\nplayer_button.grid(row=0, column=1)\nnew_deal_button = tkinter.Button(\n    button_frame, text=\"New Deal\", command=new_deal)",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "dealer_button",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "dealer_button = tkinter.Button(\n    button_frame, text=\"Dealer\", command=deal_dealer)\ndealer_button.grid(row=0, column=0)\nplayer_button = tkinter.Button(\n    button_frame, text=\"Player\", command=deal_player)\nplayer_button.grid(row=0, column=1)\nnew_deal_button = tkinter.Button(\n    button_frame, text=\"New Deal\", command=new_deal)\nnew_deal_button.grid(row=0, column=2)\nshuffle_button = tkinter.Button(button_frame, text=\"Shuffle\", command=shuffle)",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "player_button",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "player_button = tkinter.Button(\n    button_frame, text=\"Player\", command=deal_player)\nplayer_button.grid(row=0, column=1)\nnew_deal_button = tkinter.Button(\n    button_frame, text=\"New Deal\", command=new_deal)\nnew_deal_button.grid(row=0, column=2)\nshuffle_button = tkinter.Button(button_frame, text=\"Shuffle\", command=shuffle)\nshuffle_button.grid(row=0, column=3)\n# Load cards\ncards = []",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "new_deal_button",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "new_deal_button = tkinter.Button(\n    button_frame, text=\"New Deal\", command=new_deal)\nnew_deal_button.grid(row=0, column=2)\nshuffle_button = tkinter.Button(button_frame, text=\"Shuffle\", command=shuffle)\nshuffle_button.grid(row=0, column=3)\n# Load cards\ncards = []\nload_images(cards)\nprint(cards)\n# Create a new deck of cards and shuffle them.",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "shuffle_button",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "shuffle_button = tkinter.Button(button_frame, text=\"Shuffle\", command=shuffle)\nshuffle_button.grid(row=0, column=3)\n# Load cards\ncards = []\nload_images(cards)\nprint(cards)\n# Create a new deck of cards and shuffle them.\ndeck = list(cards) + list(cards) + list(cards)\nshuffle()\n# Create the list to store the dealer's and player's hands",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "cards",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "cards = []\nload_images(cards)\nprint(cards)\n# Create a new deck of cards and shuffle them.\ndeck = list(cards) + list(cards) + list(cards)\nshuffle()\n# Create the list to store the dealer's and player's hands\ndealer_hand = []\nplayer_hand = []\n# deal_player()",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "deck",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "deck = list(cards) + list(cards) + list(cards)\nshuffle()\n# Create the list to store the dealer's and player's hands\ndealer_hand = []\nplayer_hand = []\n# deal_player()\n# dealer_hand.append(_deal_card(dealer_card_frame))\n# dealer_score_label.set(score_hand(dealer_hand))\n# deal_player()\nif __name__ == \"__main__\":",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "dealer_hand",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "dealer_hand = []\nplayer_hand = []\n# deal_player()\n# dealer_hand.append(_deal_card(dealer_card_frame))\n# dealer_score_label.set(score_hand(dealer_hand))\n# deal_player()\nif __name__ == \"__main__\":\n    play()",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "player_hand",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "player_hand = []\n# deal_player()\n# dealer_hand.append(_deal_card(dealer_card_frame))\n# dealer_score_label.set(score_hand(dealer_hand))\n# deal_player()\nif __name__ == \"__main__\":\n    play()",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.get_ints",
        "description": "UdemyClasses.Blackjack.get_ints",
        "peekOfCode": "x = int(input(\"Enter a number \"))",
        "detail": "UdemyClasses.Blackjack.get_ints",
        "documentation": {}
    },
    {
        "label": "personal_details",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.import_test",
        "description": "UdemyClasses.Blackjack.import_test",
        "peekOfCode": "personal_details = (\"Grevy\", 49, \"Florida\")\nname, _, country = personal_details\nprint(name, country)\nprint(_)",
        "detail": "UdemyClasses.Blackjack.import_test",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "UdemyClasses.createDB.contacts2",
        "description": "UdemyClasses.createDB.contacts2",
        "peekOfCode": "db = sqlite3.connect(\"contacts.sqlite\")\nnew_email = \"newemail@update.com\"\nphone = input(\"Please enter a phone number \")\n# update_sql = \"UPDATE contacts SET email = '{}' WHERE phone = {}\".format(new_email, phone)  # noqa\nupdate_sql = \"UPDATE contacts SET email = ? WHERE phone = ?\"  # noqa\n# print(update_sql)\nupdate_cursor = db.cursor()\nupdate_cursor.execute(update_sql, (new_email, phone))\nprint(\"{} rows updated\".format(update_cursor.rowcount))\nprint()",
        "detail": "UdemyClasses.createDB.contacts2",
        "documentation": {}
    },
    {
        "label": "new_email",
        "kind": 5,
        "importPath": "UdemyClasses.createDB.contacts2",
        "description": "UdemyClasses.createDB.contacts2",
        "peekOfCode": "new_email = \"newemail@update.com\"\nphone = input(\"Please enter a phone number \")\n# update_sql = \"UPDATE contacts SET email = '{}' WHERE phone = {}\".format(new_email, phone)  # noqa\nupdate_sql = \"UPDATE contacts SET email = ? WHERE phone = ?\"  # noqa\n# print(update_sql)\nupdate_cursor = db.cursor()\nupdate_cursor.execute(update_sql, (new_email, phone))\nprint(\"{} rows updated\".format(update_cursor.rowcount))\nprint()\nprint(\"Are connections the same: {}\".format(update_cursor.connection == db))",
        "detail": "UdemyClasses.createDB.contacts2",
        "documentation": {}
    },
    {
        "label": "phone",
        "kind": 5,
        "importPath": "UdemyClasses.createDB.contacts2",
        "description": "UdemyClasses.createDB.contacts2",
        "peekOfCode": "phone = input(\"Please enter a phone number \")\n# update_sql = \"UPDATE contacts SET email = '{}' WHERE phone = {}\".format(new_email, phone)  # noqa\nupdate_sql = \"UPDATE contacts SET email = ? WHERE phone = ?\"  # noqa\n# print(update_sql)\nupdate_cursor = db.cursor()\nupdate_cursor.execute(update_sql, (new_email, phone))\nprint(\"{} rows updated\".format(update_cursor.rowcount))\nprint()\nprint(\"Are connections the same: {}\".format(update_cursor.connection == db))\nprint()",
        "detail": "UdemyClasses.createDB.contacts2",
        "documentation": {}
    },
    {
        "label": "update_sql",
        "kind": 5,
        "importPath": "UdemyClasses.createDB.contacts2",
        "description": "UdemyClasses.createDB.contacts2",
        "peekOfCode": "update_sql = \"UPDATE contacts SET email = ? WHERE phone = ?\"  # noqa\n# print(update_sql)\nupdate_cursor = db.cursor()\nupdate_cursor.execute(update_sql, (new_email, phone))\nprint(\"{} rows updated\".format(update_cursor.rowcount))\nprint()\nprint(\"Are connections the same: {}\".format(update_cursor.connection == db))\nprint()\nupdate_cursor.connection.commit()\n# this is the same as db.commit() # calling dot commit on the wrong connection could cause bugs. # noqa",
        "detail": "UdemyClasses.createDB.contacts2",
        "documentation": {}
    },
    {
        "label": "update_cursor",
        "kind": 5,
        "importPath": "UdemyClasses.createDB.contacts2",
        "description": "UdemyClasses.createDB.contacts2",
        "peekOfCode": "update_cursor = db.cursor()\nupdate_cursor.execute(update_sql, (new_email, phone))\nprint(\"{} rows updated\".format(update_cursor.rowcount))\nprint()\nprint(\"Are connections the same: {}\".format(update_cursor.connection == db))\nprint()\nupdate_cursor.connection.commit()\n# this is the same as db.commit() # calling dot commit on the wrong connection could cause bugs. # noqa\nupdate_cursor.close()\nfor name, phone, email in db.execute(\"SELECT * FROM contacts\"):",
        "detail": "UdemyClasses.createDB.contacts2",
        "documentation": {}
    },
    {
        "label": "getint",
        "kind": 2,
        "importPath": "UdemyClasses.createDB.get_ints",
        "description": "UdemyClasses.createDB.get_ints",
        "peekOfCode": "def getint(prompt):\n    while True:\n        try:\n            number = int(input(prompt))\n            return number\n        except ValueError:\n            print(\"Invalid number entered, please try again\")\n        except EOFError:\n            sys.exit(0)\n        except KeyboardInterrupt:",
        "detail": "UdemyClasses.createDB.get_ints",
        "documentation": {}
    },
    {
        "label": "first_number",
        "kind": 5,
        "importPath": "UdemyClasses.createDB.get_ints",
        "description": "UdemyClasses.createDB.get_ints",
        "peekOfCode": "first_number = getint(\"Please enter first number \")\nsecond_number = getint(\"Please enter second number \")\ntry:\n    print(\"{} divided by {} is {:.2f}\".format(first_number, second_number, first_number / second_number))   # noqa\nexcept ZeroDivisionError:\n    print(\"You can't divide by zero\")\n    sys.exit(2)\nelse:\n    print(\"Division performed successfully\")",
        "detail": "UdemyClasses.createDB.get_ints",
        "documentation": {}
    },
    {
        "label": "second_number",
        "kind": 5,
        "importPath": "UdemyClasses.createDB.get_ints",
        "description": "UdemyClasses.createDB.get_ints",
        "peekOfCode": "second_number = getint(\"Please enter second number \")\ntry:\n    print(\"{} divided by {} is {:.2f}\".format(first_number, second_number, first_number / second_number))   # noqa\nexcept ZeroDivisionError:\n    print(\"You can't divide by zero\")\n    sys.exit(2)\nelse:\n    print(\"Division performed successfully\")",
        "detail": "UdemyClasses.createDB.get_ints",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "UdemyClasses.createDB-LivingRoom-Computer.checkdb",
        "description": "UdemyClasses.createDB-LivingRoom-Computer.checkdb",
        "peekOfCode": "conn = sqlite3.connect(\"contacts.sqlite\")\nname = input(\"Please enter a name to search for \")\nfor row in conn.execute(\"SELECT * FROM contacts WHERE name LIKE ?\", (name,)):\n# the name at the end in parathesis has comma with it to make it a tuple. \n# If you do not use a comma you will get a ProgrammingError:\n# Incorrect number of bindings supplied. The current statement uses 1, and there are 5 supplied. #noqa\n# Also in that line you can use LIKE so that the query does not have to be case sensative. #noqa\n    print(row)  \nconn.close()",
        "detail": "UdemyClasses.createDB-LivingRoom-Computer.checkdb",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "UdemyClasses.createDB-LivingRoom-Computer.checkdb",
        "description": "UdemyClasses.createDB-LivingRoom-Computer.checkdb",
        "peekOfCode": "name = input(\"Please enter a name to search for \")\nfor row in conn.execute(\"SELECT * FROM contacts WHERE name LIKE ?\", (name,)):\n# the name at the end in parathesis has comma with it to make it a tuple. \n# If you do not use a comma you will get a ProgrammingError:\n# Incorrect number of bindings supplied. The current statement uses 1, and there are 5 supplied. #noqa\n# Also in that line you can use LIKE so that the query does not have to be case sensative. #noqa\n    print(row)  \nconn.close()",
        "detail": "UdemyClasses.createDB-LivingRoom-Computer.checkdb",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "UdemyClasses.createDB-LivingRoom-Computer.contacts",
        "description": "UdemyClasses.createDB-LivingRoom-Computer.contacts",
        "peekOfCode": "db = sqlite3.connect(\"contacts.sqlite\")\ndb.execute(\"CREATE TABLE IF NOT EXISTS contacts (name TEXT, phone INTEGER, email TEXT)\")\ndb.execute(\"INSERT INTO contacts(name, phone, email) VALUES('Grevy', 7542134200, 'grevyjr@gmail.com')\")  # noqa: E501\ndb.execute(\"INSERT INTO contacts VALUES('Mia', 7542314300, 'mia@gmail.com')\")\ncursor = db.cursor()\ncursor.execute(\"SELECT * FROM contacts\")\n# print (cursor.fetchall())\nprint(cursor.fetchone())\nprint(cursor.fetchone())\nprint(cursor.fetchone())",
        "detail": "UdemyClasses.createDB-LivingRoom-Computer.contacts",
        "documentation": {}
    },
    {
        "label": "cursor",
        "kind": 5,
        "importPath": "UdemyClasses.createDB-LivingRoom-Computer.contacts",
        "description": "UdemyClasses.createDB-LivingRoom-Computer.contacts",
        "peekOfCode": "cursor = db.cursor()\ncursor.execute(\"SELECT * FROM contacts\")\n# print (cursor.fetchall())\nprint(cursor.fetchone())\nprint(cursor.fetchone())\nprint(cursor.fetchone())\nfor name, phone, email in cursor:\n    print(name)\n    print(phone)\n    print(email)",
        "detail": "UdemyClasses.createDB-LivingRoom-Computer.contacts",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "UdemyClasses.createDB-LivingRoom-Computer.contacts2",
        "description": "UdemyClasses.createDB-LivingRoom-Computer.contacts2",
        "peekOfCode": "db = sqlite3.connect(\"contacts.sqlite\")\nnew_email = \"newupdate@update.com\"\nphone = input(\"Please enter a phone number \")\nupdate_sql = \"UPDATE contacts SET email = ? WHERE phone = ?\"\nprint(update_sql)\nupdate_cursor = db.cursor()\nupdate_cursor.execute(update_sql, (new_email, phone))\nprint(\"{} rows updated\".format(update_cursor.rowcount))\nprint()\nprint(\"Are connections the same: {}\".format(update_cursor.connection == db))",
        "detail": "UdemyClasses.createDB-LivingRoom-Computer.contacts2",
        "documentation": {}
    },
    {
        "label": "new_email",
        "kind": 5,
        "importPath": "UdemyClasses.createDB-LivingRoom-Computer.contacts2",
        "description": "UdemyClasses.createDB-LivingRoom-Computer.contacts2",
        "peekOfCode": "new_email = \"newupdate@update.com\"\nphone = input(\"Please enter a phone number \")\nupdate_sql = \"UPDATE contacts SET email = ? WHERE phone = ?\"\nprint(update_sql)\nupdate_cursor = db.cursor()\nupdate_cursor.execute(update_sql, (new_email, phone))\nprint(\"{} rows updated\".format(update_cursor.rowcount))\nprint()\nprint(\"Are connections the same: {}\".format(update_cursor.connection == db))\nprint()",
        "detail": "UdemyClasses.createDB-LivingRoom-Computer.contacts2",
        "documentation": {}
    },
    {
        "label": "phone",
        "kind": 5,
        "importPath": "UdemyClasses.createDB-LivingRoom-Computer.contacts2",
        "description": "UdemyClasses.createDB-LivingRoom-Computer.contacts2",
        "peekOfCode": "phone = input(\"Please enter a phone number \")\nupdate_sql = \"UPDATE contacts SET email = ? WHERE phone = ?\"\nprint(update_sql)\nupdate_cursor = db.cursor()\nupdate_cursor.execute(update_sql, (new_email, phone))\nprint(\"{} rows updated\".format(update_cursor.rowcount))\nprint()\nprint(\"Are connections the same: {}\".format(update_cursor.connection == db))\nprint()\nupdate_cursor.connection.commit()",
        "detail": "UdemyClasses.createDB-LivingRoom-Computer.contacts2",
        "documentation": {}
    },
    {
        "label": "update_sql",
        "kind": 5,
        "importPath": "UdemyClasses.createDB-LivingRoom-Computer.contacts2",
        "description": "UdemyClasses.createDB-LivingRoom-Computer.contacts2",
        "peekOfCode": "update_sql = \"UPDATE contacts SET email = ? WHERE phone = ?\"\nprint(update_sql)\nupdate_cursor = db.cursor()\nupdate_cursor.execute(update_sql, (new_email, phone))\nprint(\"{} rows updated\".format(update_cursor.rowcount))\nprint()\nprint(\"Are connections the same: {}\".format(update_cursor.connection == db))\nprint()\nupdate_cursor.connection.commit()\n# this is the same as db.commit() # calling dot commit on the wrong connection could cause bugs. # noqa",
        "detail": "UdemyClasses.createDB-LivingRoom-Computer.contacts2",
        "documentation": {}
    },
    {
        "label": "update_cursor",
        "kind": 5,
        "importPath": "UdemyClasses.createDB-LivingRoom-Computer.contacts2",
        "description": "UdemyClasses.createDB-LivingRoom-Computer.contacts2",
        "peekOfCode": "update_cursor = db.cursor()\nupdate_cursor.execute(update_sql, (new_email, phone))\nprint(\"{} rows updated\".format(update_cursor.rowcount))\nprint()\nprint(\"Are connections the same: {}\".format(update_cursor.connection == db))\nprint()\nupdate_cursor.connection.commit()\n# this is the same as db.commit() # calling dot commit on the wrong connection could cause bugs. # noqa\nupdate_cursor.close()\nfor name, phone, email in db.execute(\"SELECT * FROM contacts\"):",
        "detail": "UdemyClasses.createDB-LivingRoom-Computer.contacts2",
        "documentation": {}
    },
    {
        "label": "list_directories",
        "kind": 2,
        "importPath": "UdemyClasses.ScopeAndNamespace.filesanddirectories",
        "description": "UdemyClasses.ScopeAndNamespace.filesanddirectories",
        "peekOfCode": "def list_directories(s):\n    def dir_list(d):\n        nonlocal tab_stop\n        files = os.listdir(d)\n        for f in files:\n            current_dir = os.path.join(d, f)\n            if os.path.isdir(current_dir):\n                print(\"\\t\" * tab_stop + \"Directory \" + f)\n                tab_stop += 1\n                dir_list(current_dir)",
        "detail": "UdemyClasses.ScopeAndNamespace.filesanddirectories",
        "documentation": {}
    },
    {
        "label": "fact",
        "kind": 2,
        "importPath": "UdemyClasses.ScopeAndNamespace.scope",
        "description": "UdemyClasses.ScopeAndNamespace.scope",
        "peekOfCode": "def fact(n):\n    \"\"\" calucate n! iteratively \"\"\"\n    result = 1\n    if n > 1:\n        for f in range(2, n + 1):\n            result *= f\n    return result\ndef factorial(n):\n    # n! can also be defined as n * (n+1)!\n    \"\"\" calculates n! recursively \"\"\"",
        "detail": "UdemyClasses.ScopeAndNamespace.scope",
        "documentation": {}
    },
    {
        "label": "factorial",
        "kind": 2,
        "importPath": "UdemyClasses.ScopeAndNamespace.scope",
        "description": "UdemyClasses.ScopeAndNamespace.scope",
        "peekOfCode": "def factorial(n):\n    # n! can also be defined as n * (n+1)!\n    \"\"\" calculates n! recursively \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        return n * factorial(n-1)\ndef fib(n):\n    \"\"\" F(n) = F(n -1) + F(n -2) \"\"\"\n    if n < 2:",
        "detail": "UdemyClasses.ScopeAndNamespace.scope",
        "documentation": {}
    },
    {
        "label": "fib",
        "kind": 2,
        "importPath": "UdemyClasses.ScopeAndNamespace.scope",
        "description": "UdemyClasses.ScopeAndNamespace.scope",
        "peekOfCode": "def fib(n):\n    \"\"\" F(n) = F(n -1) + F(n -2) \"\"\"\n    if n < 2:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\ndef fibonacci(n):\n    if n == 0:\n        result = 0\n    elif  n == 1:",
        "detail": "UdemyClasses.ScopeAndNamespace.scope",
        "documentation": {}
    },
    {
        "label": "fibonacci",
        "kind": 2,
        "importPath": "UdemyClasses.ScopeAndNamespace.scope",
        "description": "UdemyClasses.ScopeAndNamespace.scope",
        "peekOfCode": "def fibonacci(n):\n    if n == 0:\n        result = 0\n    elif  n == 1:\n        result = 1\n    else:\n        n_minus1 = 1\n        n_minus2 = 0\n        for f in range(1, n):\n            result = n_minus2 + n_minus1",
        "detail": "UdemyClasses.ScopeAndNamespace.scope",
        "documentation": {}
    },
    {
        "label": "spam1",
        "kind": 2,
        "importPath": "UdemyClasses.ScopeAndNamespace.spam",
        "description": "UdemyClasses.ScopeAndNamespace.spam",
        "peekOfCode": "def spam1():\n    def spam2():\n        def spam3():\n            z = \" even\"\n            z += y\n            print(\"In spam3, locals are {}\".format(locals()))\n            return z\n        y = \" more \" + x # y must exist before spam3 is called.\n        y += spam3() # do not combine these assignments.\n        print(\"In spam2, locals are {}\".format(locals()))",
        "detail": "UdemyClasses.ScopeAndNamespace.spam",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "UdemyClasses.__pycache__.preview.PIL.checkdb",
        "description": "UdemyClasses.__pycache__.preview.PIL.checkdb",
        "peekOfCode": "conn = sqlite3.connect(\"contacts.sqlite\")\nname = input(\"Please enter a name to search for? \")\nfor row in conn.execute(\"SELECT * FROM contacts WHERE name = ?\", (name,)):\n    print(row)\n# the name at the end in parathesis has comma with it to make it a tuple.\n# If you do not use a comma you will get a ProgrammingError:\n# Incorrect number of bindings supplied. The current statement uses 1, and there are 5 supplied.  # noqa\n# Also in that line you can use LIKE so that the query does not have to be case sensative.  # noqa\nconn.close()",
        "detail": "UdemyClasses.__pycache__.preview.PIL.checkdb",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "UdemyClasses.__pycache__.preview.PIL.checkdb",
        "description": "UdemyClasses.__pycache__.preview.PIL.checkdb",
        "peekOfCode": "name = input(\"Please enter a name to search for? \")\nfor row in conn.execute(\"SELECT * FROM contacts WHERE name = ?\", (name,)):\n    print(row)\n# the name at the end in parathesis has comma with it to make it a tuple.\n# If you do not use a comma you will get a ProgrammingError:\n# Incorrect number of bindings supplied. The current statement uses 1, and there are 5 supplied.  # noqa\n# Also in that line you can use LIKE so that the query does not have to be case sensative.  # noqa\nconn.close()",
        "detail": "UdemyClasses.__pycache__.preview.PIL.checkdb",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "UdemyClasses.__pycache__.preview.PIL.contacts",
        "description": "UdemyClasses.__pycache__.preview.PIL.contacts",
        "peekOfCode": "db = sqlite3.connect(\"contacts.sqlite\")\ndb.execute(\"CREATE TABLE IF NOT EXISTS contacts (name TEXT, phone INTEGER, email TEXT)\")  # noqa\ndb.execute(\"INSERT INTO contacts(name, phone, email) VALUES('Grevy', 7542134200, 'grevyjr@gmail.com')\")  # noqa\ndb.execute(\"INSERT INTO contacts VALUES('MIA', 7542134300, 'mia@gmail.com')\")\ncursor = db.cursor()\ncursor.execute(\"SELECT * FROM contacts\")\n# print(cursor.fetchall())\nprint(cursor.fetchone())\nprint(cursor.fetchone())\nprint(cursor.fetchone())",
        "detail": "UdemyClasses.__pycache__.preview.PIL.contacts",
        "documentation": {}
    },
    {
        "label": "cursor",
        "kind": 5,
        "importPath": "UdemyClasses.__pycache__.preview.PIL.contacts",
        "description": "UdemyClasses.__pycache__.preview.PIL.contacts",
        "peekOfCode": "cursor = db.cursor()\ncursor.execute(\"SELECT * FROM contacts\")\n# print(cursor.fetchall())\nprint(cursor.fetchone())\nprint(cursor.fetchone())\nprint(cursor.fetchone())\nfor name, phone, email in cursor:\n    print(name)\n    print(phone)\n    print(email)",
        "detail": "UdemyClasses.__pycache__.preview.PIL.contacts",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "UdemyClasses.checkdb",
        "description": "UdemyClasses.checkdb",
        "peekOfCode": "db = sqlite3.connect(\"accounts.sqlite\", detect_types=sqlite3.PARSE_DECLTYPES)\n# for row in db.execute(\"SELECT strftime('%Y-%m-%d %H:%M:%f', history.time,'localtime') AS localtime,\"\n#                       \" history.account, history.amount FROM history ORDER BY history.time\"):\nfor row in db.execute(\"SELECT * FROM localhistory\"):\n    print(row)\ndb.close()\n# conn.close()",
        "detail": "UdemyClasses.checkdb",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "UdemyClasses.contacts",
        "description": "UdemyClasses.contacts",
        "peekOfCode": "db = sqlite3.connect(\"contacts.sqlite\")\ndb.execute(\"CREATE TABLE IF NOT EXISTS contacts (name TEXT, phone INTEGER, email TEXT)\")  # noqa\ndb.execute(\"INSERT INTO contacts(name, phone, email) VALUES('Grevy', 7542134200, 'grevyjr@gmail.com')\")  # noqa\ndb.execute(\"INSERT INTO contacts VALUES('MIA', 7542134300, 'mia@gmail.com')\")\ncursor = db.cursor()\ncursor.execute(\"SELECT * FROM contacts\")\n# print(cursor.fetchall())\nprint(cursor.fetchone())\nprint(cursor.fetchone())\nprint(cursor.fetchone())",
        "detail": "UdemyClasses.contacts",
        "documentation": {}
    },
    {
        "label": "cursor",
        "kind": 5,
        "importPath": "UdemyClasses.contacts",
        "description": "UdemyClasses.contacts",
        "peekOfCode": "cursor = db.cursor()\ncursor.execute(\"SELECT * FROM contacts\")\n# print(cursor.fetchall())\nprint(cursor.fetchone())\nprint(cursor.fetchone())\nprint(cursor.fetchone())\nfor name, phone, email in cursor:\n    print(name)\n    print(phone)\n    print(email)",
        "detail": "UdemyClasses.contacts",
        "documentation": {}
    },
    {
        "label": "divide_two_numbers",
        "kind": 2,
        "importPath": "UdemyClasses.DivideTwoNumber",
        "description": "UdemyClasses.DivideTwoNumber",
        "peekOfCode": "def divide_two_numbers(prompt):\n    while True:\n        try:\n            number = int(input(prompt))\n            return number\n        except ValueError:\n            print(\"Invalid number entered, please try again\")\nprint(\"Pick two numbers to divide: \")\nfirst_number = divide_two_numbers('First Number ')\nsecond_number = divide_two_numbers('Second Number ')",
        "detail": "UdemyClasses.DivideTwoNumber",
        "documentation": {}
    },
    {
        "label": "first_number",
        "kind": 5,
        "importPath": "UdemyClasses.DivideTwoNumber",
        "description": "UdemyClasses.DivideTwoNumber",
        "peekOfCode": "first_number = divide_two_numbers('First Number ')\nsecond_number = divide_two_numbers('Second Number ')\ntry:\n    print(\"{} divided by {} is {}\".format(first_number, second_number, first_number / second_number))  # noqa\nexcept ZeroDivisionError:\n    print(\"You can't divide by zero\")",
        "detail": "UdemyClasses.DivideTwoNumber",
        "documentation": {}
    },
    {
        "label": "second_number",
        "kind": 5,
        "importPath": "UdemyClasses.DivideTwoNumber",
        "description": "UdemyClasses.DivideTwoNumber",
        "peekOfCode": "second_number = divide_two_numbers('Second Number ')\ntry:\n    print(\"{} divided by {} is {}\".format(first_number, second_number, first_number / second_number))  # noqa\nexcept ZeroDivisionError:\n    print(\"You can't divide by zero\")",
        "detail": "UdemyClasses.DivideTwoNumber",
        "documentation": {}
    },
    {
        "label": "button_click",
        "kind": 2,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "def button_click(number):\n    # e.delete(0, END)\n    current = e.get()\n    e.delete(0, Tk.END)\n    e.insert(0, str(current) + str(number))\ndef button_clear():\n    e.delete(0, END)\ndef button_add():\n    first_number = e.get()\n    global f_num",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_clear",
        "kind": 2,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "def button_clear():\n    e.delete(0, END)\ndef button_add():\n    first_number = e.get()\n    global f_num\n    f_num = int(first_number)\n    e.delete(0, END)\ndef button_equal():\n    second_number = e.get()\n    e.delete(0, END)",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_add",
        "kind": 2,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "def button_add():\n    first_number = e.get()\n    global f_num\n    f_num = int(first_number)\n    e.delete(0, END)\ndef button_equal():\n    second_number = e.get()\n    e.delete(0, END)\n    e.insert(0, f_num + int(second_number))\ndef button_subtract():",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_equal",
        "kind": 2,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "def button_equal():\n    second_number = e.get()\n    e.delete(0, END)\n    e.insert(0, f_num + int(second_number))\ndef button_subtract():\n    return\ndef button_multiply():\n    return\ndef button_divide():\n    return",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_subtract",
        "kind": 2,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "def button_subtract():\n    return\ndef button_multiply():\n    return\ndef button_divide():\n    return\n# Define buttons\nbutton_1 = Button(root, text=\"1\", padx=40, pady=20, command=lambda: button_click(1))\nbutton_2 = Button(root, text=\"2\", padx=40, pady=20, command=lambda: button_click(2))\nbutton_3 = Button(root, text=\"3\", padx=40, pady=20, command=lambda: button_click(3))",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_multiply",
        "kind": 2,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "def button_multiply():\n    return\ndef button_divide():\n    return\n# Define buttons\nbutton_1 = Button(root, text=\"1\", padx=40, pady=20, command=lambda: button_click(1))\nbutton_2 = Button(root, text=\"2\", padx=40, pady=20, command=lambda: button_click(2))\nbutton_3 = Button(root, text=\"3\", padx=40, pady=20, command=lambda: button_click(3))\nbutton_4 = Button(root, text=\"4\", padx=40, pady=20, command=lambda: button_click(4))\nbutton_5 = Button(root, text=\"5\", padx=40, pady=20, command=lambda: button_click(5))",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_divide",
        "kind": 2,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "def button_divide():\n    return\n# Define buttons\nbutton_1 = Button(root, text=\"1\", padx=40, pady=20, command=lambda: button_click(1))\nbutton_2 = Button(root, text=\"2\", padx=40, pady=20, command=lambda: button_click(2))\nbutton_3 = Button(root, text=\"3\", padx=40, pady=20, command=lambda: button_click(3))\nbutton_4 = Button(root, text=\"4\", padx=40, pady=20, command=lambda: button_click(4))\nbutton_5 = Button(root, text=\"5\", padx=40, pady=20, command=lambda: button_click(5))\nbutton_6 = Button(root, text=\"6\", padx=40, pady=20, command=lambda: button_click(6))\nbutton_7 = Button(root, text=\"7\", padx=40, pady=20, command=lambda: button_click(7))",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "root = Tk()\nroot.title(\"Grevy's Calculator\")\ne = Entry(root, width=35, borderwidth=5)\ne.grid(row=0, column=0, columnspan=3, padx=10, pady=10)\n# e.insert(0, \"\")\ndef button_click(number):\n    # e.delete(0, END)\n    current = e.get()\n    e.delete(0, Tk.END)\n    e.insert(0, str(current) + str(number))",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "e = Entry(root, width=35, borderwidth=5)\ne.grid(row=0, column=0, columnspan=3, padx=10, pady=10)\n# e.insert(0, \"\")\ndef button_click(number):\n    # e.delete(0, END)\n    current = e.get()\n    e.delete(0, Tk.END)\n    e.insert(0, str(current) + str(number))\ndef button_clear():\n    e.delete(0, END)",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_1",
        "kind": 5,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "button_1 = Button(root, text=\"1\", padx=40, pady=20, command=lambda: button_click(1))\nbutton_2 = Button(root, text=\"2\", padx=40, pady=20, command=lambda: button_click(2))\nbutton_3 = Button(root, text=\"3\", padx=40, pady=20, command=lambda: button_click(3))\nbutton_4 = Button(root, text=\"4\", padx=40, pady=20, command=lambda: button_click(4))\nbutton_5 = Button(root, text=\"5\", padx=40, pady=20, command=lambda: button_click(5))\nbutton_6 = Button(root, text=\"6\", padx=40, pady=20, command=lambda: button_click(6))\nbutton_7 = Button(root, text=\"7\", padx=40, pady=20, command=lambda: button_click(7))\nbutton_8 = Button(root, text=\"8\", padx=40, pady=20, command=lambda: button_click(8))\nbutton_9 = Button(root, text=\"9\", padx=40, pady=20, command=lambda: button_click(9))\nbutton_0 = Button(root, text=\"0\", padx=40, pady=20, command=lambda: button_click(0))",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_2",
        "kind": 5,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "button_2 = Button(root, text=\"2\", padx=40, pady=20, command=lambda: button_click(2))\nbutton_3 = Button(root, text=\"3\", padx=40, pady=20, command=lambda: button_click(3))\nbutton_4 = Button(root, text=\"4\", padx=40, pady=20, command=lambda: button_click(4))\nbutton_5 = Button(root, text=\"5\", padx=40, pady=20, command=lambda: button_click(5))\nbutton_6 = Button(root, text=\"6\", padx=40, pady=20, command=lambda: button_click(6))\nbutton_7 = Button(root, text=\"7\", padx=40, pady=20, command=lambda: button_click(7))\nbutton_8 = Button(root, text=\"8\", padx=40, pady=20, command=lambda: button_click(8))\nbutton_9 = Button(root, text=\"9\", padx=40, pady=20, command=lambda: button_click(9))\nbutton_0 = Button(root, text=\"0\", padx=40, pady=20, command=lambda: button_click(0))\nbutton_add = Button(root, text=\"+\", padx=39, pady=20, command=button_add)",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_3",
        "kind": 5,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "button_3 = Button(root, text=\"3\", padx=40, pady=20, command=lambda: button_click(3))\nbutton_4 = Button(root, text=\"4\", padx=40, pady=20, command=lambda: button_click(4))\nbutton_5 = Button(root, text=\"5\", padx=40, pady=20, command=lambda: button_click(5))\nbutton_6 = Button(root, text=\"6\", padx=40, pady=20, command=lambda: button_click(6))\nbutton_7 = Button(root, text=\"7\", padx=40, pady=20, command=lambda: button_click(7))\nbutton_8 = Button(root, text=\"8\", padx=40, pady=20, command=lambda: button_click(8))\nbutton_9 = Button(root, text=\"9\", padx=40, pady=20, command=lambda: button_click(9))\nbutton_0 = Button(root, text=\"0\", padx=40, pady=20, command=lambda: button_click(0))\nbutton_add = Button(root, text=\"+\", padx=39, pady=20, command=button_add)\nbutton_equal = Button(root, text=\"=\", padx=91, pady=20, command=button_equal)",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_4",
        "kind": 5,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "button_4 = Button(root, text=\"4\", padx=40, pady=20, command=lambda: button_click(4))\nbutton_5 = Button(root, text=\"5\", padx=40, pady=20, command=lambda: button_click(5))\nbutton_6 = Button(root, text=\"6\", padx=40, pady=20, command=lambda: button_click(6))\nbutton_7 = Button(root, text=\"7\", padx=40, pady=20, command=lambda: button_click(7))\nbutton_8 = Button(root, text=\"8\", padx=40, pady=20, command=lambda: button_click(8))\nbutton_9 = Button(root, text=\"9\", padx=40, pady=20, command=lambda: button_click(9))\nbutton_0 = Button(root, text=\"0\", padx=40, pady=20, command=lambda: button_click(0))\nbutton_add = Button(root, text=\"+\", padx=39, pady=20, command=button_add)\nbutton_equal = Button(root, text=\"=\", padx=91, pady=20, command=button_equal)\nbutton_clear = Button(root, text=\"Clear\", padx=79, pady=20, command=button_clear)",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_5",
        "kind": 5,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "button_5 = Button(root, text=\"5\", padx=40, pady=20, command=lambda: button_click(5))\nbutton_6 = Button(root, text=\"6\", padx=40, pady=20, command=lambda: button_click(6))\nbutton_7 = Button(root, text=\"7\", padx=40, pady=20, command=lambda: button_click(7))\nbutton_8 = Button(root, text=\"8\", padx=40, pady=20, command=lambda: button_click(8))\nbutton_9 = Button(root, text=\"9\", padx=40, pady=20, command=lambda: button_click(9))\nbutton_0 = Button(root, text=\"0\", padx=40, pady=20, command=lambda: button_click(0))\nbutton_add = Button(root, text=\"+\", padx=39, pady=20, command=button_add)\nbutton_equal = Button(root, text=\"=\", padx=91, pady=20, command=button_equal)\nbutton_clear = Button(root, text=\"Clear\", padx=79, pady=20, command=button_clear)\nbutton_subtract = Button(root, text=\"-\", padx=39, pady=20, command=button_subtract)",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_6",
        "kind": 5,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "button_6 = Button(root, text=\"6\", padx=40, pady=20, command=lambda: button_click(6))\nbutton_7 = Button(root, text=\"7\", padx=40, pady=20, command=lambda: button_click(7))\nbutton_8 = Button(root, text=\"8\", padx=40, pady=20, command=lambda: button_click(8))\nbutton_9 = Button(root, text=\"9\", padx=40, pady=20, command=lambda: button_click(9))\nbutton_0 = Button(root, text=\"0\", padx=40, pady=20, command=lambda: button_click(0))\nbutton_add = Button(root, text=\"+\", padx=39, pady=20, command=button_add)\nbutton_equal = Button(root, text=\"=\", padx=91, pady=20, command=button_equal)\nbutton_clear = Button(root, text=\"Clear\", padx=79, pady=20, command=button_clear)\nbutton_subtract = Button(root, text=\"-\", padx=39, pady=20, command=button_subtract)\nbutton_multiply = Button(root, text=\"*\", padx=39, pady=20, command=button_multiply)",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_7",
        "kind": 5,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "button_7 = Button(root, text=\"7\", padx=40, pady=20, command=lambda: button_click(7))\nbutton_8 = Button(root, text=\"8\", padx=40, pady=20, command=lambda: button_click(8))\nbutton_9 = Button(root, text=\"9\", padx=40, pady=20, command=lambda: button_click(9))\nbutton_0 = Button(root, text=\"0\", padx=40, pady=20, command=lambda: button_click(0))\nbutton_add = Button(root, text=\"+\", padx=39, pady=20, command=button_add)\nbutton_equal = Button(root, text=\"=\", padx=91, pady=20, command=button_equal)\nbutton_clear = Button(root, text=\"Clear\", padx=79, pady=20, command=button_clear)\nbutton_subtract = Button(root, text=\"-\", padx=39, pady=20, command=button_subtract)\nbutton_multiply = Button(root, text=\"*\", padx=39, pady=20, command=button_multiply)\nbutton_divide = Button(root, text=\"/\", padx=39, pady=20, command=button_divide)",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_8",
        "kind": 5,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "button_8 = Button(root, text=\"8\", padx=40, pady=20, command=lambda: button_click(8))\nbutton_9 = Button(root, text=\"9\", padx=40, pady=20, command=lambda: button_click(9))\nbutton_0 = Button(root, text=\"0\", padx=40, pady=20, command=lambda: button_click(0))\nbutton_add = Button(root, text=\"+\", padx=39, pady=20, command=button_add)\nbutton_equal = Button(root, text=\"=\", padx=91, pady=20, command=button_equal)\nbutton_clear = Button(root, text=\"Clear\", padx=79, pady=20, command=button_clear)\nbutton_subtract = Button(root, text=\"-\", padx=39, pady=20, command=button_subtract)\nbutton_multiply = Button(root, text=\"*\", padx=39, pady=20, command=button_multiply)\nbutton_divide = Button(root, text=\"/\", padx=39, pady=20, command=button_divide)\n# Put buttons on the screen",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_9",
        "kind": 5,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "button_9 = Button(root, text=\"9\", padx=40, pady=20, command=lambda: button_click(9))\nbutton_0 = Button(root, text=\"0\", padx=40, pady=20, command=lambda: button_click(0))\nbutton_add = Button(root, text=\"+\", padx=39, pady=20, command=button_add)\nbutton_equal = Button(root, text=\"=\", padx=91, pady=20, command=button_equal)\nbutton_clear = Button(root, text=\"Clear\", padx=79, pady=20, command=button_clear)\nbutton_subtract = Button(root, text=\"-\", padx=39, pady=20, command=button_subtract)\nbutton_multiply = Button(root, text=\"*\", padx=39, pady=20, command=button_multiply)\nbutton_divide = Button(root, text=\"/\", padx=39, pady=20, command=button_divide)\n# Put buttons on the screen\nbutton_1.grid(row=3, column=0)",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_0",
        "kind": 5,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "button_0 = Button(root, text=\"0\", padx=40, pady=20, command=lambda: button_click(0))\nbutton_add = Button(root, text=\"+\", padx=39, pady=20, command=button_add)\nbutton_equal = Button(root, text=\"=\", padx=91, pady=20, command=button_equal)\nbutton_clear = Button(root, text=\"Clear\", padx=79, pady=20, command=button_clear)\nbutton_subtract = Button(root, text=\"-\", padx=39, pady=20, command=button_subtract)\nbutton_multiply = Button(root, text=\"*\", padx=39, pady=20, command=button_multiply)\nbutton_divide = Button(root, text=\"/\", padx=39, pady=20, command=button_divide)\n# Put buttons on the screen\nbutton_1.grid(row=3, column=0)\nbutton_2.grid(row=3, column=1)",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_add",
        "kind": 5,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "button_add = Button(root, text=\"+\", padx=39, pady=20, command=button_add)\nbutton_equal = Button(root, text=\"=\", padx=91, pady=20, command=button_equal)\nbutton_clear = Button(root, text=\"Clear\", padx=79, pady=20, command=button_clear)\nbutton_subtract = Button(root, text=\"-\", padx=39, pady=20, command=button_subtract)\nbutton_multiply = Button(root, text=\"*\", padx=39, pady=20, command=button_multiply)\nbutton_divide = Button(root, text=\"/\", padx=39, pady=20, command=button_divide)\n# Put buttons on the screen\nbutton_1.grid(row=3, column=0)\nbutton_2.grid(row=3, column=1)\nbutton_3.grid(row=3, column=2)",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_equal",
        "kind": 5,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "button_equal = Button(root, text=\"=\", padx=91, pady=20, command=button_equal)\nbutton_clear = Button(root, text=\"Clear\", padx=79, pady=20, command=button_clear)\nbutton_subtract = Button(root, text=\"-\", padx=39, pady=20, command=button_subtract)\nbutton_multiply = Button(root, text=\"*\", padx=39, pady=20, command=button_multiply)\nbutton_divide = Button(root, text=\"/\", padx=39, pady=20, command=button_divide)\n# Put buttons on the screen\nbutton_1.grid(row=3, column=0)\nbutton_2.grid(row=3, column=1)\nbutton_3.grid(row=3, column=2)\nbutton_4.grid(row=2, column=0)",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_clear",
        "kind": 5,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "button_clear = Button(root, text=\"Clear\", padx=79, pady=20, command=button_clear)\nbutton_subtract = Button(root, text=\"-\", padx=39, pady=20, command=button_subtract)\nbutton_multiply = Button(root, text=\"*\", padx=39, pady=20, command=button_multiply)\nbutton_divide = Button(root, text=\"/\", padx=39, pady=20, command=button_divide)\n# Put buttons on the screen\nbutton_1.grid(row=3, column=0)\nbutton_2.grid(row=3, column=1)\nbutton_3.grid(row=3, column=2)\nbutton_4.grid(row=2, column=0)\nbutton_5.grid(row=2, column=1)",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_subtract",
        "kind": 5,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "button_subtract = Button(root, text=\"-\", padx=39, pady=20, command=button_subtract)\nbutton_multiply = Button(root, text=\"*\", padx=39, pady=20, command=button_multiply)\nbutton_divide = Button(root, text=\"/\", padx=39, pady=20, command=button_divide)\n# Put buttons on the screen\nbutton_1.grid(row=3, column=0)\nbutton_2.grid(row=3, column=1)\nbutton_3.grid(row=3, column=2)\nbutton_4.grid(row=2, column=0)\nbutton_5.grid(row=2, column=1)\nbutton_6.grid(row=2, column=2)",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_multiply",
        "kind": 5,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "button_multiply = Button(root, text=\"*\", padx=39, pady=20, command=button_multiply)\nbutton_divide = Button(root, text=\"/\", padx=39, pady=20, command=button_divide)\n# Put buttons on the screen\nbutton_1.grid(row=3, column=0)\nbutton_2.grid(row=3, column=1)\nbutton_3.grid(row=3, column=2)\nbutton_4.grid(row=2, column=0)\nbutton_5.grid(row=2, column=1)\nbutton_6.grid(row=2, column=2)\nbutton_7.grid(row=1, column=0)",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_divide",
        "kind": 5,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "button_divide = Button(root, text=\"/\", padx=39, pady=20, command=button_divide)\n# Put buttons on the screen\nbutton_1.grid(row=3, column=0)\nbutton_2.grid(row=3, column=1)\nbutton_3.grid(row=3, column=2)\nbutton_4.grid(row=2, column=0)\nbutton_5.grid(row=2, column=1)\nbutton_6.grid(row=2, column=2)\nbutton_7.grid(row=1, column=0)\nbutton_8.grid(row=1, column=1)",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "splitString",
        "kind": 5,
        "importPath": "EscapeChar",
        "description": "EscapeChar",
        "peekOfCode": "splitString = \"This string has been\\nsplit over\\nseveral\\nlines\"\nprint(splitString)\ntabbedString = \"1\\t2\\t3\\t4\\t5\"\nprint(tabbedString)\nprint('The pet shop owner said \"No, no, \\'e\\'s uh,...he\\'s resting\".')\nprint(\"The pet shop owner said \\\"No, no, 'e's uh...he's resting\\\".\")\nprint(\"\"\"The pet shop owner said \"No, no, 'e's uh...he's resting\". \"\"\")\nanotherString = \"\"\"This string has been \\\nsplit over \\\nseveral \\",
        "detail": "EscapeChar",
        "documentation": {}
    },
    {
        "label": "tabbedString",
        "kind": 5,
        "importPath": "EscapeChar",
        "description": "EscapeChar",
        "peekOfCode": "tabbedString = \"1\\t2\\t3\\t4\\t5\"\nprint(tabbedString)\nprint('The pet shop owner said \"No, no, \\'e\\'s uh,...he\\'s resting\".')\nprint(\"The pet shop owner said \\\"No, no, 'e's uh...he's resting\\\".\")\nprint(\"\"\"The pet shop owner said \"No, no, 'e's uh...he's resting\". \"\"\")\nanotherString = \"\"\"This string has been \\\nsplit over \\\nseveral \\\nlines\"\"\"\nprint(anotherString)",
        "detail": "EscapeChar",
        "documentation": {}
    },
    {
        "label": "anotherString",
        "kind": 5,
        "importPath": "EscapeChar",
        "description": "EscapeChar",
        "peekOfCode": "anotherString = \"\"\"This string has been \\\nsplit over \\\nseveral \\\nlines\"\"\"\nprint(anotherString)\nprint(\"C:\\\\Users\\\\grevymarcelin\\\\notes.txt\")\nprint(r\"C:\\Users\\grevymarcelin\\notes.txt\")",
        "detail": "EscapeChar",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "moreprint",
        "description": "moreprint",
        "peekOfCode": "name = \"Grevy\"\nage = 50\nprint(name, age, \"Python\", 2020)\nprint((name, age, \"Python\", 2020))",
        "detail": "moreprint",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "moreprint",
        "description": "moreprint",
        "peekOfCode": "age = 50\nprint(name, age, \"Python\", 2020)\nprint((name, age, \"Python\", 2020))",
        "detail": "moreprint",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Operators",
        "description": "Operators",
        "peekOfCode": "a = 12\nb = 3\nprint(a+b)\nprint(a -b)\nprint(a * b)\nprint(a / b)\nprint(a // b)\nprint(a % b)\n#print()\nfor i in range(1, a // b): ",
        "detail": "Operators",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Operators",
        "description": "Operators",
        "peekOfCode": "b = 3\nprint(a+b)\nprint(a -b)\nprint(a * b)\nprint(a / b)\nprint(a // b)\nprint(a % b)\n#print()\nfor i in range(1, a // b): \n    print(i)",
        "detail": "Operators",
        "documentation": {}
    },
    {
        "label": "read_data",
        "kind": 2,
        "importPath": "Python Examples",
        "description": "Python Examples",
        "peekOfCode": "def read_data():\n   return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsample = read_data()\ndef mean(data):\n   return sum(data) / len(data)\naverage = mean(sample)\npython -i sample.py",
        "detail": "Python Examples",
        "documentation": {}
    },
    {
        "label": "mean",
        "kind": 2,
        "importPath": "Python Examples",
        "description": "Python Examples",
        "peekOfCode": "def mean(data):\n   return sum(data) / len(data)\naverage = mean(sample)\npython -i sample.py",
        "detail": "Python Examples",
        "documentation": {}
    },
    {
        "label": "sample",
        "kind": 5,
        "importPath": "Python Examples",
        "description": "Python Examples",
        "peekOfCode": "sample = read_data()\ndef mean(data):\n   return sum(data) / len(data)\naverage = mean(sample)\npython -i sample.py",
        "detail": "Python Examples",
        "documentation": {}
    },
    {
        "label": "average",
        "kind": 5,
        "importPath": "Python Examples",
        "description": "Python Examples",
        "peekOfCode": "average = mean(sample)\npython -i sample.py",
        "detail": "Python Examples",
        "documentation": {}
    },
    {
        "label": "Account",
        "kind": 6,
        "importPath": "python_property_decorates",
        "description": "python_property_decorates",
        "peekOfCode": "class Account:\n    def __init__(self, balance, name):\n        self.balance = balance\n        self.name = name\n    def credit(self, deposit):\n        self.balance = self.balance + deposit\n    def debit(self, withdrawal):\n        self.balance = self.balance - withdrawal\n    def get_balance(self):",
        "detail": "python_property_decorates",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "Repfields",
        "description": "Repfields",
        "peekOfCode": "age = 48\n#print(\"My age is {0} years\".format(age))\n#\n#print(\"There are {0} days in {1}, {2}, {3}, {4}, #{5}, {6} and {7}\".format(31, \"Jan\", \"Mar\", \"May\", #\"Jul\", \"Aug\", \"Oct\", \"Dec\"))\n#print(\"There are {0} days in Jan, Mar, May, Jul, #Aug, Oct, and Dec\".format(31))\n#print(\"Jan: {2}, Feb: {0}, Mar: {2}, Apr: {1}, #May: {2}, Jun: {1}, Jul: {2}, Sep: {1}, Oct: {2}, #Nov: {1}, Dec: {2}\".format(28, 30, 31))\n#print()\nprint(\"\"\"Jan: {2}\nFeb: {0}\nMar: {2}",
        "detail": "Repfields",
        "documentation": {}
    },
    {
        "label": "string1",
        "kind": 5,
        "importPath": "sequence_operators",
        "description": "sequence_operators",
        "peekOfCode": "string1 = \"he's \"\nstring2 = \"probably \"\nstring3 = \"pining \"\nstring4 = \"for the \"\nstring5 = \"fjords\"\nprint(string1 + string2 + string3 + string4 + string5)\nprint(\"he's \" \"probably \" \"pining \" \"for the \" \"fjords\")\nprint(\"Hello \" * 5)\nprint(\"Hello \" * (5 + 4))\nprint(\"Hello \" * 5 + \"4\")",
        "detail": "sequence_operators",
        "documentation": {}
    },
    {
        "label": "string2",
        "kind": 5,
        "importPath": "sequence_operators",
        "description": "sequence_operators",
        "peekOfCode": "string2 = \"probably \"\nstring3 = \"pining \"\nstring4 = \"for the \"\nstring5 = \"fjords\"\nprint(string1 + string2 + string3 + string4 + string5)\nprint(\"he's \" \"probably \" \"pining \" \"for the \" \"fjords\")\nprint(\"Hello \" * 5)\nprint(\"Hello \" * (5 + 4))\nprint(\"Hello \" * 5 + \"4\")\ntoday = \"friday\"",
        "detail": "sequence_operators",
        "documentation": {}
    },
    {
        "label": "string3",
        "kind": 5,
        "importPath": "sequence_operators",
        "description": "sequence_operators",
        "peekOfCode": "string3 = \"pining \"\nstring4 = \"for the \"\nstring5 = \"fjords\"\nprint(string1 + string2 + string3 + string4 + string5)\nprint(\"he's \" \"probably \" \"pining \" \"for the \" \"fjords\")\nprint(\"Hello \" * 5)\nprint(\"Hello \" * (5 + 4))\nprint(\"Hello \" * 5 + \"4\")\ntoday = \"friday\"\nprint(\"day\" in today)       # True",
        "detail": "sequence_operators",
        "documentation": {}
    },
    {
        "label": "string4",
        "kind": 5,
        "importPath": "sequence_operators",
        "description": "sequence_operators",
        "peekOfCode": "string4 = \"for the \"\nstring5 = \"fjords\"\nprint(string1 + string2 + string3 + string4 + string5)\nprint(\"he's \" \"probably \" \"pining \" \"for the \" \"fjords\")\nprint(\"Hello \" * 5)\nprint(\"Hello \" * (5 + 4))\nprint(\"Hello \" * 5 + \"4\")\ntoday = \"friday\"\nprint(\"day\" in today)       # True\nprint(\"fri\" in today)       # True",
        "detail": "sequence_operators",
        "documentation": {}
    },
    {
        "label": "string5",
        "kind": 5,
        "importPath": "sequence_operators",
        "description": "sequence_operators",
        "peekOfCode": "string5 = \"fjords\"\nprint(string1 + string2 + string3 + string4 + string5)\nprint(\"he's \" \"probably \" \"pining \" \"for the \" \"fjords\")\nprint(\"Hello \" * 5)\nprint(\"Hello \" * (5 + 4))\nprint(\"Hello \" * 5 + \"4\")\ntoday = \"friday\"\nprint(\"day\" in today)       # True\nprint(\"fri\" in today)       # True\nprint(\"thur\" in today)      # False",
        "detail": "sequence_operators",
        "documentation": {}
    },
    {
        "label": "today",
        "kind": 5,
        "importPath": "sequence_operators",
        "description": "sequence_operators",
        "peekOfCode": "today = \"friday\"\nprint(\"day\" in today)       # True\nprint(\"fri\" in today)       # True\nprint(\"thur\" in today)      # False\nprint(\"parrot\" in \"fjord\")  # False",
        "detail": "sequence_operators",
        "documentation": {}
    },
    {
        "label": "Calculator",
        "kind": 6,
        "importPath": "Tkinter Calculator",
        "description": "Tkinter Calculator",
        "peekOfCode": "class Calculator:\n    def __init__(self, master):\n        master.title(\"Grevy's Calculator\")\n        master.geometry('357x420+0+0')\n        master.config(bg='gray')\n        master.resizable(False,False)\n        self.equation=StringVar()\n        self.entry_value=' '\n        Entry(width=17,bg='#ccddff', font=('Arial Bold', 28), textvariable=self.equation).place(x=0, y=0)\n        Button(width=11,height=4,text='( ',relief='flat',bg='white',command=lambda:self.show(' ( ')).place(x=0 , y=50)",
        "detail": "Tkinter Calculator",
        "documentation": {}
    }
]