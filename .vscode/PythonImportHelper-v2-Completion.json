[
    {
        "label": "math,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math.",
        "description": "math.",
        "detail": "math.",
        "documentation": {}
    },
    {
        "label": "dill",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dill",
        "description": "dill",
        "detail": "dill",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "StringIO",
        "description": "StringIO",
        "detail": "StringIO",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "pands",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pands",
        "description": "pands",
        "detail": "pands",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Object",
        "importPath": "my_lib",
        "description": "my_lib",
        "isExtraImport": true,
        "detail": "my_lib",
        "documentation": {}
    },
    {
        "label": "Object3",
        "importPath": "my_lib",
        "description": "my_lib",
        "isExtraImport": true,
        "detail": "my_lib",
        "documentation": {}
    },
    {
        "label": "Object2",
        "importPath": "my_lib",
        "description": "my_lib",
        "isExtraImport": true,
        "detail": "my_lib",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "lib15",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib1",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib2",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib3",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib4",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib5",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib6",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib7",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib8",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib9",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib10",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib11",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib12",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib13",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib14",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib3",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "google.protobuf.descriptor_pb2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "google.protobuf.descriptor_pb2",
        "description": "google.protobuf.descriptor_pb2",
        "detail": "google.protobuf.descriptor_pb2",
        "documentation": {}
    },
    {
        "label": "Bar",
        "importPath": "source",
        "description": "source",
        "isExtraImport": true,
        "detail": "source",
        "documentation": {}
    },
    {
        "label": "dataclasses",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dataclasses",
        "description": "dataclasses",
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "collections",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "collections",
        "description": "collections",
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "namedtuple",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "namedtuple",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "islice",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "Error",
        "importPath": "sqlite3",
        "description": "sqlite3",
        "isExtraImport": true,
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "ducks",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ducks",
        "description": "ducks",
        "detail": "ducks",
        "documentation": {}
    },
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "mysql.connector",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "Error",
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "isExtraImport": true,
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "Employee",
        "importPath": "employee",
        "description": "employee",
        "isExtraImport": true,
        "detail": "employee",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "pytz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytz",
        "description": "pytz",
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "Player",
        "importPath": "Games.player",
        "description": "Games.player",
        "isExtraImport": true,
        "detail": "Games.player",
        "documentation": {}
    },
    {
        "label": "Player",
        "importPath": "Games.player",
        "description": "Games.player",
        "isExtraImport": true,
        "detail": "Games.player",
        "documentation": {}
    },
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "TK",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Entry",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "StringVar",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Entry",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "END",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Tk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Entry",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "StringVar",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "colorama",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "colorama",
        "description": "colorama",
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "blackjack",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "blackjack",
        "description": "blackjack",
        "detail": "blackjack",
        "documentation": {}
    },
    {
        "label": "timeit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "timeit",
        "description": "timeit",
        "detail": "timeit",
        "documentation": {}
    },
    {
        "label": "mean",
        "importPath": "statistics",
        "description": "statistics",
        "isExtraImport": true,
        "detail": "statistics",
        "documentation": {}
    },
    {
        "label": "stdev",
        "importPath": "statistics",
        "description": "statistics",
        "isExtraImport": true,
        "detail": "statistics",
        "documentation": {}
    },
    {
        "label": "people",
        "importPath": "data",
        "description": "data",
        "isExtraImport": true,
        "detail": "data",
        "documentation": {}
    },
    {
        "label": "plants_list",
        "importPath": "data",
        "description": "data",
        "isExtraImport": true,
        "detail": "data",
        "documentation": {}
    },
    {
        "label": "plants_dict",
        "importPath": "data",
        "description": "data",
        "isExtraImport": true,
        "detail": "data",
        "documentation": {}
    },
    {
        "label": "basic_plants_list",
        "importPath": "data",
        "description": "data",
        "isExtraImport": true,
        "detail": "data",
        "documentation": {}
    },
    {
        "label": "plants_list",
        "importPath": "data",
        "description": "data",
        "isExtraImport": true,
        "detail": "data",
        "documentation": {}
    },
    {
        "label": "medals_table",
        "importPath": "medals_data",
        "description": "medals_data",
        "isExtraImport": true,
        "detail": "medals_data",
        "documentation": {}
    },
    {
        "label": "medals_table",
        "importPath": "medals_data",
        "description": "medals_data",
        "isExtraImport": true,
        "detail": "medals_data",
        "documentation": {}
    },
    {
        "label": "functools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "functools",
        "description": "functools",
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "better_code",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "better_code",
        "description": "better_code",
        "detail": "better_code",
        "documentation": {}
    },
    {
        "label": "area_of_square",
        "importPath": "better_code",
        "description": "better_code",
        "isExtraImport": true,
        "detail": "better_code",
        "documentation": {}
    },
    {
        "label": "area_of_square",
        "importPath": "better_code",
        "description": "better_code",
        "isExtraImport": true,
        "detail": "better_code",
        "documentation": {}
    },
    {
        "label": "locale",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "locale",
        "description": "locale",
        "detail": "locale",
        "documentation": {}
    },
    {
        "label": "turtle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "turtle",
        "description": "turtle",
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "radians",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "cos",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "radians",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "cos",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "webbrowser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "webbrowser",
        "description": "webbrowser",
        "detail": "webbrowser",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "tkinter.messagebox",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter.messagebox",
        "description": "tkinter.messagebox",
        "detail": "tkinter.messagebox",
        "documentation": {}
    },
    {
        "label": "fnmatch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fnmatch",
        "description": "fnmatch",
        "detail": "fnmatch",
        "documentation": {}
    },
    {
        "label": "struct",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "struct",
        "description": "struct",
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "zlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zlib",
        "description": "zlib",
        "detail": "zlib",
        "documentation": {}
    },
    {
        "label": "id3reader_p3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "id3reader_p3",
        "description": "id3reader_p3",
        "detail": "id3reader_p3",
        "documentation": {}
    },
    {
        "label": "CalculatorGrid",
        "importPath": "calculator_widgets",
        "description": "calculator_widgets",
        "isExtraImport": true,
        "detail": "calculator_widgets",
        "documentation": {}
    },
    {
        "label": "Example3",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.autopep8.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.autopep8.test_data.basic.in",
        "peekOfCode": "class Example3(   object ):\n    def __init__    ( self, bar ):\n     #Comments should have a space after the hash.\n     if bar : bar+=1;  bar=bar* bar   ; return bar\n     else:\n                    some_string = \"\"\"\n                       Indentation in multiline strings should not be touched.\nOnly actual code should be reindented.\n\"\"\"\n                    return (sys.path, some_string)",
        "detail": ".trunk.plugins.trunk.linters.autopep8.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "example1",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.autopep8.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.autopep8.test_data.basic.in",
        "peekOfCode": "def example1():\n    ####This is a long comment. This should be wrapped to fit within 72 characters.\n    some_tuple=(   1,2, 3,'a'  );\n    some_variable={'long':'Long code lines should be wrapped within 79 characters.',\n    'other':[math.pi, 100,200,300,9876543210,'This is a long string that goes on'],\n    'more':{'inner':'This whole logical line should be wrapped.',some_tuple:[1,\n    20,300,40000,500000000,60000000000000000]}}\n    return (some_tuple, some_variable)\ndef example2(): return {'has_key() is deprecated':True}.has_key({'f':2}.has_key(''));\nclass Example3(   object ):",
        "detail": ".trunk.plugins.trunk.linters.autopep8.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "example2",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.autopep8.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.autopep8.test_data.basic.in",
        "peekOfCode": "def example2(): return {'has_key() is deprecated':True}.has_key({'f':2}.has_key(''));\nclass Example3(   object ):\n    def __init__    ( self, bar ):\n     #Comments should have a space after the hash.\n     if bar : bar+=1;  bar=bar* bar   ; return bar\n     else:\n                    some_string = \"\"\"\n                       Indentation in multiline strings should not be touched.\nOnly actual code should be reindented.\n\"\"\"",
        "detail": ".trunk.plugins.trunk.linters.autopep8.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "pick",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.bandit.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.bandit.test_data.basic.in",
        "peekOfCode": "pick = dill.dumps({\"a\": \"b\", \"c\": \"d\"})\nprint(dill.loads(pick))\nfile_obj = StringIO.StringIO()\ndill.dump([1, 2, \"3\"], file_obj)",
        "detail": ".trunk.plugins.trunk.linters.bandit.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "file_obj",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.bandit.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.bandit.test_data.basic.in",
        "peekOfCode": "file_obj = StringIO.StringIO()\ndill.dump([1, 2, \"3\"], file_obj)",
        "detail": ".trunk.plugins.trunk.linters.bandit.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "NoDocstring",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.codespell.test_data.basic_py.in",
        "description": ".trunk.plugins.trunk.linters.codespell.test_data.basic_py.in",
        "peekOfCode": "class NoDocstring(object):\n    def __init__(self, arg1):\n        self._attr1 = arg1\nclass Globe(object):\n    def __init__(self):\n        self.shape = 'spheroid'\n    def __inti__(self):\n        prit(\"this is not a valid method\")\n        callbak = lamda x: x * 2\n    varName1 = \"helol ym anme is var\"",
        "detail": ".trunk.plugins.trunk.linters.codespell.test_data.basic_py.in",
        "documentation": {}
    },
    {
        "label": "Globe",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.codespell.test_data.basic_py.in",
        "description": ".trunk.plugins.trunk.linters.codespell.test_data.basic_py.in",
        "peekOfCode": "class Globe(object):\n    def __init__(self):\n        self.shape = 'spheroid'\n    def __inti__(self):\n        prit(\"this is not a valid method\")\n        callbak = lamda x: x * 2\n    varName1 = \"helol ym anme is var\"\ncachedir = \"/tmp\"",
        "detail": ".trunk.plugins.trunk.linters.codespell.test_data.basic_py.in",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.codespell.test_data.basic_py.in",
        "description": ".trunk.plugins.trunk.linters.codespell.test_data.basic_py.in",
        "peekOfCode": "def main():\n    try:\n        pass\n    except (Exception, TypeError):\n        pass\nimport sys\nimport pands\nclass NoDocstring(object):\n    def __init__(self, arg1):\n        self._attr1 = arg1",
        "detail": ".trunk.plugins.trunk.linters.codespell.test_data.basic_py.in",
        "documentation": {}
    },
    {
        "label": "cachedir",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.codespell.test_data.basic_py.in",
        "description": ".trunk.plugins.trunk.linters.codespell.test_data.basic_py.in",
        "peekOfCode": "cachedir = \"/tmp\"",
        "detail": ".trunk.plugins.trunk.linters.codespell.test_data.basic_py.in",
        "documentation": {}
    },
    {
        "label": "to_result_sarif",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.codespell.codespell_to_sarif",
        "description": ".trunk.plugins.trunk.linters.codespell.codespell_to_sarif",
        "peekOfCode": "def to_result_sarif(\n    path: str, line_number: int, column_number: int, rule_id: str, message: str\n):\n    return {\n        \"level\": \"error\",\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": path,",
        "detail": ".trunk.plugins.trunk.linters.codespell.codespell_to_sarif",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.codespell.codespell_to_sarif",
        "description": ".trunk.plugins.trunk.linters.codespell.codespell_to_sarif",
        "peekOfCode": "def main(argv):\n    results = []\n    for line in sys.stdin.readlines():\n        filename, line_number, message = line.split(\":\")\n        results.append(\n            to_result_sarif(\n                filename, int(line_number), 0, \"misspelled\", message.strip()\n            )\n        )\n    sarif = {",
        "detail": ".trunk.plugins.trunk.linters.codespell.codespell_to_sarif",
        "documentation": {}
    },
    {
        "label": "NoDocstring",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.cspell.test_data.basic_py.in",
        "description": ".trunk.plugins.trunk.linters.cspell.test_data.basic_py.in",
        "peekOfCode": "class NoDocstring(object):\n    def __init__(self, arg1):\n        self._attr1 = arg1\nclass Globe(object):\n    def __init__(self):\n        self.shape = 'spheroid'\n    def __inti__(self):\n        prit(\"this is not a valid method\")\n        callbak = lamda x: x * 2\n    varName1 = \"helol ym anme is var\"",
        "detail": ".trunk.plugins.trunk.linters.cspell.test_data.basic_py.in",
        "documentation": {}
    },
    {
        "label": "Globe",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.cspell.test_data.basic_py.in",
        "description": ".trunk.plugins.trunk.linters.cspell.test_data.basic_py.in",
        "peekOfCode": "class Globe(object):\n    def __init__(self):\n        self.shape = 'spheroid'\n    def __inti__(self):\n        prit(\"this is not a valid method\")\n        callbak = lamda x: x * 2\n    varName1 = \"helol ym anme is var\"\ncachedir = \"/tmp\"",
        "detail": ".trunk.plugins.trunk.linters.cspell.test_data.basic_py.in",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.cspell.test_data.basic_py.in",
        "description": ".trunk.plugins.trunk.linters.cspell.test_data.basic_py.in",
        "peekOfCode": "def main():\n    try:\n        pass\n    except (Exception, TypeError):\n        pass\nimport sys\nimport pands\nclass NoDocstring(object):\n    def __init__(self, arg1):\n        self._attr1 = arg1",
        "detail": ".trunk.plugins.trunk.linters.cspell.test_data.basic_py.in",
        "documentation": {}
    },
    {
        "label": "cachedir",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.cspell.test_data.basic_py.in",
        "description": ".trunk.plugins.trunk.linters.cspell.test_data.basic_py.in",
        "peekOfCode": "cachedir = \"/tmp\"",
        "detail": ".trunk.plugins.trunk.linters.cspell.test_data.basic_py.in",
        "documentation": {}
    },
    {
        "label": "NoDocstring",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.flake8.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.flake8.test_data.basic.in",
        "peekOfCode": "class NoDocstring(object):\n    def __init__(self, arg1):\n        self._attr1 = arg1\nclass Globe(object):\n    def __init__(self):\n        self.shape = 'spheroid'",
        "detail": ".trunk.plugins.trunk.linters.flake8.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "Globe",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.flake8.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.flake8.test_data.basic.in",
        "peekOfCode": "class Globe(object):\n    def __init__(self):\n        self.shape = 'spheroid'",
        "detail": ".trunk.plugins.trunk.linters.flake8.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.flake8.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.flake8.test_data.basic.in",
        "peekOfCode": "def main():\n    try:\n        pass\n    except (Exception, TypeError):\n        pass\nimport sys\n# trunk-ignore(flake8/F401): this will trigger a warning to verify that the config is applied\nclass NoDocstring(object):\n    def __init__(self, arg1):\n        self._attr1 = arg1",
        "detail": ".trunk.plugins.trunk.linters.flake8.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "aws_access_key_id",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.gitleaks.test_data.basic",
        "description": ".trunk.plugins.trunk.linters.gitleaks.test_data.basic",
        "peekOfCode": "aws_access_key_id = \"AKIAIO5FODNN7EXAMPLE\"\naws_access_key_id = \"AKIAIO5FODNN7EXAMPLE\"",
        "detail": ".trunk.plugins.trunk.linters.gitleaks.test_data.basic",
        "documentation": {}
    },
    {
        "label": "aws_access_key_id",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.gitleaks.test_data.basic",
        "description": ".trunk.plugins.trunk.linters.gitleaks.test_data.basic",
        "peekOfCode": "aws_access_key_id = \"AKIAIO5FODNN7EXAMPLE\"",
        "detail": ".trunk.plugins.trunk.linters.gitleaks.test_data.basic",
        "documentation": {}
    },
    {
        "label": "to_result_sarif",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.graphql-schema-linter.parse",
        "description": ".trunk.plugins.trunk.linters.graphql-schema-linter.parse",
        "peekOfCode": "def to_result_sarif(path: str, lineno: int, colno: int, rule_id: str, message: str):\n    return {\n        \"level\": \"error\",\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": path,\n                    },\n                    \"region\": {",
        "detail": ".trunk.plugins.trunk.linters.graphql-schema-linter.parse",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.graphql-schema-linter.parse",
        "description": ".trunk.plugins.trunk.linters.graphql-schema-linter.parse",
        "peekOfCode": "def main(argv):\n    output_json = json.load(sys.stdin)\n    errors = output_json.get(\"errors\", [])\n    results = []\n    for error in errors:\n        rule = error.get(\"rule\", \"\")\n        message = error.get(\"message\", \"\")\n        location = error.get(\"location\")\n        if location:\n            path = location.get(\"file\", \"\")",
        "detail": ".trunk.plugins.trunk.linters.graphql-schema-linter.parse",
        "documentation": {}
    },
    {
        "label": "try_find_string_in_file",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.markdown-link-check.parse",
        "description": ".trunk.plugins.trunk.linters.markdown-link-check.parse",
        "peekOfCode": "def try_find_string_in_file(filename, search_string):\n    with open(filename, \"r\") as f:\n        for i, line in enumerate(f):\n            index = line.find(search_string)\n            if index != -1:\n                return i + 1, index + 1\n    return 0, 0\ndef to_result_sarif(\n    path: str, line_number: int, column_number: int, rule_id: str, message: str\n):",
        "detail": ".trunk.plugins.trunk.linters.markdown-link-check.parse",
        "documentation": {}
    },
    {
        "label": "to_result_sarif",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.markdown-link-check.parse",
        "description": ".trunk.plugins.trunk.linters.markdown-link-check.parse",
        "peekOfCode": "def to_result_sarif(\n    path: str, line_number: int, column_number: int, rule_id: str, message: str\n):\n    return {\n        \"level\": \"error\",\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": path,",
        "detail": ".trunk.plugins.trunk.linters.markdown-link-check.parse",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.markdown-link-check.parse",
        "description": ".trunk.plugins.trunk.linters.markdown-link-check.parse",
        "peekOfCode": "def main(argv):\n    parser = argparse.ArgumentParser(description=\"Parse output of markdown-link-check\")\n    parser.add_argument(\"--target\", dest=\"target\")\n    args = parser.parse_args()\n    results = []\n    # Line numbers are not reported out of the tool right now - so we regex parse the output to extract issue codes\n    for line in sys.stdin:\n        parse_reg = \"\\s*(\\[.*\\])\\s(.*)→.*Status:\\s*(\\d*)(.*)\"\n        filename = args.target\n        parse_result = re.fullmatch(parse_reg, line, flags=re.DOTALL)",
        "detail": ".trunk.plugins.trunk.linters.markdown-link-check.parse",
        "documentation": {}
    },
    {
        "label": "greeting",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.mypy.test_data.basic",
        "description": ".trunk.plugins.trunk.linters.mypy.test_data.basic",
        "peekOfCode": "def greeting(name: str) -> str:\n    return \"Hello \" + name\ndef printer() -> None:\n    print(\"Hello\")\ngreeting(3)\ngreeting(b\"Alice\")\na = printer()\nc: str = 4\nfrom source import Bar\ndef bad_foo(bar: Bar) -> str:",
        "detail": ".trunk.plugins.trunk.linters.mypy.test_data.basic",
        "documentation": {}
    },
    {
        "label": "printer",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.mypy.test_data.basic",
        "description": ".trunk.plugins.trunk.linters.mypy.test_data.basic",
        "peekOfCode": "def printer() -> None:\n    print(\"Hello\")\ngreeting(3)\ngreeting(b\"Alice\")\na = printer()\nc: str = 4\nfrom source import Bar\ndef bad_foo(bar: Bar) -> str:\n  return bar.a + bar.b",
        "detail": ".trunk.plugins.trunk.linters.mypy.test_data.basic",
        "documentation": {}
    },
    {
        "label": "bad_foo",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.mypy.test_data.basic",
        "description": ".trunk.plugins.trunk.linters.mypy.test_data.basic",
        "peekOfCode": "def bad_foo(bar: Bar) -> str:\n  return bar.a + bar.b",
        "detail": ".trunk.plugins.trunk.linters.mypy.test_data.basic",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.mypy.test_data.basic",
        "description": ".trunk.plugins.trunk.linters.mypy.test_data.basic",
        "peekOfCode": "a = printer()\nc: str = 4\nfrom source import Bar\ndef bad_foo(bar: Bar) -> str:\n  return bar.a + bar.b",
        "detail": ".trunk.plugins.trunk.linters.mypy.test_data.basic",
        "documentation": {}
    },
    {
        "label": "Bar",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.mypy.test_data.source",
        "description": ".trunk.plugins.trunk.linters.mypy.test_data.source",
        "peekOfCode": "class Bar:\n  a: int\n  b: int\ndef bad_function() -> int:\n  print(\"returns nothing\")",
        "detail": ".trunk.plugins.trunk.linters.mypy.test_data.source",
        "documentation": {}
    },
    {
        "label": "bad_function",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.mypy.test_data.source",
        "description": ".trunk.plugins.trunk.linters.mypy.test_data.source",
        "peekOfCode": "def bad_function() -> int:\n  print(\"returns nothing\")",
        "detail": ".trunk.plugins.trunk.linters.mypy.test_data.source",
        "documentation": {}
    },
    {
        "label": "to_result_sarif",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.nancy.parse",
        "description": ".trunk.plugins.trunk.linters.nancy.parse",
        "peekOfCode": "def to_result_sarif(\n    path: str, line_number: int, column_number: int, rule_id: str, message: str\n):\n    return {\n        \"level\": \"error\",\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": path,",
        "detail": ".trunk.plugins.trunk.linters.nancy.parse",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.nancy.parse",
        "description": ".trunk.plugins.trunk.linters.nancy.parse",
        "peekOfCode": "def main(argv):\n    results = []\n    nancy_output = json.load(sys.stdin)\n    for vuln_entry in nancy_output.get(\"vulnerable\", []):\n        for vuln in vuln_entry.get(\"Vulnerabilities\", []):\n            results.append(\n                to_result_sarif(\n                    \".\",\n                    0,\n                    0,",
        "detail": ".trunk.plugins.trunk.linters.nancy.parse",
        "documentation": {}
    },
    {
        "label": "get_sarif_severity",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "description": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "peekOfCode": "def get_sarif_severity(vuln) -> str:\n    \"\"\"Get the SARIF severity appropriate for a given OSV vulnerability entry.\"\"\"\n    if \"database_specific\" not in vuln:\n        return DEFAULT_SARIF_SEVERITY\n    vuln_metadata = vuln[\"database_specific\"]\n    if \"severity\" not in vuln_metadata:\n        return DEFAULT_SARIF_SEVERITY\n    severity = vuln_metadata[\"severity\"].upper()\n    return SARIF_SEVERITY_BY_OSV_SEVERITY.get(severity, DEFAULT_SARIF_SEVERITY)\ndef to_result_sarif(",
        "detail": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "documentation": {}
    },
    {
        "label": "to_result_sarif",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "description": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "peekOfCode": "def to_result_sarif(\n    path: str, lineno: int, vuln_id: str, description: str, severity: str\n):\n    return {\n        \"level\": severity,\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": path,",
        "detail": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "documentation": {}
    },
    {
        "label": "join_common_sets",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "description": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "peekOfCode": "def join_common_sets(lst):\n    init_len = 0\n    final_len = 1\n    while init_len != final_len:\n        init_len = len(lst)\n        ret = []\n        for s in lst:\n            unique = True\n            for stored_set in ret:\n                if len(stored_set.intersection(s)) > 0:",
        "detail": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "documentation": {}
    },
    {
        "label": "get_preferred_alias",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "description": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "peekOfCode": "def get_preferred_alias(aliases):\n    for rx in PREFERRED_ORDER:\n        found_aliases = sorted(alias for alias in aliases if re.match(rx, alias))\n        if len(found_aliases) > 0:\n            return found_aliases[0]\n    return sorted(aliases)[0]\ndef main(argv):\n    try:\n        # On Windows, Unicode characters in the osv-scanner output cause json parsing errors. Filter them out since we don't care about their fields.\n        if sys.platform == \"win32\":",
        "detail": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "description": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "peekOfCode": "def main(argv):\n    try:\n        # On Windows, Unicode characters in the osv-scanner output cause json parsing errors. Filter them out since we don't care about their fields.\n        if sys.platform == \"win32\":\n            filtered_stdin = \"\".join(i for i in sys.stdin.read() if ord(i) < 256)\n            osv_json = json.loads(filtered_stdin)\n        else:\n            osv_json = json.load(sys.stdin)\n    except json.decoder.JSONDecodeError as err:\n        if str(err) == \"Expecting value: line 1 column 1 (char 0)\":",
        "detail": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "documentation": {}
    },
    {
        "label": "SARIF_SEVERITY_BY_OSV_SEVERITY",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "description": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "peekOfCode": "SARIF_SEVERITY_BY_OSV_SEVERITY = {\n    \"CRITICAL\": \"error\",\n    \"HIGH\": \"error\",\n    \"MODERATE\": \"warning\",\n    \"MEDIUM\": \"warning\",\n    \"LOW\": \"note\",\n}\nDEFAULT_SARIF_SEVERITY = \"error\"\ndef get_sarif_severity(vuln) -> str:\n    \"\"\"Get the SARIF severity appropriate for a given OSV vulnerability entry.\"\"\"",
        "detail": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "documentation": {}
    },
    {
        "label": "DEFAULT_SARIF_SEVERITY",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "description": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "peekOfCode": "DEFAULT_SARIF_SEVERITY = \"error\"\ndef get_sarif_severity(vuln) -> str:\n    \"\"\"Get the SARIF severity appropriate for a given OSV vulnerability entry.\"\"\"\n    if \"database_specific\" not in vuln:\n        return DEFAULT_SARIF_SEVERITY\n    vuln_metadata = vuln[\"database_specific\"]\n    if \"severity\" not in vuln_metadata:\n        return DEFAULT_SARIF_SEVERITY\n    severity = vuln_metadata[\"severity\"].upper()\n    return SARIF_SEVERITY_BY_OSV_SEVERITY.get(severity, DEFAULT_SARIF_SEVERITY)",
        "detail": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "documentation": {}
    },
    {
        "label": "PREFERRED_ORDER",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "description": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "peekOfCode": "PREFERRED_ORDER = [\"GHSA-.*\", \"CVE-.*\", \"PYSEC-.*\"]\ndef get_preferred_alias(aliases):\n    for rx in PREFERRED_ORDER:\n        found_aliases = sorted(alias for alias in aliases if re.match(rx, alias))\n        if len(found_aliases) > 0:\n            return found_aliases[0]\n    return sorted(aliases)[0]\ndef main(argv):\n    try:\n        # On Windows, Unicode characters in the osv-scanner output cause json parsing errors. Filter them out since we don't care about their fields.",
        "detail": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "documentation": {}
    },
    {
        "label": "to_result_sarif",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.prettier.prettier_to_sarif",
        "description": ".trunk.plugins.trunk.linters.prettier.prettier_to_sarif",
        "peekOfCode": "def to_result_sarif(path: str, description: str, line: int = 0, column: int = 0):\n    return {\n        \"level\": \"error\",\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": path,\n                    },\n                    \"region\": {",
        "detail": ".trunk.plugins.trunk.linters.prettier.prettier_to_sarif",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.prettier.prettier_to_sarif",
        "description": ".trunk.plugins.trunk.linters.prettier.prettier_to_sarif",
        "peekOfCode": "def main(argv):\n    if len(argv) < 2:\n        print(\"Usage: trivy_to_sarif.py <exit_code>)\")\n        sys.exit(1)\n    if argv[1] == \"0\":\n        results = []\n        sarif = {\n            \"$schema\": \"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json\",\n            \"version\": \"2.1.0\",\n            \"runs\": [{\"results\": results}],",
        "detail": ".trunk.plugins.trunk.linters.prettier.prettier_to_sarif",
        "documentation": {}
    },
    {
        "label": "shift",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "peekOfCode": "shift = 3\nchoice = raw_input(\"would you like to encode or decode?\")\nword = raw_input(\"Please enter text\")\nletters = string.ascii_letters + string.punctuation + string.digits\nencoded = \"\"",
        "detail": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "choice",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "peekOfCode": "choice = raw_input(\"would you like to encode or decode?\")\nword = raw_input(\"Please enter text\")\nletters = string.ascii_letters + string.punctuation + string.digits\nencoded = \"\"",
        "detail": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "word",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "peekOfCode": "word = raw_input(\"Please enter text\")\nletters = string.ascii_letters + string.punctuation + string.digits\nencoded = \"\"",
        "detail": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "letters",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "peekOfCode": "letters = string.ascii_letters + string.punctuation + string.digits\nencoded = \"\"",
        "detail": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "encoded",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "peekOfCode": "encoded = \"\"",
        "detail": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.pylint.test_data.severity",
        "description": ".trunk.plugins.trunk.linters.pylint.test_data.severity",
        "peekOfCode": "def foo():\n    return \"bar\"",
        "detail": ".trunk.plugins.trunk.linters.pylint.test_data.severity",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "peekOfCode": "class A:\n    def method1(self) -> None:\n        self.x = 1\n    def method2(self) -> None:\n        self.x = \"\" # Mypy treats this as an error because `x` is implicitly declared as `int`\na = A()\nreveal_type(a.x)\na.x = \"\" # Pyright allows this because the type of `x` is `int | str`\na.x = 3.0 # Pyright treats this as an error because the type of `x` is `int | str`\nclass A:",
        "detail": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "peekOfCode": "class A:\n    x: int = 0 # Regular class variable\n    y: ClassVar[int] = 0 # Pure class variable\n    def __init__(self):\n        self.z = 0 # Pure instance variable\nprint(A.x)\nprint(A.y)\nprint(A.z) # pyright shows error, mypy shows no error\nclass Color(Enum):\n    RED = 1",
        "detail": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "Color",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "peekOfCode": "class Color(Enum):\n    RED = 1\n    BLUE = 2\ndef is_red(color: Color) -> bool:\n    if color == Color.RED:\n        return True\n    elif color == Color.BLUE:\n        return False\n    # mypy reports error: Missing return statement\ndef func(val: int | None):",
        "detail": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "wrong_type",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "peekOfCode": "def wrong_type(x: int) -> str:\n    return x  # error: Incompatible return value type (got \"int\", expected \"str\")\nclass A:\n    def method1(self) -> None:\n        self.x = 1\n    def method2(self) -> None:\n        self.x = \"\" # Mypy treats this as an error because `x` is implicitly declared as `int`\na = A()\nreveal_type(a.x)\na.x = \"\" # Pyright allows this because the type of `x` is `int | str`",
        "detail": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "is_red",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "peekOfCode": "def is_red(color: Color) -> bool:\n    if color == Color.RED:\n        return True\n    elif color == Color.BLUE:\n        return False\n    # mypy reports error: Missing return statement\ndef func(val: int | None):\n    if val is not None:\n        def inner_1() -> None:\n            reveal_type(val)",
        "detail": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "peekOfCode": "def func(val: int | None):\n    if val is not None:\n        def inner_1() -> None:\n            reveal_type(val)\n            print(val + 1)  # mypy produces a false positive error here\n        inner_2 = lambda: reveal_type(val) + 1\n        inner_1()\n        inner_2()",
        "detail": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "peekOfCode": "a = A()\nreveal_type(a.x)\na.x = \"\" # Pyright allows this because the type of `x` is `int | str`\na.x = 3.0 # Pyright treats this as an error because the type of `x` is `int | str`\nclass A:\n    x: int = 0 # Regular class variable\n    y: ClassVar[int] = 0 # Pure class variable\n    def __init__(self):\n        self.z = 0 # Pure instance variable\nprint(A.x)",
        "detail": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "a.x",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "peekOfCode": "a.x = \"\" # Pyright allows this because the type of `x` is `int | str`\na.x = 3.0 # Pyright treats this as an error because the type of `x` is `int | str`\nclass A:\n    x: int = 0 # Regular class variable\n    y: ClassVar[int] = 0 # Pure class variable\n    def __init__(self):\n        self.z = 0 # Pure instance variable\nprint(A.x)\nprint(A.y)\nprint(A.z) # pyright shows error, mypy shows no error",
        "detail": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "a.x",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "peekOfCode": "a.x = 3.0 # Pyright treats this as an error because the type of `x` is `int | str`\nclass A:\n    x: int = 0 # Regular class variable\n    y: ClassVar[int] = 0 # Pure class variable\n    def __init__(self):\n        self.z = 0 # Pure instance variable\nprint(A.x)\nprint(A.y)\nprint(A.z) # pyright shows error, mypy shows no error\nclass Color(Enum):",
        "detail": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "results",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.pyright.pyright_to_sarif",
        "description": ".trunk.plugins.trunk.linters.pyright.pyright_to_sarif",
        "peekOfCode": "results = []\nfor result in json.load(sys.stdin)[\"generalDiagnostics\"]:\n    parse = {\n        \"level\": result[\"severity\"] if result[\"severity\"] != \"information\" else \"note\",\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": result[\"file\"],\n                    },",
        "detail": ".trunk.plugins.trunk.linters.pyright.pyright_to_sarif",
        "documentation": {}
    },
    {
        "label": "sarif",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.pyright.pyright_to_sarif",
        "description": ".trunk.plugins.trunk.linters.pyright.pyright_to_sarif",
        "peekOfCode": "sarif = {\n    \"$schema\": \"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json\",\n    \"version\": \"2.1.0\",\n    \"runs\": [{\"results\": results}],\n}\nprint(json.dumps(sarif, indent=2))",
        "detail": ".trunk.plugins.trunk.linters.pyright.pyright_to_sarif",
        "documentation": {}
    },
    {
        "label": "to_result_sarif",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.remark-lint.parse",
        "description": ".trunk.plugins.trunk.linters.remark-lint.parse",
        "peekOfCode": "def to_result_sarif(\n    path: str, line_number: int, column_number: int, rule_id: str, message: str\n):\n    return {\n        \"level\": \"error\",\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": path,",
        "detail": ".trunk.plugins.trunk.linters.remark-lint.parse",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.remark-lint.parse",
        "description": ".trunk.plugins.trunk.linters.remark-lint.parse",
        "peekOfCode": "def main(argv):\n    results = []\n    content_json = sys.stdin.read()\n    content = json.loads(content_json)\n    for file_content in content:\n        messages = file_content.get(\"messages\", [])\n        if messages:\n            for msg in messages:\n                results.append(\n                    to_result_sarif(",
        "detail": ".trunk.plugins.trunk.linters.remark-lint.parse",
        "documentation": {}
    },
    {
        "label": "to_result_sarif",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.renovate.parse",
        "description": ".trunk.plugins.trunk.linters.renovate.parse",
        "peekOfCode": "def to_result_sarif(\n    path: str, line_number: int, column_number: int, rule_id: str, message: str\n):\n    return {\n        \"level\": \"error\",\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": path,",
        "detail": ".trunk.plugins.trunk.linters.renovate.parse",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.renovate.parse",
        "description": ".trunk.plugins.trunk.linters.renovate.parse",
        "peekOfCode": "def main(argv):\n    results = []\n    content = sys.stdin.read()\n    parse_reg = \"(.*WARN:.*could not be parsed)(.*)\"\n    error_section = content.find('\"errors\": [')\n    parse_result = re.fullmatch(parse_reg, content, flags=re.DOTALL)\n    if parse_result:\n        warn_section = parse_result.group(2)\n        json_content = \"{\" + warn_section + \"}\"\n        error_output = json.loads(json_content)",
        "detail": ".trunk.plugins.trunk.linters.renovate.parse",
        "documentation": {}
    },
    {
        "label": "map_severity",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.rubocop.rubocop_to_sarif",
        "description": ".trunk.plugins.trunk.linters.rubocop.rubocop_to_sarif",
        "peekOfCode": "def map_severity(severity):\n    if severity in [\"convention\", \"refactor\", \"info\"]:\n        return \"note\"\n    if severity in [\"warning\"]:\n        return \"warning\"\n    if severity in [\"error\", \"fatal\"]:\n        return \"error\"\n    return \"none\"\nresults = []\nfor file in json.load(sys.stdin)[\"files\"]:",
        "detail": ".trunk.plugins.trunk.linters.rubocop.rubocop_to_sarif",
        "documentation": {}
    },
    {
        "label": "results",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.rubocop.rubocop_to_sarif",
        "description": ".trunk.plugins.trunk.linters.rubocop.rubocop_to_sarif",
        "peekOfCode": "results = []\nfor file in json.load(sys.stdin)[\"files\"]:\n    for offense in file[\"offenses\"]:\n        parse = {\n            \"level\": map_severity(offense[\"severity\"]),\n            \"locations\": [\n                {\n                    \"physicalLocation\": {\n                        \"artifactLocation\": {\n                            \"uri\": file[\"path\"],",
        "detail": ".trunk.plugins.trunk.linters.rubocop.rubocop_to_sarif",
        "documentation": {}
    },
    {
        "label": "sarif",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.rubocop.rubocop_to_sarif",
        "description": ".trunk.plugins.trunk.linters.rubocop.rubocop_to_sarif",
        "peekOfCode": "sarif = {\n    \"$schema\": \"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json\",\n    \"version\": \"2.1.0\",\n    \"runs\": [{\"results\": results}],\n}\nprint(json.dumps(sarif, indent=2))",
        "detail": ".trunk.plugins.trunk.linters.rubocop.rubocop_to_sarif",
        "documentation": {}
    },
    {
        "label": "NoDocstring",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.ruff.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.ruff.test_data.basic.in",
        "peekOfCode": "class NoDocstring(object):\n    def __init__(self, arg1):\n        self._attr1 = arg1\nclass Globe(object):\n    def __init__(self):\n        self.shape = 'spheroid'",
        "detail": ".trunk.plugins.trunk.linters.ruff.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "Globe",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.ruff.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.ruff.test_data.basic.in",
        "peekOfCode": "class Globe(object):\n    def __init__(self):\n        self.shape = 'spheroid'",
        "detail": ".trunk.plugins.trunk.linters.ruff.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.ruff.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.ruff.test_data.basic.in",
        "peekOfCode": "def main():\n    try:\n        pass\n    except (Exception, TypeError):\n        pass\nimport sys\n# trunk-ignore(ruff/F401)\nimport json\nclass NoDocstring(object):\n    def __init__(self, arg1):",
        "detail": ".trunk.plugins.trunk.linters.ruff.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "get_region",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.ruff.ruff_to_sarif",
        "description": ".trunk.plugins.trunk.linters.ruff.ruff_to_sarif",
        "peekOfCode": "def get_region(entry, column_offset=0):\n    location = entry[\"location\"]\n    region = {\n        \"startColumn\": location[\"column\"] + column_offset,\n        \"startLine\": location[\"row\"],\n    }\n    if \"end_location\" in entry:\n        end_location = entry[\"end_location\"]\n        region[\"endColumn\"] = end_location[\"column\"] + column_offset\n        region[\"endLine\"] = end_location[\"row\"]",
        "detail": ".trunk.plugins.trunk.linters.ruff.ruff_to_sarif",
        "documentation": {}
    },
    {
        "label": "results",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.ruff.ruff_to_sarif",
        "description": ".trunk.plugins.trunk.linters.ruff.ruff_to_sarif",
        "peekOfCode": "results = []\ndef get_region(entry, column_offset=0):\n    location = entry[\"location\"]\n    region = {\n        \"startColumn\": location[\"column\"] + column_offset,\n        \"startLine\": location[\"row\"],\n    }\n    if \"end_location\" in entry:\n        end_location = entry[\"end_location\"]\n        region[\"endColumn\"] = end_location[\"column\"] + column_offset",
        "detail": ".trunk.plugins.trunk.linters.ruff.ruff_to_sarif",
        "documentation": {}
    },
    {
        "label": "ruff_column_index",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.ruff.ruff_to_sarif",
        "description": ".trunk.plugins.trunk.linters.ruff.ruff_to_sarif",
        "peekOfCode": "ruff_column_index = 1\nif len(sys.argv) > 1:\n    ruff_column_index = int(sys.argv[1])\nfor result in json.load(sys.stdin):\n    # As of ruff v0.0.260, some autofixable diagnostics may appear redundantly\n    if \"location\" not in result:\n        continue\n    filepath = result[\"filename\"]\n    rule_id = result[\"code\"]\n    message = result[\"message\"]",
        "detail": ".trunk.plugins.trunk.linters.ruff.ruff_to_sarif",
        "documentation": {}
    },
    {
        "label": "sarif",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.ruff.ruff_to_sarif",
        "description": ".trunk.plugins.trunk.linters.ruff.ruff_to_sarif",
        "peekOfCode": "sarif = {\n    \"$schema\": \"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json\",\n    \"version\": \"2.1.0\",\n    \"runs\": [{\"results\": results}],\n}\nprint(json.dumps(sarif, indent=2))",
        "detail": ".trunk.plugins.trunk.linters.ruff.ruff_to_sarif",
        "documentation": {}
    },
    {
        "label": "unvalidated_value",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.semgrep.test_data.request",
        "description": ".trunk.plugins.trunk.linters.semgrep.test_data.request",
        "peekOfCode": "def unvalidated_value(request):\n    value = request.GET.get('something')\n    function = globals().get(value)\n    if function:\n        return function(request)",
        "detail": ".trunk.plugins.trunk.linters.semgrep.test_data.request",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.sourcery.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.sourcery.test_data.basic.in",
        "peekOfCode": "def test():\n  substitution = \"hello %s\" % test\n  my_list = List()\n  try:\n    pass\n  except Exception:\n    raise Exception(\"test\")",
        "detail": ".trunk.plugins.trunk.linters.sourcery.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.sourcery.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.sourcery.test_data.basic.in",
        "peekOfCode": "test = \"world\"\ndef test():\n  substitution = \"hello %s\" % test\n  my_list = List()\n  try:\n    pass\n  except Exception:\n    raise Exception(\"test\")",
        "detail": ".trunk.plugins.trunk.linters.sourcery.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "to_result_sarif",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.sqlfluff.sqlfluff_to_sarif",
        "description": ".trunk.plugins.trunk.linters.sqlfluff.sqlfluff_to_sarif",
        "peekOfCode": "def to_result_sarif(\n    path: str, line_number: int, column_number: int, rule_id: str, message: str\n):\n    return {\n        \"level\": \"error\",\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": path,",
        "detail": ".trunk.plugins.trunk.linters.sqlfluff.sqlfluff_to_sarif",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.sqlfluff.sqlfluff_to_sarif",
        "description": ".trunk.plugins.trunk.linters.sqlfluff.sqlfluff_to_sarif",
        "peekOfCode": "def main(argv):\n    sqlfluff_json = json.load(sys.stdin)\n    results = []\n    for result in sqlfluff_json:\n        filepath = result[\"filepath\"]\n        for violation in result[\"violations\"]:\n            line_number = violation[\"line_no\"]\n            column_number = violation[\"line_pos\"]\n            rule_id = violation[\"code\"]\n            message = violation[\"description\"]",
        "detail": ".trunk.plugins.trunk.linters.sqlfluff.sqlfluff_to_sarif",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.terrascan.sarif_to_sarif",
        "description": ".trunk.plugins.trunk.linters.terrascan.sarif_to_sarif",
        "peekOfCode": "def main(argv):\n    input_sarif = json.load(sys.stdin)\n    # strip \"file:\" from the beginning of each value in the 'file' field in the 'location' object in sarif format\n    for run in input_sarif[\"runs\"]:\n        for result in run[\"results\"]:\n            for location in result[\"locations\"]:\n                location[\"physicalLocation\"][\"artifactLocation\"][\"uri\"] = location[\n                    \"physicalLocation\"\n                ][\"artifactLocation\"][\"uri\"][5:]\n    print(json.dumps(input_sarif, indent=2))",
        "detail": ".trunk.plugins.trunk.linters.terrascan.sarif_to_sarif",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.tfsec.parse",
        "description": ".trunk.plugins.trunk.linters.tfsec.parse",
        "peekOfCode": "def main():\n    original_input = sys.stdin.read()\n    try:\n        index = original_input.index(\"{\")\n        print(original_input[index:])\n    except ValueError:\n        print(original_input)\nif __name__ == \"__main__\":\n    main()",
        "detail": ".trunk.plugins.trunk.linters.tfsec.parse",
        "documentation": {}
    },
    {
        "label": "aws_access_key_id",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.trivy.test_data.secrets",
        "description": ".trunk.plugins.trunk.linters.trivy.test_data.secrets",
        "peekOfCode": "aws_access_key_id = \"AKIAXYZDQCEN4EXAMPLE\"\naws_secret_access_key = \"Tg0pz8Jii8hkLx4+PnUisM8GmKs3a2DK+EXAMPLE\"\n# The below keys are copied from https://github.com/dustin-decker/secretsandstuff\ngithub_secret = \"369963c1434c377428ca8531fbc46c0c43d037a0\"\nbasic_auth = \"https://admin:admin@the-internet.herokuapp.com/basic_auth\"\npriv_key = \"\"\"\n-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jdHIAAAAGYmNyeXB0AAAAGAAAABAjNIZuun\nxgLkM8KuzfmQuRAAAAEAAAAAEAAAGXAAAAB3NzaC1yc2EAAAADAQABAAABgQDe3Al0EMPz\nutVNk5DixaYrGMK56RqUoqGBinke6SWVWmqom1lBcJWzor6HlnMRPPr7YCEsJKL4IpuVwu",
        "detail": ".trunk.plugins.trunk.linters.trivy.test_data.secrets",
        "documentation": {}
    },
    {
        "label": "aws_secret_access_key",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.trivy.test_data.secrets",
        "description": ".trunk.plugins.trunk.linters.trivy.test_data.secrets",
        "peekOfCode": "aws_secret_access_key = \"Tg0pz8Jii8hkLx4+PnUisM8GmKs3a2DK+EXAMPLE\"\n# The below keys are copied from https://github.com/dustin-decker/secretsandstuff\ngithub_secret = \"369963c1434c377428ca8531fbc46c0c43d037a0\"\nbasic_auth = \"https://admin:admin@the-internet.herokuapp.com/basic_auth\"\npriv_key = \"\"\"\n-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jdHIAAAAGYmNyeXB0AAAAGAAAABAjNIZuun\nxgLkM8KuzfmQuRAAAAEAAAAAEAAAGXAAAAB3NzaC1yc2EAAAADAQABAAABgQDe3Al0EMPz\nutVNk5DixaYrGMK56RqUoqGBinke6SWVWmqom1lBcJWzor6HlnMRPPr7YCEsJKL4IpuVwu\ninRa5kdtNTyM7yyQTSR2xXCS0fUItNuq8pUktsH8VUggpMeew8hJv7rFA7tnIg3UXCl6iF",
        "detail": ".trunk.plugins.trunk.linters.trivy.test_data.secrets",
        "documentation": {}
    },
    {
        "label": "github_secret",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.trivy.test_data.secrets",
        "description": ".trunk.plugins.trunk.linters.trivy.test_data.secrets",
        "peekOfCode": "github_secret = \"369963c1434c377428ca8531fbc46c0c43d037a0\"\nbasic_auth = \"https://admin:admin@the-internet.herokuapp.com/basic_auth\"\npriv_key = \"\"\"\n-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jdHIAAAAGYmNyeXB0AAAAGAAAABAjNIZuun\nxgLkM8KuzfmQuRAAAAEAAAAAEAAAGXAAAAB3NzaC1yc2EAAAADAQABAAABgQDe3Al0EMPz\nutVNk5DixaYrGMK56RqUoqGBinke6SWVWmqom1lBcJWzor6HlnMRPPr7YCEsJKL4IpuVwu\ninRa5kdtNTyM7yyQTSR2xXCS0fUItNuq8pUktsH8VUggpMeew8hJv7rFA7tnIg3UXCl6iF\nOLZKbDA5aa24idpcD8b1I9/RzTOB1fu0of5xd9vgODzGw5JvHQSJ0FaA42aNBMGwrDhDB3\nsgnRNdWf6NNIh8KpXXMKJADf3klsyn6He8L2bPMp8a4wwys2YB35p5zQ0JURovsdewlOxH",
        "detail": ".trunk.plugins.trunk.linters.trivy.test_data.secrets",
        "documentation": {}
    },
    {
        "label": "basic_auth",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.trivy.test_data.secrets",
        "description": ".trunk.plugins.trunk.linters.trivy.test_data.secrets",
        "peekOfCode": "basic_auth = \"https://admin:admin@the-internet.herokuapp.com/basic_auth\"\npriv_key = \"\"\"\n-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jdHIAAAAGYmNyeXB0AAAAGAAAABAjNIZuun\nxgLkM8KuzfmQuRAAAAEAAAAAEAAAGXAAAAB3NzaC1yc2EAAAADAQABAAABgQDe3Al0EMPz\nutVNk5DixaYrGMK56RqUoqGBinke6SWVWmqom1lBcJWzor6HlnMRPPr7YCEsJKL4IpuVwu\ninRa5kdtNTyM7yyQTSR2xXCS0fUItNuq8pUktsH8VUggpMeew8hJv7rFA7tnIg3UXCl6iF\nOLZKbDA5aa24idpcD8b1I9/RzTOB1fu0of5xd9vgODzGw5JvHQSJ0FaA42aNBMGwrDhDB3\nsgnRNdWf6NNIh8KpXXMKJADf3klsyn6He8L2bPMp8a4wwys2YB35p5zQ0JURovsdewlOxH\nNT7eP19eVf4dCreibxUmRUaob5DEoHEk8WrxjKWIYUuLeD6AfcW6oXyRU2Yy8Vrt6SqFl5",
        "detail": ".trunk.plugins.trunk.linters.trivy.test_data.secrets",
        "documentation": {}
    },
    {
        "label": "priv_key",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.trivy.test_data.secrets",
        "description": ".trunk.plugins.trunk.linters.trivy.test_data.secrets",
        "peekOfCode": "priv_key = \"\"\"\n-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jdHIAAAAGYmNyeXB0AAAAGAAAABAjNIZuun\nxgLkM8KuzfmQuRAAAAEAAAAAEAAAGXAAAAB3NzaC1yc2EAAAADAQABAAABgQDe3Al0EMPz\nutVNk5DixaYrGMK56RqUoqGBinke6SWVWmqom1lBcJWzor6HlnMRPPr7YCEsJKL4IpuVwu\ninRa5kdtNTyM7yyQTSR2xXCS0fUItNuq8pUktsH8VUggpMeew8hJv7rFA7tnIg3UXCl6iF\nOLZKbDA5aa24idpcD8b1I9/RzTOB1fu0of5xd9vgODzGw5JvHQSJ0FaA42aNBMGwrDhDB3\nsgnRNdWf6NNIh8KpXXMKJADf3klsyn6He8L2bPMp8a4wwys2YB35p5zQ0JURovsdewlOxH\nNT7eP19eVf4dCreibxUmRUaob5DEoHEk8WrxjKWIYUuLeD6AfcW6oXyRU2Yy8Vrt6SqFl5\nWAi47VMFTkDZYS/eCvG53q9UBHpCj7Qvb0vSkCZXBvBIhlw193F3PX4WvO1IXsMwvQ1D1X",
        "detail": ".trunk.plugins.trunk.linters.trivy.test_data.secrets",
        "documentation": {}
    },
    {
        "label": "to_result_sarif",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.trivy.trivy_config_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trivy.trivy_config_to_sarif",
        "peekOfCode": "def to_result_sarif(path: str, vuln_id: str, description: str, line: int = 0):\n    return {\n        \"level\": \"error\",\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": path,\n                    },\n                    \"region\": {",
        "detail": ".trunk.plugins.trunk.linters.trivy.trivy_config_to_sarif",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.trivy.trivy_config_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trivy.trivy_config_to_sarif",
        "peekOfCode": "def main(argv):\n    trivy_json = json.load(sys.stdin)\n    results = []\n    for result in trivy_json.get(\"Results\", []):\n        if \"Misconfigurations\" not in result:\n            continue\n        for vuln in result[\"Misconfigurations\"]:\n            vuln_id = vuln[\"ID\"]\n            message = vuln[\"Message\"]\n            line_num = vuln.get(\"CauseMetadata\", {}).get(\"StartLine\", 0)",
        "detail": ".trunk.plugins.trunk.linters.trivy.trivy_config_to_sarif",
        "documentation": {}
    },
    {
        "label": "get_sarif_severity",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.trivy.trivy_fs_secret_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trivy.trivy_fs_secret_to_sarif",
        "peekOfCode": "def get_sarif_severity(secret) -> str:\n    \"\"\"Get the SARIF severity appropriate for a given OSV vulnerability entry.\"\"\"\n    if \"Severity\" not in secret:\n        return DEFAULT_SARIF_SEVERITY\n    severity = secret[\"Severity\"].upper()\n    return SARIF_SEVERITY_BY_OSV_SEVERITY.get(severity, DEFAULT_SARIF_SEVERITY)\ndef to_result_sarif(path: str, severity: str, code: str, description: str, lineno: int):\n    return {\n        \"level\": severity,\n        \"locations\": [",
        "detail": ".trunk.plugins.trunk.linters.trivy.trivy_fs_secret_to_sarif",
        "documentation": {}
    },
    {
        "label": "to_result_sarif",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.trivy.trivy_fs_secret_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trivy.trivy_fs_secret_to_sarif",
        "peekOfCode": "def to_result_sarif(path: str, severity: str, code: str, description: str, lineno: int):\n    return {\n        \"level\": severity,\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": path,\n                    },\n                    \"region\": {",
        "detail": ".trunk.plugins.trunk.linters.trivy.trivy_fs_secret_to_sarif",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.trivy.trivy_fs_secret_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trivy.trivy_fs_secret_to_sarif",
        "peekOfCode": "def main(argv):\n    trivy_json = json.load(sys.stdin)\n    results = []\n    for result in trivy_json.get(\"Results\", []):\n        path = trivy_json[\"ArtifactName\"]\n        for secret in result.get(\"Secrets\", []):\n            code = secret[\"RuleID\"]\n            description = secret[\"Title\"]\n            lineno = secret.get(\"StartLine\", 0)\n            results.append(",
        "detail": ".trunk.plugins.trunk.linters.trivy.trivy_fs_secret_to_sarif",
        "documentation": {}
    },
    {
        "label": "SARIF_SEVERITY_BY_OSV_SEVERITY",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.trivy.trivy_fs_secret_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trivy.trivy_fs_secret_to_sarif",
        "peekOfCode": "SARIF_SEVERITY_BY_OSV_SEVERITY = {\n    \"CRITICAL\": \"error\",\n    \"HIGH\": \"error\",\n    \"MODERATE\": \"warning\",\n    \"MEDIUM\": \"warning\",\n    \"LOW\": \"note\",\n}\nDEFAULT_SARIF_SEVERITY = \"error\"\ndef get_sarif_severity(secret) -> str:\n    \"\"\"Get the SARIF severity appropriate for a given OSV vulnerability entry.\"\"\"",
        "detail": ".trunk.plugins.trunk.linters.trivy.trivy_fs_secret_to_sarif",
        "documentation": {}
    },
    {
        "label": "DEFAULT_SARIF_SEVERITY",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.trivy.trivy_fs_secret_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trivy.trivy_fs_secret_to_sarif",
        "peekOfCode": "DEFAULT_SARIF_SEVERITY = \"error\"\ndef get_sarif_severity(secret) -> str:\n    \"\"\"Get the SARIF severity appropriate for a given OSV vulnerability entry.\"\"\"\n    if \"Severity\" not in secret:\n        return DEFAULT_SARIF_SEVERITY\n    severity = secret[\"Severity\"].upper()\n    return SARIF_SEVERITY_BY_OSV_SEVERITY.get(severity, DEFAULT_SARIF_SEVERITY)\ndef to_result_sarif(path: str, severity: str, code: str, description: str, lineno: int):\n    return {\n        \"level\": severity,",
        "detail": ".trunk.plugins.trunk.linters.trivy.trivy_fs_secret_to_sarif",
        "documentation": {}
    },
    {
        "label": "get_sarif_severity",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.trivy.trivy_fs_vuln_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trivy.trivy_fs_vuln_to_sarif",
        "peekOfCode": "def get_sarif_severity(vuln) -> str:\n    \"\"\"Get the SARIF severity appropriate for a given OSV vulnerability entry.\"\"\"\n    if \"Severity\" not in vuln:\n        return DEFAULT_SARIF_SEVERITY\n    severity = vuln[\"Severity\"].upper()\n    return SARIF_SEVERITY_BY_OSV_SEVERITY.get(severity, DEFAULT_SARIF_SEVERITY)\ndef to_result_sarif(\n    path: str, severity: str, vuln_id: str, description: str, lineno: int\n):\n    return {",
        "detail": ".trunk.plugins.trunk.linters.trivy.trivy_fs_vuln_to_sarif",
        "documentation": {}
    },
    {
        "label": "to_result_sarif",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.trivy.trivy_fs_vuln_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trivy.trivy_fs_vuln_to_sarif",
        "peekOfCode": "def to_result_sarif(\n    path: str, severity: str, vuln_id: str, description: str, lineno: int\n):\n    return {\n        \"level\": severity,\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": path,",
        "detail": ".trunk.plugins.trunk.linters.trivy.trivy_fs_vuln_to_sarif",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.trivy.trivy_fs_vuln_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trivy.trivy_fs_vuln_to_sarif",
        "peekOfCode": "def main(argv):\n    trivy_json = json.load(sys.stdin)\n    results = []\n    lockfiles = {}\n    for result in trivy_json.get(\"Results\", []):\n        for vuln in result.get(\"Vulnerabilities\", []):\n            pkg_name = vuln[\"PkgName\"]\n            path = trivy_json[\"ArtifactName\"]\n            vuln_id = vuln[\"VulnerabilityID\"]\n            description = vuln[\"Title\"]",
        "detail": ".trunk.plugins.trunk.linters.trivy.trivy_fs_vuln_to_sarif",
        "documentation": {}
    },
    {
        "label": "SARIF_SEVERITY_BY_OSV_SEVERITY",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.trivy.trivy_fs_vuln_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trivy.trivy_fs_vuln_to_sarif",
        "peekOfCode": "SARIF_SEVERITY_BY_OSV_SEVERITY = {\n    \"CRITICAL\": \"error\",\n    \"HIGH\": \"error\",\n    \"MODERATE\": \"warning\",\n    \"MEDIUM\": \"warning\",\n    \"LOW\": \"note\",\n}\nDEFAULT_SARIF_SEVERITY = \"error\"\ndef get_sarif_severity(vuln) -> str:\n    \"\"\"Get the SARIF severity appropriate for a given OSV vulnerability entry.\"\"\"",
        "detail": ".trunk.plugins.trunk.linters.trivy.trivy_fs_vuln_to_sarif",
        "documentation": {}
    },
    {
        "label": "DEFAULT_SARIF_SEVERITY",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.trivy.trivy_fs_vuln_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trivy.trivy_fs_vuln_to_sarif",
        "peekOfCode": "DEFAULT_SARIF_SEVERITY = \"error\"\ndef get_sarif_severity(vuln) -> str:\n    \"\"\"Get the SARIF severity appropriate for a given OSV vulnerability entry.\"\"\"\n    if \"Severity\" not in vuln:\n        return DEFAULT_SARIF_SEVERITY\n    severity = vuln[\"Severity\"].upper()\n    return SARIF_SEVERITY_BY_OSV_SEVERITY.get(severity, DEFAULT_SARIF_SEVERITY)\ndef to_result_sarif(\n    path: str, severity: str, vuln_id: str, description: str, lineno: int\n):",
        "detail": ".trunk.plugins.trunk.linters.trivy.trivy_fs_vuln_to_sarif",
        "documentation": {}
    },
    {
        "label": "aws_access_key_id",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "description": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "peekOfCode": "aws_access_key_id = \"AKIAXYZDQCEN4EXAMPLE\"\naws_secret_access_key = \"Tg0pz8Jii8hkLx4+PnUisM8GmKs3a2DK+EXAMPLE\"\n# The below keys are copied from https://github.com/dustin-decker/secretsandstuff\ngithub_secret = \"369963c1434c377428ca8531fbc46c0c43d037a0\"\nbasic_auth = \"https://admin:admin@the-internet.herokuapp.com/basic_auth\"\npriv_key = '''\n-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jdHIAAAAGYmNyeXB0AAAAGAAAABAjNIZuun\nxgLkM8KuzfmQuRAAAAEAAAAAEAAAGXAAAAB3NzaC1yc2EAAAADAQABAAABgQDe3Al0EMPz\nutVNk5DixaYrGMK56RqUoqGBinke6SWVWmqom1lBcJWzor6HlnMRPPr7YCEsJKL4IpuVwu",
        "detail": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "documentation": {}
    },
    {
        "label": "aws_secret_access_key",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "description": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "peekOfCode": "aws_secret_access_key = \"Tg0pz8Jii8hkLx4+PnUisM8GmKs3a2DK+EXAMPLE\"\n# The below keys are copied from https://github.com/dustin-decker/secretsandstuff\ngithub_secret = \"369963c1434c377428ca8531fbc46c0c43d037a0\"\nbasic_auth = \"https://admin:admin@the-internet.herokuapp.com/basic_auth\"\npriv_key = '''\n-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jdHIAAAAGYmNyeXB0AAAAGAAAABAjNIZuun\nxgLkM8KuzfmQuRAAAAEAAAAAEAAAGXAAAAB3NzaC1yc2EAAAADAQABAAABgQDe3Al0EMPz\nutVNk5DixaYrGMK56RqUoqGBinke6SWVWmqom1lBcJWzor6HlnMRPPr7YCEsJKL4IpuVwu\ninRa5kdtNTyM7yyQTSR2xXCS0fUItNuq8pUktsH8VUggpMeew8hJv7rFA7tnIg3UXCl6iF",
        "detail": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "documentation": {}
    },
    {
        "label": "github_secret",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "description": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "peekOfCode": "github_secret = \"369963c1434c377428ca8531fbc46c0c43d037a0\"\nbasic_auth = \"https://admin:admin@the-internet.herokuapp.com/basic_auth\"\npriv_key = '''\n-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jdHIAAAAGYmNyeXB0AAAAGAAAABAjNIZuun\nxgLkM8KuzfmQuRAAAAEAAAAAEAAAGXAAAAB3NzaC1yc2EAAAADAQABAAABgQDe3Al0EMPz\nutVNk5DixaYrGMK56RqUoqGBinke6SWVWmqom1lBcJWzor6HlnMRPPr7YCEsJKL4IpuVwu\ninRa5kdtNTyM7yyQTSR2xXCS0fUItNuq8pUktsH8VUggpMeew8hJv7rFA7tnIg3UXCl6iF\nOLZKbDA5aa24idpcD8b1I9/RzTOB1fu0of5xd9vgODzGw5JvHQSJ0FaA42aNBMGwrDhDB3\nsgnRNdWf6NNIh8KpXXMKJADf3klsyn6He8L2bPMp8a4wwys2YB35p5zQ0JURovsdewlOxH",
        "detail": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "documentation": {}
    },
    {
        "label": "basic_auth",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "description": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "peekOfCode": "basic_auth = \"https://admin:admin@the-internet.herokuapp.com/basic_auth\"\npriv_key = '''\n-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jdHIAAAAGYmNyeXB0AAAAGAAAABAjNIZuun\nxgLkM8KuzfmQuRAAAAEAAAAAEAAAGXAAAAB3NzaC1yc2EAAAADAQABAAABgQDe3Al0EMPz\nutVNk5DixaYrGMK56RqUoqGBinke6SWVWmqom1lBcJWzor6HlnMRPPr7YCEsJKL4IpuVwu\ninRa5kdtNTyM7yyQTSR2xXCS0fUItNuq8pUktsH8VUggpMeew8hJv7rFA7tnIg3UXCl6iF\nOLZKbDA5aa24idpcD8b1I9/RzTOB1fu0of5xd9vgODzGw5JvHQSJ0FaA42aNBMGwrDhDB3\nsgnRNdWf6NNIh8KpXXMKJADf3klsyn6He8L2bPMp8a4wwys2YB35p5zQ0JURovsdewlOxH\nNT7eP19eVf4dCreibxUmRUaob5DEoHEk8WrxjKWIYUuLeD6AfcW6oXyRU2Yy8Vrt6SqFl5",
        "detail": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "documentation": {}
    },
    {
        "label": "priv_key",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "description": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "peekOfCode": "priv_key = '''\n-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jdHIAAAAGYmNyeXB0AAAAGAAAABAjNIZuun\nxgLkM8KuzfmQuRAAAAEAAAAAEAAAGXAAAAB3NzaC1yc2EAAAADAQABAAABgQDe3Al0EMPz\nutVNk5DixaYrGMK56RqUoqGBinke6SWVWmqom1lBcJWzor6HlnMRPPr7YCEsJKL4IpuVwu\ninRa5kdtNTyM7yyQTSR2xXCS0fUItNuq8pUktsH8VUggpMeew8hJv7rFA7tnIg3UXCl6iF\nOLZKbDA5aa24idpcD8b1I9/RzTOB1fu0of5xd9vgODzGw5JvHQSJ0FaA42aNBMGwrDhDB3\nsgnRNdWf6NNIh8KpXXMKJADf3klsyn6He8L2bPMp8a4wwys2YB35p5zQ0JURovsdewlOxH\nNT7eP19eVf4dCreibxUmRUaob5DEoHEk8WrxjKWIYUuLeD6AfcW6oXyRU2Yy8Vrt6SqFl5\nWAi47VMFTkDZYS/eCvG53q9UBHpCj7Qvb0vSkCZXBvBIhlw193F3PX4WvO1IXsMwvQ1D1X",
        "detail": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "documentation": {}
    },
    {
        "label": "to_result_sarif",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "peekOfCode": "def to_result_sarif(path: str, line_number: int, vuln_id: str, description: str):\n    return {\n        \"level\": \"error\",\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": path,\n                    },\n                    \"region\": {",
        "detail": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "documentation": {}
    },
    {
        "label": "sliding_window",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "peekOfCode": "def sliding_window(iterable, n):\n    # sliding_window('ABCDEFG', 4) --> ABCD BCDE CDEF DEFG\n    it = iter(iterable)\n    window = collections.deque(islice(it, n - 1), maxlen=n)\n    for x in it:\n        window.append(x)\n        yield tuple(window)\nsecret_lineno_cache = {}\nfile_cache = {}\ndef find_line_number(secret, path):",
        "detail": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "documentation": {}
    },
    {
        "label": "find_line_number",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "peekOfCode": "def find_line_number(secret, path):\n    if path not in file_cache:\n        file_cache[path] = open(path).readlines()\n    if secret not in secret_lineno_cache:\n        secret_lineno_cache[secret] = []\n    secret_length = len(secret.splitlines())\n    lines = file_cache[path]\n    for lineno, window in enumerate(sliding_window(lines, secret_length), 1):\n        # trufflehog can report the same secret multiple times\n        # if it truly appears multiple times, then we want to log different lines for each issue",
        "detail": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "peekOfCode": "def main(argv):\n    results = []\n    for line in sys.stdin.readlines():\n        vuln_json = json.loads(line)\n        # trufflehog doesn't have vuln IDs\n        # this is the name of the detector that found the error (e.g. AWS, Github, PrivateKey)\n        vuln_id = vuln_json[\"DetectorName\"]\n        # There also isn't description of the error aside from the raw secret, the redacted secret,\n        # and the detector that found it.\n        #",
        "detail": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "documentation": {}
    },
    {
        "label": "secret_lineno_cache",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "peekOfCode": "secret_lineno_cache = {}\nfile_cache = {}\ndef find_line_number(secret, path):\n    if path not in file_cache:\n        file_cache[path] = open(path).readlines()\n    if secret not in secret_lineno_cache:\n        secret_lineno_cache[secret] = []\n    secret_length = len(secret.splitlines())\n    lines = file_cache[path]\n    for lineno, window in enumerate(sliding_window(lines, secret_length), 1):",
        "detail": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "documentation": {}
    },
    {
        "label": "file_cache",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "peekOfCode": "file_cache = {}\ndef find_line_number(secret, path):\n    if path not in file_cache:\n        file_cache[path] = open(path).readlines()\n    if secret not in secret_lineno_cache:\n        secret_lineno_cache[secret] = []\n    secret_length = len(secret.splitlines())\n    lines = file_cache[path]\n    for lineno, window in enumerate(sliding_window(lines, secret_length), 1):\n        # trufflehog can report the same secret multiple times",
        "detail": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "documentation": {}
    },
    {
        "label": "NoDocstring",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.yapf.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.yapf.test_data.basic.in",
        "peekOfCode": "class NoDocstring(object):\n    def __init__(self, arg1):\n        self._attr1 = arg1\nclass Globe(object):\n    def __init__(self):\n        self.shape = 'spheroid'\n#whitespace below vvv\n  #A malindented comment\nif __name__ == \"__main__\" :\n      a=4+1",
        "detail": ".trunk.plugins.trunk.linters.yapf.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "Globe",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.yapf.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.yapf.test_data.basic.in",
        "peekOfCode": "class Globe(object):\n    def __init__(self):\n        self.shape = 'spheroid'\n#whitespace below vvv\n  #A malindented comment\nif __name__ == \"__main__\" :\n      a=4+1\n      b=( 2*7 )\n      c = [1,\n           2,",
        "detail": ".trunk.plugins.trunk.linters.yapf.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.yapf.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.yapf.test_data.basic.in",
        "peekOfCode": "def main():\n    try:\n        pass\n    except (Exception, TypeError):\n        pass\nimport sys\n# trunk-ignore(flake8/F401): this will trigger a warning to verify that the config is applied\nclass NoDocstring(object):\n    def __init__(self, arg1):\n        self._attr1 = arg1",
        "detail": ".trunk.plugins.trunk.linters.yapf.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "codemySqlitecourse.database-Bearded-Daddy",
        "description": "codemySqlitecourse.database-Bearded-Daddy",
        "peekOfCode": "conn = sqlite3.connect(\"customer.db\")\n# Create a cursor.\nc = conn.cursor()\n# Create a Table for customer.\n# c.execute(\"\"\"CREATE TABLE customers (\n#         first_name TEXT,\n#         last _name TEXT,\n#         email TEXT\n#    ) \"\"\")\n# print(\"Command executed successfully\")",
        "detail": "codemySqlitecourse.database-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "codemySqlitecourse.database-Bearded-Daddy",
        "description": "codemySqlitecourse.database-Bearded-Daddy",
        "peekOfCode": "c = conn.cursor()\n# Create a Table for customer.\n# c.execute(\"\"\"CREATE TABLE customers (\n#         first_name TEXT,\n#         last _name TEXT,\n#         email TEXT\n#    ) \"\"\")\n# print(\"Command executed successfully\")\n# many_customers = [\n#     ('Mia', 'Marcelin', 'mia@gmail.com'),",
        "detail": "codemySqlitecourse.database-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "items",
        "kind": 5,
        "importPath": "codemySqlitecourse.database-Bearded-Daddy",
        "description": "codemySqlitecourse.database-Bearded-Daddy",
        "peekOfCode": "items = c.fetchall()\nprint(\"NAME \" + \"\\t\\tEMAIL\")\nprint(\"------\" + \"\\t\\t--------\")\nfor item in items:\n    print(item[0] + \" | \" + item[1] + \" | \" + item[2])\n# print(\"Command executed successfully\")\n# The five DATATYPES below are\n# NULL [NO CHAR]\n# INTEGER [A NUMBER INT]\n# REAL [A NUMBER WITH A DECIMAL]",
        "detail": "codemySqlitecourse.database-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "codemySqlitecourse.database",
        "description": "codemySqlitecourse.database",
        "peekOfCode": "conn = sqlite3.connect(\"customer.db\")\n# Create a cursor.\nc = conn.cursor()\n# Create a Table for customer.\n##c.execute(\"\"\"CREATE TABLE customers (\n##         first_name TEXT,\n##         last _name TEXT,\n##         email TEXT\n##    ) \"\"\")\nmany_customers = [",
        "detail": "codemySqlitecourse.database",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "codemySqlitecourse.database",
        "description": "codemySqlitecourse.database",
        "peekOfCode": "c = conn.cursor()\n# Create a Table for customer.\n##c.execute(\"\"\"CREATE TABLE customers (\n##         first_name TEXT,\n##         last _name TEXT,\n##         email TEXT\n##    ) \"\"\")\nmany_customers = [\n    ('Mia', 'Marcelin', 'mia@gmail.com'),\n   ('Brittany', 'Johnson', 'brittany@gmail.com'),",
        "detail": "codemySqlitecourse.database",
        "documentation": {}
    },
    {
        "label": "many_customers",
        "kind": 5,
        "importPath": "codemySqlitecourse.database",
        "description": "codemySqlitecourse.database",
        "peekOfCode": "many_customers = [\n    ('Mia', 'Marcelin', 'mia@gmail.com'),\n   ('Brittany', 'Johnson', 'brittany@gmail.com'),\n   ('Jennifer', 'Smith', 'jennifer@gmail.com'),\n]\nc.executemany(\"INSERT INTO customers VALUES(?,?,?)\",many_customers)\n# Query the database\nc.execute(\"SELECT * FROM customers WHERE first_name LIKE 'M%' \")\nitems = c.fetchall()\nfor item in items:",
        "detail": "codemySqlitecourse.database",
        "documentation": {}
    },
    {
        "label": "items",
        "kind": 5,
        "importPath": "codemySqlitecourse.database",
        "description": "codemySqlitecourse.database",
        "peekOfCode": "items = c.fetchall()\nfor item in items:\n    print(item)\n# print(c.fetchone()) #This one will fetch the first item in the table.\n# print(c.fetchmany(3)) #This one will fetch the number you enter in the paratheses.\n#print(C.fetchall()) #This one will fetch all of them.  \n#print(c.fetchall())\n#print(\"Command executed successfully\")\n# The five DATATYPES below are\n# NULL [NO CHAR]",
        "detail": "codemySqlitecourse.database",
        "documentation": {}
    },
    {
        "label": "factorial",
        "kind": 2,
        "importPath": "ExceptionHanding.examples",
        "description": "ExceptionHanding.examples",
        "peekOfCode": "def factorial(n):\n    # n! can also be defined as n * (n-1)!\n    \"\"\" calculates n! recursively\"\"\"\n    if n <= 1:\n        return 1\n    else:\n        return n * factorial(n-1)\ntry:\n    print(factorial(900))\nexcept (RecursionError, ZeroDivisionError, OverflowError):",
        "detail": "ExceptionHanding.examples",
        "documentation": {}
    },
    {
        "label": "test_text",
        "kind": 5,
        "importPath": "ExceptionHanding.exception_challenge",
        "description": "ExceptionHanding.exception_challenge",
        "peekOfCode": "test_text = input(\"Enter a number: \")\ntest_number = int(test_text)\nprint(\"The number you entered is:\",test_number)",
        "detail": "ExceptionHanding.exception_challenge",
        "documentation": {}
    },
    {
        "label": "test_number",
        "kind": 5,
        "importPath": "ExceptionHanding.exception_challenge",
        "description": "ExceptionHanding.exception_challenge",
        "peekOfCode": "test_number = int(test_text)\nprint(\"The number you entered is:\",test_number)",
        "detail": "ExceptionHanding.exception_challenge",
        "documentation": {}
    },
    {
        "label": "getint",
        "kind": 2,
        "importPath": "ExceptionHanding.get_ints",
        "description": "ExceptionHanding.get_ints",
        "peekOfCode": "def getint(prompt):\n    while True:\n        try:\n            number = int(input(prompt))\n# if a valid number is entered in line 7 the code is just going to continue\n# and the number will just be returned. #noqa\n            return number\n        except EOFError:  # You should really use except ValueError.\n            # If an invalid input is entered a ValueError except will be\n            # raised. #noqa",
        "detail": "ExceptionHanding.get_ints",
        "documentation": {}
    },
    {
        "label": "first_number",
        "kind": 5,
        "importPath": "ExceptionHanding.get_ints",
        "description": "ExceptionHanding.get_ints",
        "peekOfCode": "first_number = getint(\"Please enter first number \")\nsecond_number = getint(\"Please enter second number \")\n# the code below is a try block that will catch a ZeroDivisionError if you try to divide by zero.  # noqa\ntry:\n    print(\"{} divided by {} is {}\".format(first_number, second_number,  # On\n                                          # this line we are using replacement fields.  # noqa\n                                          # This .format has three parameters inside the parentheis.  # noqa\n                                          first_number / second_number))\nexcept ZeroDivisionError:\n    print()",
        "detail": "ExceptionHanding.get_ints",
        "documentation": {}
    },
    {
        "label": "second_number",
        "kind": 5,
        "importPath": "ExceptionHanding.get_ints",
        "description": "ExceptionHanding.get_ints",
        "peekOfCode": "second_number = getint(\"Please enter second number \")\n# the code below is a try block that will catch a ZeroDivisionError if you try to divide by zero.  # noqa\ntry:\n    print(\"{} divided by {} is {}\".format(first_number, second_number,  # On\n                                          # this line we are using replacement fields.  # noqa\n                                          # This .format has three parameters inside the parentheis.  # noqa\n                                          first_number / second_number))\nexcept ZeroDivisionError:\n    print()\n    print(\"You can't divide by zero\")",
        "detail": "ExceptionHanding.get_ints",
        "documentation": {}
    },
    {
        "label": "Wing",
        "kind": 6,
        "importPath": "Games.ducks",
        "description": "Games.ducks",
        "peekOfCode": "class Wing(object):\n    def __init__(self, ratio):\n        self.ratio = ratio\n    def fly(self):\n        if self.ratio > 1:\n            print(\"Wee, this is fun.\")\n        elif self.ratio == 1:\n            print(\"This is hard work, but I'm flying.\")\n        else:\n            print(\"I think I'll just walk.\")",
        "detail": "Games.ducks",
        "documentation": {}
    },
    {
        "label": "Duck",
        "kind": 6,
        "importPath": "Games.ducks",
        "description": "Games.ducks",
        "peekOfCode": "class Duck(object):\n    def __init__(self):\n        self._wing = Wing(1.8)\n    def walk(self):\n        print(\"Waddle, waddle, waddle\")\n    def swim(self):\n        print(\"Come on in, the water's lovely\")\n    def quack(self):\n        print(\"Quack quack\")\n    def fly(self):",
        "detail": "Games.ducks",
        "documentation": {}
    },
    {
        "label": "Penguin",
        "kind": 6,
        "importPath": "Games.ducks",
        "description": "Games.ducks",
        "peekOfCode": "class Penguin(object):\n    def __init__(self):\n        self.fly = self.aviate\n    def walk(self):\n        print(\"Waddle, waddle, I waddle too\")\n    def swim(self):\n        print(\"Come on in, but it's a bit chilly this far South\")\n    def quack(self):\n        print(\"Are you having a laugh? I'm a penguin!\")\n    def aviate(self):",
        "detail": "Games.ducks",
        "documentation": {}
    },
    {
        "label": "Mallard",
        "kind": 6,
        "importPath": "Games.ducks",
        "description": "Games.ducks",
        "peekOfCode": "class Mallard(Duck):\n    pass\nclass Flock(object):\n    def __init__(self):\n        self.flock = []\n# In the following we added hints to the add_duck method. The hints lets\n# anyone using the add_duck module understands what they should be providing\n# to the method.  We added annonation Inside the paratheses of the method we\n# added a parameter, duck.\n    def add_duck(self, duck: Duck) -> None:",
        "detail": "Games.ducks",
        "documentation": {}
    },
    {
        "label": "Flock",
        "kind": 6,
        "importPath": "Games.ducks",
        "description": "Games.ducks",
        "peekOfCode": "class Flock(object):\n    def __init__(self):\n        self.flock = []\n# In the following we added hints to the add_duck method. The hints lets\n# anyone using the add_duck module understands what they should be providing\n# to the method.  We added annonation Inside the paratheses of the method we\n# added a parameter, duck.\n    def add_duck(self, duck: Duck) -> None:\n        fly_method = getattr(duck, 'fly', None)\n        if callable(fly_method):",
        "detail": "Games.ducks",
        "documentation": {}
    },
    {
        "label": "Enemy",
        "kind": 6,
        "importPath": "Games.enemy",
        "description": "Games.enemy",
        "peekOfCode": "class Enemy:\n    def __init__(self, name=\"Enemy\", hit_points=0, lives=1):\n        self._name = name\n        self._hit_points = hit_points\n        self._lives = lives\n        self._alive = True\n    def take_damage(self, damage):\n        remaining_points = self._hit_points - damage\n        if remaining_points >= 0:\n            self._hit_points = remaining_points",
        "detail": "Games.enemy",
        "documentation": {}
    },
    {
        "label": "Troll",
        "kind": 6,
        "importPath": "Games.enemy",
        "description": "Games.enemy",
        "peekOfCode": "class Troll(Enemy):\n    def __init__(self, name):\n        #  super(Troll, self).__init__(name = name, lives = 1, hit_points = 23)\n        super().__init__(name=name, lives=1, hit_points=23)\n    def grunt(self):\n        print(\"Me {0._name}, {0._name}, stomp you\".format(self))\nclass Vampyre(Enemy):\n    def __init__(self, name):\n        super().__init__(name=name, lives=3, hit_points=12)\n    def dodges(self):",
        "detail": "Games.enemy",
        "documentation": {}
    },
    {
        "label": "Vampyre",
        "kind": 6,
        "importPath": "Games.enemy",
        "description": "Games.enemy",
        "peekOfCode": "class Vampyre(Enemy):\n    def __init__(self, name):\n        super().__init__(name=name, lives=3, hit_points=12)\n    def dodges(self):\n        if random.randint(1, 3) == 3:\n            print(\"***** {0._name} dodges *****\".format(self))\n            return True\n        else:\n            return False\n    def take_damage(self, damage):",
        "detail": "Games.enemy",
        "documentation": {}
    },
    {
        "label": "VampyreKing",
        "kind": 6,
        "importPath": "Games.enemy",
        "description": "Games.enemy",
        "peekOfCode": "class VampyreKing(Vampyre):\n    def __init__(self, name):\n        super().__init__(name)\n        self._hit_points = 140\n    # A VampyreKing is going to be incredibly powerful, and any points of\n    # damage inflicted will be divided by 4.\n    # todo I need to create a damage inflicted function that when attacking\n    # will divide by 4.\n    # VampyreKing objects will also start off with 140 hit points and only\n    # takes a quarter of the damage inflicted.",
        "detail": "Games.enemy",
        "documentation": {}
    },
    {
        "label": "Tag",
        "kind": 6,
        "importPath": "Games.html_duck",
        "description": "Games.html_duck",
        "peekOfCode": "class Tag(object):\n    def __init__(self, name, contents):\n        self.start_tag = '<()>'.format(name)\n        self.end_tag = '</()>'.format(name)\n        self.contents = contents\n    def __str__(self):\n        return \"{0.start_tag}{0.contents}{0.end_tag}\".format(self)\n    def display(self, file=None):\n        print(self, file=file)\nclass DocType(Tag):",
        "detail": "Games.html_duck",
        "documentation": {}
    },
    {
        "label": "DocType",
        "kind": 6,
        "importPath": "Games.html_duck",
        "description": "Games.html_duck",
        "peekOfCode": "class DocType(Tag):\n    def __init__(self):\n        super().__init__('!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" http://www.w3.org/TR/html4/strict.dtd', '')\n        self.end_tag = ''   # DOCTYPE doesn't have an end tag\nclass Head(Tag):\n    def __init__(self, title=None):\n        super().__init__('head', '')\n        if title:\n            self._title_tag = Tag('title', title)\n            self.contents = str(self._title_tag)",
        "detail": "Games.html_duck",
        "documentation": {}
    },
    {
        "label": "Head",
        "kind": 6,
        "importPath": "Games.html_duck",
        "description": "Games.html_duck",
        "peekOfCode": "class Head(Tag):\n    def __init__(self, title=None):\n        super().__init__('head', '')\n        if title:\n            self._title_tag = Tag('title', title)\n            self.contents = str(self._title_tag)\nclass Body(Tag):\n    def __init__(self):\n        super().__init__('body', '')    # body contents will be built up separatly\n        self._body_contents = []",
        "detail": "Games.html_duck",
        "documentation": {}
    },
    {
        "label": "Body",
        "kind": 6,
        "importPath": "Games.html_duck",
        "description": "Games.html_duck",
        "peekOfCode": "class Body(Tag):\n    def __init__(self):\n        super().__init__('body', '')    # body contents will be built up separatly\n        self._body_contents = []\n    def add_tag(self, name, contents):\n        new_tag = Tag(name, contents)\n        self._body_contents.append(new_tag)\n    def display(self, file=None):\n        for tag in self._body_contents:\n            self.contents += str(tag)",
        "detail": "Games.html_duck",
        "documentation": {}
    },
    {
        "label": "HtmlDoc",
        "kind": 6,
        "importPath": "Games.html_duck",
        "description": "Games.html_duck",
        "peekOfCode": "class HtmlDoc(object):\n    def __init__(self, doc_type, head, body):\n        self._doc_type = doc_type\n        self._head = head\n        self._body = body\n    def add_tag(self, name, contents):\n        self._body.add_tag(name, contents)\n    def display(self, file=None):\n        self._doc_type.display(file=file)\n        print('<html>', file=file)",
        "detail": "Games.html_duck",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Games.main",
        "description": "Games.main",
        "peekOfCode": "a = 3\n# This is a string.\nb = \"grevy\"\n# This is a tuple.\nc = 1, 2, 3\nprint(a)\nprint(b)\nprint(c)",
        "detail": "Games.main",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Games.main",
        "description": "Games.main",
        "peekOfCode": "b = \"grevy\"\n# This is a tuple.\nc = 1, 2, 3\nprint(a)\nprint(b)\nprint(c)",
        "detail": "Games.main",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "Games.main",
        "description": "Games.main",
        "peekOfCode": "c = 1, 2, 3\nprint(a)\nprint(b)\nprint(c)",
        "detail": "Games.main",
        "documentation": {}
    },
    {
        "label": "flock",
        "kind": 5,
        "importPath": "Games.migration",
        "description": "Games.migration",
        "peekOfCode": "flock = ducks.Flock()\ndonald = ducks.Duck()\ndaisy = ducks.Duck()\nduck3 = ducks.Duck()\nduck4 = ducks.Duck()\nduck5 = ducks.Duck()\nduck6 = ducks.Duck()\nduck7 = ducks.Duck()\npercy = ducks.Penguin()\nflock.add_duck(donald)",
        "detail": "Games.migration",
        "documentation": {}
    },
    {
        "label": "donald",
        "kind": 5,
        "importPath": "Games.migration",
        "description": "Games.migration",
        "peekOfCode": "donald = ducks.Duck()\ndaisy = ducks.Duck()\nduck3 = ducks.Duck()\nduck4 = ducks.Duck()\nduck5 = ducks.Duck()\nduck6 = ducks.Duck()\nduck7 = ducks.Duck()\npercy = ducks.Penguin()\nflock.add_duck(donald)\nflock.add_duck(daisy)",
        "detail": "Games.migration",
        "documentation": {}
    },
    {
        "label": "daisy",
        "kind": 5,
        "importPath": "Games.migration",
        "description": "Games.migration",
        "peekOfCode": "daisy = ducks.Duck()\nduck3 = ducks.Duck()\nduck4 = ducks.Duck()\nduck5 = ducks.Duck()\nduck6 = ducks.Duck()\nduck7 = ducks.Duck()\npercy = ducks.Penguin()\nflock.add_duck(donald)\nflock.add_duck(daisy)\nflock.add_duck(duck3)",
        "detail": "Games.migration",
        "documentation": {}
    },
    {
        "label": "duck3",
        "kind": 5,
        "importPath": "Games.migration",
        "description": "Games.migration",
        "peekOfCode": "duck3 = ducks.Duck()\nduck4 = ducks.Duck()\nduck5 = ducks.Duck()\nduck6 = ducks.Duck()\nduck7 = ducks.Duck()\npercy = ducks.Penguin()\nflock.add_duck(donald)\nflock.add_duck(daisy)\nflock.add_duck(duck3)\nflock.add_duck(duck4)",
        "detail": "Games.migration",
        "documentation": {}
    },
    {
        "label": "duck4",
        "kind": 5,
        "importPath": "Games.migration",
        "description": "Games.migration",
        "peekOfCode": "duck4 = ducks.Duck()\nduck5 = ducks.Duck()\nduck6 = ducks.Duck()\nduck7 = ducks.Duck()\npercy = ducks.Penguin()\nflock.add_duck(donald)\nflock.add_duck(daisy)\nflock.add_duck(duck3)\nflock.add_duck(duck4)\nflock.add_duck(percy)",
        "detail": "Games.migration",
        "documentation": {}
    },
    {
        "label": "duck5",
        "kind": 5,
        "importPath": "Games.migration",
        "description": "Games.migration",
        "peekOfCode": "duck5 = ducks.Duck()\nduck6 = ducks.Duck()\nduck7 = ducks.Duck()\npercy = ducks.Penguin()\nflock.add_duck(donald)\nflock.add_duck(daisy)\nflock.add_duck(duck3)\nflock.add_duck(duck4)\nflock.add_duck(percy)\nflock.add_duck(duck5)",
        "detail": "Games.migration",
        "documentation": {}
    },
    {
        "label": "duck6",
        "kind": 5,
        "importPath": "Games.migration",
        "description": "Games.migration",
        "peekOfCode": "duck6 = ducks.Duck()\nduck7 = ducks.Duck()\npercy = ducks.Penguin()\nflock.add_duck(donald)\nflock.add_duck(daisy)\nflock.add_duck(duck3)\nflock.add_duck(duck4)\nflock.add_duck(percy)\nflock.add_duck(duck5)\nflock.add_duck(duck6)",
        "detail": "Games.migration",
        "documentation": {}
    },
    {
        "label": "duck7",
        "kind": 5,
        "importPath": "Games.migration",
        "description": "Games.migration",
        "peekOfCode": "duck7 = ducks.Duck()\npercy = ducks.Penguin()\nflock.add_duck(donald)\nflock.add_duck(daisy)\nflock.add_duck(duck3)\nflock.add_duck(duck4)\nflock.add_duck(percy)\nflock.add_duck(duck5)\nflock.add_duck(duck6)\nflock.add_duck(duck7)",
        "detail": "Games.migration",
        "documentation": {}
    },
    {
        "label": "percy",
        "kind": 5,
        "importPath": "Games.migration",
        "description": "Games.migration",
        "peekOfCode": "percy = ducks.Penguin()\nflock.add_duck(donald)\nflock.add_duck(daisy)\nflock.add_duck(duck3)\nflock.add_duck(duck4)\nflock.add_duck(percy)\nflock.add_duck(duck5)\nflock.add_duck(duck6)\nflock.add_duck(duck7)\nflock.migrate()",
        "detail": "Games.migration",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "Games.player",
        "description": "Games.player",
        "peekOfCode": "class Player(object):\n    def __init__(self, name):\n        self.name = name\n        self._lives = 3\n        self._level = 1\n        self._score = 0\n    def _get_lives(self):\n        return self._lives\n    def _set_lives(self, lives):\n        if lives >= 0:",
        "detail": "Games.player",
        "documentation": {}
    },
    {
        "label": "Fruit",
        "kind": 6,
        "importPath": "Json Tutorial.py.__pycache__.preview.main",
        "description": "Json Tutorial.py.__pycache__.preview.main",
        "peekOfCode": "class Fruit:\n    def __init__(self, name: str, calories: float):\n        self.name = name\n        self.calories = calories\n    def describe_fruit(self):\n        print(self.name, self.calories, sep=': ')\nif __name__== '__main__':\n    fruit: Fruit = Fruit('Banana', 100)\n    fruit.describe_fruit()\n    fruit.calories = 150",
        "detail": "Json Tutorial.py.__pycache__.preview.main",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "MySQL.checkdb",
        "description": "MySQL.checkdb",
        "peekOfCode": "conn = sqlite3.connect(\"contacts.sqlite\")\nname = input(\"Please enter a name to search for? \")\nfor row in conn.execute(\"SELECT * FROM contacts WHERE name = ?\", (name,)):\n    print(row)\n# the name at the end in parathesis has comma with it to make it a tuple.\n# If you do not use a comma you will get a ProgrammingError:\n# Incorrect number of bindings supplied. The current statement uses 1, and there are 5 supplied.  # noqa\n# Also in that line you can use LIKE so that the query does not have to be case sensative.  # noqa\nconn.close()",
        "detail": "MySQL.checkdb",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "MySQL.checkdb",
        "description": "MySQL.checkdb",
        "peekOfCode": "name = input(\"Please enter a name to search for? \")\nfor row in conn.execute(\"SELECT * FROM contacts WHERE name = ?\", (name,)):\n    print(row)\n# the name at the end in parathesis has comma with it to make it a tuple.\n# If you do not use a comma you will get a ProgrammingError:\n# Incorrect number of bindings supplied. The current statement uses 1, and there are 5 supplied.  # noqa\n# Also in that line you can use LIKE so that the query does not have to be case sensative.  # noqa\nconn.close()",
        "detail": "MySQL.checkdb",
        "documentation": {}
    },
    {
        "label": "Employee",
        "kind": 6,
        "importPath": "MySQL.employee",
        "description": "MySQL.employee",
        "peekOfCode": "class Employee:\n    \"\"\"A sample Employee class\"\"\"\n    def __init__(self, first, last, pay):\n        self.first = first\n        self.last = last\n        self.pay = pay\n    @property\n    def email(self):\n        return '{}.{}@email.com'.format(self.first, self.last)\n    @property",
        "detail": "MySQL.employee",
        "documentation": {}
    },
    {
        "label": "create_connection",
        "kind": 2,
        "importPath": "MySQL.MySQL_Connection_Created",
        "description": "MySQL.MySQL_Connection_Created",
        "peekOfCode": "def create_connection(host_name, user_name, user_password):\n    connection = None\n    try:\n        connection = mysql.connector.connect(\n                host=host_name,\n                user=user_name,\n                passwd=user_password\n        )\n        print(\"Connection to MySQL DB successful\")\n    except Error as e:",
        "detail": "MySQL.MySQL_Connection_Created",
        "documentation": {}
    },
    {
        "label": "create_database",
        "kind": 2,
        "importPath": "MySQL.MySQL_Connection_Created",
        "description": "MySQL.MySQL_Connection_Created",
        "peekOfCode": "def create_database(connection, query):\n    cursor = connection.cursor()\n    try:\n        cursor.execute(query)\n        print(\"Database created successfully\")\n    except Error as e:\n        print(f\"The error '{e}' occurred\")",
        "detail": "MySQL.MySQL_Connection_Created",
        "documentation": {}
    },
    {
        "label": "connection",
        "kind": 5,
        "importPath": "MySQL.MySQL_Connection_Created",
        "description": "MySQL.MySQL_Connection_Created",
        "peekOfCode": "connection = create_connection(\"localhost\", \"root\", \"\")\ndef create_database(connection, query):\n    cursor = connection.cursor()\n    try:\n        cursor.execute(query)\n        print(\"Database created successfully\")\n    except Error as e:\n        print(f\"The error '{e}' occurred\")",
        "detail": "MySQL.MySQL_Connection_Created",
        "documentation": {}
    },
    {
        "label": "create_connection",
        "kind": 2,
        "importPath": "MySQL.Python_Sqlite",
        "description": "MySQL.Python_Sqlite",
        "peekOfCode": "def create_connection(path):\n    connection = None\n    try:\n        connection = sqlite3.connect(path)\n        print(\"Connection to SQLite DB successful\")\n    except Error as e:\n        print(f\"The error '{e}' occurred\")\n    return connection\nconnection = create_connection(\"E:\\\\sm_app.sqlite\")",
        "detail": "MySQL.Python_Sqlite",
        "documentation": {}
    },
    {
        "label": "connection",
        "kind": 5,
        "importPath": "MySQL.Python_Sqlite",
        "description": "MySQL.Python_Sqlite",
        "peekOfCode": "connection = create_connection(\"E:\\\\sm_app.sqlite\")",
        "detail": "MySQL.Python_Sqlite",
        "documentation": {}
    },
    {
        "label": "insert_emp",
        "kind": 2,
        "importPath": "MySQL.sqlite_demo",
        "description": "MySQL.sqlite_demo",
        "peekOfCode": "def insert_emp(emp):\n    with conn:\n        c.execute(\"INSERT INTO employees VALUES (:first, :last, :pay)\", \n          {'first': emp.first, 'last': emp.last, 'pay':emp.pay})\ndef get_emps_by_name(lastname):\n    c.execute(\"SELECT * FROM employees WHERE last = last\", {'lastname': lastname})\n    return c.fetchall()\ndef update_pay(emp, pay):\n    with conn:\n        c.execute(\"\"\"UPDATE employees SET pay = :pay",
        "detail": "MySQL.sqlite_demo",
        "documentation": {}
    },
    {
        "label": "get_emps_by_name",
        "kind": 2,
        "importPath": "MySQL.sqlite_demo",
        "description": "MySQL.sqlite_demo",
        "peekOfCode": "def get_emps_by_name(lastname):\n    c.execute(\"SELECT * FROM employees WHERE last = last\", {'lastname': lastname})\n    return c.fetchall()\ndef update_pay(emp, pay):\n    with conn:\n        c.execute(\"\"\"UPDATE employees SET pay = :pay\n                    WHERE first = :first AND last = :last\"\"\",\n                    {'first': emp.first, 'last': emp.last, 'pay': pay})\ndef remove_emp(emp):\n    with conn:",
        "detail": "MySQL.sqlite_demo",
        "documentation": {}
    },
    {
        "label": "update_pay",
        "kind": 2,
        "importPath": "MySQL.sqlite_demo",
        "description": "MySQL.sqlite_demo",
        "peekOfCode": "def update_pay(emp, pay):\n    with conn:\n        c.execute(\"\"\"UPDATE employees SET pay = :pay\n                    WHERE first = :first AND last = :last\"\"\",\n                    {'first': emp.first, 'last': emp.last, 'pay': pay})\ndef remove_emp(emp):\n    with conn:\n        c.execute(\"DELETE from employees WHERE first = :first AND last = :last\",\n                  {'first': emp.first, 'last': emp.last})\nemp_1 = Employee('David', 'Mann', 90000)",
        "detail": "MySQL.sqlite_demo",
        "documentation": {}
    },
    {
        "label": "remove_emp",
        "kind": 2,
        "importPath": "MySQL.sqlite_demo",
        "description": "MySQL.sqlite_demo",
        "peekOfCode": "def remove_emp(emp):\n    with conn:\n        c.execute(\"DELETE from employees WHERE first = :first AND last = :last\",\n                  {'first': emp.first, 'last': emp.last})\nemp_1 = Employee('David', 'Mann', 90000)\nemp_2 = Employee('Tamela', 'Mann', 80000)\ninsert_emp(emp_1)\ninsert_emp(emp_2)\nemps = get_emps_by_name('Mann')\nprint(emps)",
        "detail": "MySQL.sqlite_demo",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "MySQL.sqlite_demo",
        "description": "MySQL.sqlite_demo",
        "peekOfCode": "conn = sqlite3.connect(':memory:')\nc = conn.cursor()\nc.execute(\"\"\"CREATE TABLE employees (\n            first text,\n            last text,\n            pay integer\n            )\"\"\")\ndef insert_emp(emp):\n    with conn:\n        c.execute(\"INSERT INTO employees VALUES (:first, :last, :pay)\", ",
        "detail": "MySQL.sqlite_demo",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "MySQL.sqlite_demo",
        "description": "MySQL.sqlite_demo",
        "peekOfCode": "c = conn.cursor()\nc.execute(\"\"\"CREATE TABLE employees (\n            first text,\n            last text,\n            pay integer\n            )\"\"\")\ndef insert_emp(emp):\n    with conn:\n        c.execute(\"INSERT INTO employees VALUES (:first, :last, :pay)\", \n          {'first': emp.first, 'last': emp.last, 'pay':emp.pay})",
        "detail": "MySQL.sqlite_demo",
        "documentation": {}
    },
    {
        "label": "emp_1",
        "kind": 5,
        "importPath": "MySQL.sqlite_demo",
        "description": "MySQL.sqlite_demo",
        "peekOfCode": "emp_1 = Employee('David', 'Mann', 90000)\nemp_2 = Employee('Tamela', 'Mann', 80000)\ninsert_emp(emp_1)\ninsert_emp(emp_2)\nemps = get_emps_by_name('Mann')\nprint(emps)\nupdate_pay(emp_2, 95000)\nremove_emp(emp_1)\nemps = get_emps_by_name('Mann')\nprint(emps)",
        "detail": "MySQL.sqlite_demo",
        "documentation": {}
    },
    {
        "label": "emp_2",
        "kind": 5,
        "importPath": "MySQL.sqlite_demo",
        "description": "MySQL.sqlite_demo",
        "peekOfCode": "emp_2 = Employee('Tamela', 'Mann', 80000)\ninsert_emp(emp_1)\ninsert_emp(emp_2)\nemps = get_emps_by_name('Mann')\nprint(emps)\nupdate_pay(emp_2, 95000)\nremove_emp(emp_1)\nemps = get_emps_by_name('Mann')\nprint(emps)\nconn.close()",
        "detail": "MySQL.sqlite_demo",
        "documentation": {}
    },
    {
        "label": "emps",
        "kind": 5,
        "importPath": "MySQL.sqlite_demo",
        "description": "MySQL.sqlite_demo",
        "peekOfCode": "emps = get_emps_by_name('Mann')\nprint(emps)\nupdate_pay(emp_2, 95000)\nremove_emp(emp_1)\nemps = get_emps_by_name('Mann')\nprint(emps)\nconn.close()",
        "detail": "MySQL.sqlite_demo",
        "documentation": {}
    },
    {
        "label": "emps",
        "kind": 5,
        "importPath": "MySQL.sqlite_demo",
        "description": "MySQL.sqlite_demo",
        "peekOfCode": "emps = get_emps_by_name('Mann')\nprint(emps)\nconn.close()",
        "detail": "MySQL.sqlite_demo",
        "documentation": {}
    },
    {
        "label": "Account",
        "kind": 6,
        "importPath": "oop.accounts",
        "description": "oop.accounts",
        "peekOfCode": "class Account:\n    \"\"\" Simple account class with balance \"\"\"\n    @staticmethod\n    def _current_time():\n        utc_time = datetime.datetime.utcnow()\n        return pytz.utc.localize(utc_time)\n    \"\"\" This class creates a function for the account holders name and balance \"\"\"\n    def __init__(self, name, balance):\n        self._name = name\n        self.__balance = balance",
        "detail": "oop.accounts",
        "documentation": {}
    },
    {
        "label": "Kettle",
        "kind": 6,
        "importPath": "oop.builtins",
        "description": "oop.builtins",
        "peekOfCode": "class Kettle(object):\n    power_source = \"electricity\"\n    def __init__(self, make, price):\n        self.make = make\n        self.price = price\n        self.on = False\n    def switch_on(self):\n        self.on = True\nkenwood = Kettle(\"Kenwood\", 8.99)\nprint(kenwood.make)",
        "detail": "oop.builtins",
        "documentation": {}
    },
    {
        "label": "kenwood",
        "kind": 5,
        "importPath": "oop.builtins",
        "description": "oop.builtins",
        "peekOfCode": "kenwood = Kettle(\"Kenwood\", 8.99)\nprint(kenwood.make)\nprint(kenwood.price)\nkenwood.price = 12.75\nprint(kenwood.price)\nhamilton = Kettle(\"Hamilton\", 14.55)\nprint(\"Models: {} = {}, {} = {}\". format(kenwood.make, kenwood.price, hamilton.make, hamilton.price))\nprint(\"Models: {0.make} = {0.price}, {1.make} = {1.price}\".format(kenwood, hamilton))\nprint(hamilton.on)\nhamilton.switch_on()",
        "detail": "oop.builtins",
        "documentation": {}
    },
    {
        "label": "kenwood.price",
        "kind": 5,
        "importPath": "oop.builtins",
        "description": "oop.builtins",
        "peekOfCode": "kenwood.price = 12.75\nprint(kenwood.price)\nhamilton = Kettle(\"Hamilton\", 14.55)\nprint(\"Models: {} = {}, {} = {}\". format(kenwood.make, kenwood.price, hamilton.make, hamilton.price))\nprint(\"Models: {0.make} = {0.price}, {1.make} = {1.price}\".format(kenwood, hamilton))\nprint(hamilton.on)\nhamilton.switch_on()\nprint(hamilton.on)\nKettle.switch_on(kenwood)\nprint(kenwood.on)",
        "detail": "oop.builtins",
        "documentation": {}
    },
    {
        "label": "hamilton",
        "kind": 5,
        "importPath": "oop.builtins",
        "description": "oop.builtins",
        "peekOfCode": "hamilton = Kettle(\"Hamilton\", 14.55)\nprint(\"Models: {} = {}, {} = {}\". format(kenwood.make, kenwood.price, hamilton.make, hamilton.price))\nprint(\"Models: {0.make} = {0.price}, {1.make} = {1.price}\".format(kenwood, hamilton))\nprint(hamilton.on)\nhamilton.switch_on()\nprint(hamilton.on)\nKettle.switch_on(kenwood)\nprint(kenwood.on)\nkenwood.switch_on()\nprint(\"*\" * 80)",
        "detail": "oop.builtins",
        "documentation": {}
    },
    {
        "label": "kenwood.power",
        "kind": 5,
        "importPath": "oop.builtins",
        "description": "oop.builtins",
        "peekOfCode": "kenwood.power = 1.5\nprint(kenwood.power)\nhamilton.power = 2.4\nprint(hamilton.power)\nprint(\"Switch to atomic power\")\nKettle.power_source = \"atomic\"\nprint(Kettle.power_source)\nprint(\"Switch kenwood to gas\")\nkenwood.power_source = \"gas\"\nprint(kenwood.power_source)",
        "detail": "oop.builtins",
        "documentation": {}
    },
    {
        "label": "hamilton.power",
        "kind": 5,
        "importPath": "oop.builtins",
        "description": "oop.builtins",
        "peekOfCode": "hamilton.power = 2.4\nprint(hamilton.power)\nprint(\"Switch to atomic power\")\nKettle.power_source = \"atomic\"\nprint(Kettle.power_source)\nprint(\"Switch kenwood to gas\")\nkenwood.power_source = \"gas\"\nprint(kenwood.power_source)\nprint(hamilton.power_source)\nprint(Kettle.__dict__)",
        "detail": "oop.builtins",
        "documentation": {}
    },
    {
        "label": "Kettle.power_source",
        "kind": 5,
        "importPath": "oop.builtins",
        "description": "oop.builtins",
        "peekOfCode": "Kettle.power_source = \"atomic\"\nprint(Kettle.power_source)\nprint(\"Switch kenwood to gas\")\nkenwood.power_source = \"gas\"\nprint(kenwood.power_source)\nprint(hamilton.power_source)\nprint(Kettle.__dict__)\nprint(kenwood.__dict__)\nprint(hamilton.__dir__)",
        "detail": "oop.builtins",
        "documentation": {}
    },
    {
        "label": "kenwood.power_source",
        "kind": 5,
        "importPath": "oop.builtins",
        "description": "oop.builtins",
        "peekOfCode": "kenwood.power_source = \"gas\"\nprint(kenwood.power_source)\nprint(hamilton.power_source)\nprint(Kettle.__dict__)\nprint(kenwood.__dict__)\nprint(hamilton.__dir__)",
        "detail": "oop.builtins",
        "documentation": {}
    },
    {
        "label": "a_string",
        "kind": 5,
        "importPath": "oop.demo",
        "description": "oop.demo",
        "peekOfCode": "a_string = \"this a\\na string split\\t\\tand tabbed\"\nprint(a_string)\nraw_string = r\"this is\\na string split\\t\\tand tabbed\"\nprint(raw_string)\nb_string = \"this is\" + chr(10) + \"a string split\" + chr(9) + chr(9) + \"and tabbed\"\nprint(b_string)\nbackslash_string = \"this is a backlash \\followed by some text\"\nprint(backslash_string)\nbackslash_string = \"this is a backslash \\\\followed by some text\"\nprint(backslash_string)",
        "detail": "oop.demo",
        "documentation": {}
    },
    {
        "label": "raw_string",
        "kind": 5,
        "importPath": "oop.demo",
        "description": "oop.demo",
        "peekOfCode": "raw_string = r\"this is\\na string split\\t\\tand tabbed\"\nprint(raw_string)\nb_string = \"this is\" + chr(10) + \"a string split\" + chr(9) + chr(9) + \"and tabbed\"\nprint(b_string)\nbackslash_string = \"this is a backlash \\followed by some text\"\nprint(backslash_string)\nbackslash_string = \"this is a backslash \\\\followed by some text\"\nprint(backslash_string)\nerror_string = r\"this string ends with a \\\\\"",
        "detail": "oop.demo",
        "documentation": {}
    },
    {
        "label": "b_string",
        "kind": 5,
        "importPath": "oop.demo",
        "description": "oop.demo",
        "peekOfCode": "b_string = \"this is\" + chr(10) + \"a string split\" + chr(9) + chr(9) + \"and tabbed\"\nprint(b_string)\nbackslash_string = \"this is a backlash \\followed by some text\"\nprint(backslash_string)\nbackslash_string = \"this is a backslash \\\\followed by some text\"\nprint(backslash_string)\nerror_string = r\"this string ends with a \\\\\"",
        "detail": "oop.demo",
        "documentation": {}
    },
    {
        "label": "backslash_string",
        "kind": 5,
        "importPath": "oop.demo",
        "description": "oop.demo",
        "peekOfCode": "backslash_string = \"this is a backlash \\followed by some text\"\nprint(backslash_string)\nbackslash_string = \"this is a backslash \\\\followed by some text\"\nprint(backslash_string)\nerror_string = r\"this string ends with a \\\\\"",
        "detail": "oop.demo",
        "documentation": {}
    },
    {
        "label": "backslash_string",
        "kind": 5,
        "importPath": "oop.demo",
        "description": "oop.demo",
        "peekOfCode": "backslash_string = \"this is a backslash \\\\followed by some text\"\nprint(backslash_string)\nerror_string = r\"this string ends with a \\\\\"",
        "detail": "oop.demo",
        "documentation": {}
    },
    {
        "label": "error_string",
        "kind": 5,
        "importPath": "oop.demo",
        "description": "oop.demo",
        "peekOfCode": "error_string = r\"this string ends with a \\\\\"",
        "detail": "oop.demo",
        "documentation": {}
    },
    {
        "label": "grevy",
        "kind": 5,
        "importPath": "oop.main-Bearded-Daddy",
        "description": "oop.main-Bearded-Daddy",
        "peekOfCode": "grevy = Player(\"Grevy\")\nprint(grevy.name)\nprint(grevy.lives)\ngrevy.lives -= 1\nprint(grevy)\ngrevy.lives -= 1\nprint(grevy)\ngrevy.lives -= 1\nprint(grevy)\ngrevy.lives -= 1",
        "detail": "oop.main-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "grevy",
        "kind": 5,
        "importPath": "oop.main-LivingRoom-Computer",
        "description": "oop.main-LivingRoom-Computer",
        "peekOfCode": "grevy = Player(\"Grevy\")\nprint(grevy.name)\nprint(grevy.lives)\ngrevy.lives -= 1\nprint(grevy.lives)\n=======\ngrevy = Player(\"Grevy\")\nprint(grevy.name)\nprint(grevy.lives)\ngrevy.lives -= 1",
        "detail": "oop.main-LivingRoom-Computer",
        "documentation": {}
    },
    {
        "label": "grevy",
        "kind": 5,
        "importPath": "oop.main-LivingRoom-Computer",
        "description": "oop.main-LivingRoom-Computer",
        "peekOfCode": "grevy = Player(\"Grevy\")\nprint(grevy.name)\nprint(grevy.lives)\ngrevy.lives -= 1\nprint(grevy)\ngrevy.lives -= 1\nprint(grevy)\ngrevy.lives -= 1\nprint(grevy)\ngrevy.lives -= 1",
        "detail": "oop.main-LivingRoom-Computer",
        "documentation": {}
    },
    {
        "label": "Kettle",
        "kind": 6,
        "importPath": "oop.oop",
        "description": "oop.oop",
        "peekOfCode": "class Kettle(object):\n    def __init__(self, make, price):\n        self.make = make\n        self.price = price\n        self.on = False\nkenwood = Kettle(\"Kenwood\", 8.99)\nprint(kenwood.make)\nprint(kenwood.price)\nkenwood.price = 12.75\nprint(kenwood.price)",
        "detail": "oop.oop",
        "documentation": {}
    },
    {
        "label": "kenwood",
        "kind": 5,
        "importPath": "oop.oop",
        "description": "oop.oop",
        "peekOfCode": "kenwood = Kettle(\"Kenwood\", 8.99)\nprint(kenwood.make)\nprint(kenwood.price)\nkenwood.price = 12.75\nprint(kenwood.price)\nhamilton = Kettle(\"Hamilton\", 14.55)\nprint(\"Models: {} = {}, {} = {}\".format(kenwood.make, kenwood.price, hamilton.make, hamilton.price))",
        "detail": "oop.oop",
        "documentation": {}
    },
    {
        "label": "kenwood.price",
        "kind": 5,
        "importPath": "oop.oop",
        "description": "oop.oop",
        "peekOfCode": "kenwood.price = 12.75\nprint(kenwood.price)\nhamilton = Kettle(\"Hamilton\", 14.55)\nprint(\"Models: {} = {}, {} = {}\".format(kenwood.make, kenwood.price, hamilton.make, hamilton.price))",
        "detail": "oop.oop",
        "documentation": {}
    },
    {
        "label": "hamilton",
        "kind": 5,
        "importPath": "oop.oop",
        "description": "oop.oop",
        "peekOfCode": "hamilton = Kettle(\"Hamilton\", 14.55)\nprint(\"Models: {} = {}, {} = {}\".format(kenwood.make, kenwood.price, hamilton.make, hamilton.price))",
        "detail": "oop.oop",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "oop.player-Bearded-Daddy",
        "description": "oop.player-Bearded-Daddy",
        "peekOfCode": "class Player(object):\n    def __init__(self, name):\n        self.name = name\n        self.lives = 3\n        self.level = 1\n        self.score = 0\n    def _get_lives(self):\n        return self.lives\n    def _set_lives(self, lives):\n        if lives >= 0:",
        "detail": "oop.player-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "oop.player-LivingRoom-Computer",
        "description": "oop.player-LivingRoom-Computer",
        "peekOfCode": "class Player(object):\n<<<<<<< HEAD\n    def __init__(self, name):\n        self.name = name\n        self._lives = 3\n=======\n    def __init__(self, name):\n        self.name = name\n        self.lives = 3\n>>>>>>> d8d76de5c5eaf5716245077a1bd736626a24dd52",
        "detail": "oop.player-LivingRoom-Computer",
        "documentation": {}
    },
    {
        "label": "Song",
        "kind": 6,
        "importPath": "oop.song",
        "description": "oop.song",
        "peekOfCode": "class Song:\n    \"\"\" Class to represent a song.\n    Attributes:\n        title (str): The title of the song.\n        artist (str): The name of the song's creator.\n        duration (int): The duration of the song in seconds. May be zero.\n    \"\"\"\n    def __init__(self, title, artist, duration=0):\n        self.title = title\n        self.artist = artist",
        "detail": "oop.song",
        "documentation": {}
    },
    {
        "label": "Album",
        "kind": 6,
        "importPath": "oop.song",
        "description": "oop.song",
        "peekOfCode": "class Album:\n    \"\"\" Class to represent an Album, using it's track list.\n    Attributes:\n        name (str): The name of the album.\n        year (int): The year was album was released.\n        artist: (str): The name of the artist responsible for the album.\n        If not specified, the artist will default to an artist with the name \"Various Artists\".\n        tracks (List[Song]): A list of the songs on the album.\n    Methods:\n        add_song: Used to add a new song to the album's track list.",
        "detail": "oop.song",
        "documentation": {}
    },
    {
        "label": "Artist",
        "kind": 6,
        "importPath": "oop.song",
        "description": "oop.song",
        "peekOfCode": "class Artist: \n    \"\"\"Basic class to store artist details.\n    Attributes:\n        name (str): The name of the artist.\n        albums (List[Album]): A list of the albums by this artist.\n            The list includes only those albums in this collection, it is \n            not an exhaustive list of the artist's published albums.\n    Methods:\n        add_ablum: Use to add a new album to the artist's albums list.\n    \"\"\"",
        "detail": "oop.song",
        "documentation": {}
    },
    {
        "label": "find_object",
        "kind": 2,
        "importPath": "oop.song",
        "description": "oop.song",
        "peekOfCode": "def find_object(field, object_list):\n    \"\"\"Check 'object_list' to see if an object with a 'name' attribute equal to 'field' exists, return it if so.\"\"\"\n    for item in object_list:\n        if item.name == field:\n            return item\n    return None\ndef load_data():\n    artist_list = []\n    with open(\"albums.txt\", \"r\") as albums:\n        for line in albums:",
        "detail": "oop.song",
        "documentation": {}
    },
    {
        "label": "load_data",
        "kind": 2,
        "importPath": "oop.song",
        "description": "oop.song",
        "peekOfCode": "def load_data():\n    artist_list = []\n    with open(\"albums.txt\", \"r\") as albums:\n        for line in albums:\n            # data row should consist of (artist, album, year, song).\n            artist_field, album_field, year_field, song_field = tuple(line.strip('\\n').split('\\t'))\n            year_field = int(year_field)\n            print(\"{}:{}:{}:{}\".format(artist_field, album_field, year_field, song_field))\n            new_artist = find_object(artist_field, artist_list)             \n            if new_artist is None:",
        "detail": "oop.song",
        "documentation": {}
    },
    {
        "label": "create_checkfile",
        "kind": 2,
        "importPath": "oop.song",
        "description": "oop.song",
        "peekOfCode": "def create_checkfile(artist_list):\n    \"\"\"Create a check file from the object data for comparison with the original file.\"\"\"\n    with open(\"checkfile.txt\", \"w\") as checkfile:\n        for new_artist in artist_list:\n            for new_album in new_artist.albums:\n                for new_song in new_album.tracks:\n                    print(\"{0.name}\\t{1.name}\\t{1.year}\\t{2.title}\".format(new_artist, new_album, new_song),file=checkfile)\nif __name__=='__main__':\n    artists = load_data()\n    print(\"There are {} artists\".format(len(artists)))",
        "detail": "oop.song",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "PythonPractice.sqlite3",
        "description": "PythonPractice.sqlite3",
        "peekOfCode": "conn = sqlite3.connect('store_transactions.db')\ncursor = conn.cursor()\n# create a store table\ncommand1 = \"\"\"CREATE TABLE IF NOT EXISTS\nstores(store_id INTEGER PRIMARY KEY, location TEXT)\"\"\"\ncursor.execute(command1)\n# create a purchase table\ncommand2 = \"\"\"CREATE TABLE IF NOT EXISTS\npurchases(purchase_id INTEGER PRIMARY KEY, store_id INTEGER, total_cost FLOAT,\nFOREIGN KEY(store_id) REFERENCES stores(store_id))\"\"\"",
        "detail": "PythonPractice.sqlite3",
        "documentation": {}
    },
    {
        "label": "cursor",
        "kind": 5,
        "importPath": "PythonPractice.sqlite3",
        "description": "PythonPractice.sqlite3",
        "peekOfCode": "cursor = conn.cursor()\n# create a store table\ncommand1 = \"\"\"CREATE TABLE IF NOT EXISTS\nstores(store_id INTEGER PRIMARY KEY, location TEXT)\"\"\"\ncursor.execute(command1)\n# create a purchase table\ncommand2 = \"\"\"CREATE TABLE IF NOT EXISTS\npurchases(purchase_id INTEGER PRIMARY KEY, store_id INTEGER, total_cost FLOAT,\nFOREIGN KEY(store_id) REFERENCES stores(store_id))\"\"\"\ncursor.execute(command2)",
        "detail": "PythonPractice.sqlite3",
        "documentation": {}
    },
    {
        "label": "command1",
        "kind": 5,
        "importPath": "PythonPractice.sqlite3",
        "description": "PythonPractice.sqlite3",
        "peekOfCode": "command1 = \"\"\"CREATE TABLE IF NOT EXISTS\nstores(store_id INTEGER PRIMARY KEY, location TEXT)\"\"\"\ncursor.execute(command1)\n# create a purchase table\ncommand2 = \"\"\"CREATE TABLE IF NOT EXISTS\npurchases(purchase_id INTEGER PRIMARY KEY, store_id INTEGER, total_cost FLOAT,\nFOREIGN KEY(store_id) REFERENCES stores(store_id))\"\"\"\ncursor.execute(command2)\n# add three rows to our stores table\ncursor.execute(\"INSERT INTO store VALUES (21, 'Minneapolis, MN')\")",
        "detail": "PythonPractice.sqlite3",
        "documentation": {}
    },
    {
        "label": "command2",
        "kind": 5,
        "importPath": "PythonPractice.sqlite3",
        "description": "PythonPractice.sqlite3",
        "peekOfCode": "command2 = \"\"\"CREATE TABLE IF NOT EXISTS\npurchases(purchase_id INTEGER PRIMARY KEY, store_id INTEGER, total_cost FLOAT,\nFOREIGN KEY(store_id) REFERENCES stores(store_id))\"\"\"\ncursor.execute(command2)\n# add three rows to our stores table\ncursor.execute(\"INSERT INTO store VALUES (21, 'Minneapolis, MN')\")\ncursor.execute(\"INSERT INTO store VALUES (95, 'Chicago, IL')\")\ncursor.execute(\"INSERT INTO store VALUES (64, 'Iowa City, IA')\")\n# add to our purchases table\ncursor.execute(\"INSERT INTO purchases VALUES (54, 21, 15.49)\")",
        "detail": "PythonPractice.sqlite3",
        "documentation": {}
    },
    {
        "label": "results",
        "kind": 5,
        "importPath": "PythonPractice.sqlite3",
        "description": "PythonPractice.sqlite3",
        "peekOfCode": "results = cursor.fetchall()\nprint(results)",
        "detail": "PythonPractice.sqlite3",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "Python_Projects.DeletingObjectProperties",
        "description": "Python_Projects.DeletingObjectProperties",
        "peekOfCode": "class Person:\n  def __init__(self, name, age):\n    self.name = name\n    self.age = age\n  def myfunc(self):\n    print(\"Hello my name is \" + self.name)\np1 = Person(\"John\", 36)\ndel p1\nprint(p1)",
        "detail": "Python_Projects.DeletingObjectProperties",
        "documentation": {}
    },
    {
        "label": "p1",
        "kind": 5,
        "importPath": "Python_Projects.DeletingObjectProperties",
        "description": "Python_Projects.DeletingObjectProperties",
        "peekOfCode": "p1 = Person(\"John\", 36)\ndel p1\nprint(p1)",
        "detail": "Python_Projects.DeletingObjectProperties",
        "documentation": {}
    },
    {
        "label": "magic_8_ball",
        "kind": 2,
        "importPath": "Python_Projects.eight_ball",
        "description": "Python_Projects.eight_ball",
        "peekOfCode": "def magic_8_ball(question):\n    responses = [\n        \"It is certain.\",\n        \"It is decidedly so.\",\n        \"Without a doubt.\",\n        \"Yes - definitely.\",\n        \"You may rely on it.\",\n        \"As I see it, yes.\",\n        \"Most likely.\",\n        \"Outlook good.\",",
        "detail": "Python_Projects.eight_ball",
        "documentation": {}
    },
    {
        "label": "question",
        "kind": 5,
        "importPath": "Python_Projects.eight_ball",
        "description": "Python_Projects.eight_ball",
        "peekOfCode": "question = input(\"Ask a question: \")\nmagic_8_ball(question)",
        "detail": "Python_Projects.eight_ball",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "RollingBack.db.checkdb",
        "description": "RollingBack.db.checkdb",
        "peekOfCode": "db = sqlite3.connect(\"accounts.sqlite\", detect_types=sqlite3.PARSE_DECLTYPES)\nfor row in db.execute(\"SELECT * FROM localhistory\"):\n    print(row)\ndb.close()",
        "detail": "RollingBack.db.checkdb",
        "documentation": {}
    },
    {
        "label": "carlist",
        "kind": 5,
        "importPath": "RollingBack.db.pickling",
        "description": "RollingBack.db.pickling",
        "peekOfCode": "carlist = ['Toyota', 'BMW', 'Audi', 'Suzuki', 'Honda']\n# open a file to store the pickle of cars\nwith open('carlist.pkl','wb') as carpickle: # To open you need parameters, the file name and the  # noqa\n    pickle.dump(carlist, carpickle) # Dump is the functions that creates the pickle file. It takes two agruements.  # noqa\n    # The first is the file we want to pickle and the second arguement is the file object.  # noqa",
        "detail": "RollingBack.db.pickling",
        "documentation": {}
    },
    {
        "label": "Account",
        "kind": 6,
        "importPath": "RollingBack.db.rollback",
        "description": "RollingBack.db.rollback",
        "peekOfCode": "class Account(object):\n    \"\"\"This class creates an object called Account.\"\"\"\n    @staticmethod\n    def _current_time():\n        return pytz.utc.localize(datetime.datetime.now(datetime.UTC))\n        # local_time = pytz.utc.localize(datetime.datetime.utcnow)\n        # return local_time.astimezone()\n    def __init__(self, name: str, opening_balance: int = 0) -> None:\n        cursor = db.execute(\"SELECT name, balance FROM accounts WHERE (name = ?)\", (name,))  # noqa\n        row = cursor.fetchone()",
        "detail": "RollingBack.db.rollback",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "RollingBack.db.rollback",
        "description": "RollingBack.db.rollback",
        "peekOfCode": "db = sqlite3.connect(\"accounts.sqlite\", detect_types=sqlite3.PARSE_DECLTYPES)\n# this is the database connection to sqlite with a .sqlite extention # noqa\ndb.execute(\"\"\"CREATE TABLE IF NOT EXISTS accounts\n(name TEXT PRIMARY KEY NOT NULL, balance INTEGER NOT NULL)\"\"\")\n# noqa: #E501 This is the accounts table.\ndb.execute(\"CREATE TABLE IF NOT EXISTS history (time TIMESTAMP NOT NULL, account TEXT NOT NULL, amount INTEGER NOT NULL, PRIMARY KEY (time, account))\")  # noqa\ndb.execute(\"CREATE VIEW IF NOT EXISTS localhistory AS SELECT strftime('%Y-%m-%d %H:%M:%f', history.time, 'localtime') AS localtime, history.account, history.amount FROM history ORDER BY history.time\")  # noqa\ndb.execute(\"CREATE VIEW IF NOT EXISTS localhistory AS SELECT strftime('%Y-%m-%d %H:%M:%f', history.time,'localtime') AS localtime, history.account, history.amount FROM history ORDER BY history.time\")  # noqa\nclass Account(object):\n    \"\"\"This class creates an object called Account.\"\"\"",
        "detail": "RollingBack.db.rollback",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "RollingBack.db.tzcheck",
        "description": "RollingBack.db.tzcheck",
        "peekOfCode": "db = sqlite3.connect(\"accounts.sqlite\", detect_types=sqlite3.PARSE_DECLTYPES)\n# for row in db.execute (\"SELECT strftime('%Y-%m-%d %H:%M:%f', history.time,\n# 'localtime') AS localtime,\" \"history.account, history.amount FROM history\n# ORDER BY history.time\"):\nfor row in db.execute(\"SELECT * FROM history\"):\n    utc_time = row[0]\n#    picked_zone = row[3]\n#    zone = pickle.loads(picked_zone)\n    zone = pytz.timezone(\"Australia/Adelaide\")\n    local_time = pytz.utc.localize(utc_time).astimezone(zone)",
        "detail": "RollingBack.db.tzcheck",
        "documentation": {}
    },
    {
        "label": "Account",
        "kind": 6,
        "importPath": "RollingBack.db.tztest",
        "description": "RollingBack.db.tztest",
        "peekOfCode": "class Account(object, name, balance):\n    \"\"\"This class creates an object called Account.\"\"\"\n    @staticmethod\n    def _current_time():\n        # return pytz.utc.localize(datetime.datetime.utcnow())\n        # local_time = pytz.utc.localize(datetime.datetime.utcnow)\n        # return local_time.astimezone()\n        utc_time = pytz.utc.localize(datetime.datetime.utcnow())\n        local_time = utc_time.astimezone()\n        zone = local_time.tzinfo",
        "detail": "RollingBack.db.tztest",
        "documentation": {}
    },
    {
        "label": "deposit",
        "kind": 2,
        "importPath": "RollingBack.db.tztest",
        "description": "RollingBack.db.tztest",
        "peekOfCode": "def deposit(self, amount: int) -> float:\n    \"\"\"deposit function indicates a deposit.\n    Parameters\n    ----------\n    amount\n        The amount indicates the total of the deposit.\n    Returns\n    -------\n        Once this function is run we will return a floating number.\n    \"\"\"",
        "detail": "RollingBack.db.tztest",
        "documentation": {}
    },
    {
        "label": "withdraw",
        "kind": 2,
        "importPath": "RollingBack.db.tztest",
        "description": "RollingBack.db.tztest",
        "peekOfCode": "def withdraw(self, amount: int) -> float:\n    \"\"\"withdraw function shows the amount taken out.\n    Parameters\n    ----------\n    amount\n        This indicates the total taken out.\n    Returns\n    -------\n        The return function will indicate a floating number.\n    \"\"\"",
        "detail": "RollingBack.db.tztest",
        "documentation": {}
    },
    {
        "label": "show_balance",
        "kind": 2,
        "importPath": "RollingBack.db.tztest",
        "description": "RollingBack.db.tztest",
        "peekOfCode": "def show_balance(self):\n    \"\"\"show_balance This line indicates the balance.\n    \"\"\"\n    print(\"Balance on account {} is {:.2f}\".format(self.name, self._balance / 100))  # noqa\nif __name__ == '__main__':\n    john = Account()\n    john.deposit(5000)\n    john.deposit(10)\n    john.deposit(10)\n    john.withdraw(30)",
        "detail": "RollingBack.db.tztest",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "RollingBack.db.tztest",
        "description": "RollingBack.db.tztest",
        "peekOfCode": "db = sqlite3.connect(\"accounts.sqlite\", detect_types=sqlite3.PARSE_DECLTYPES)\n# this is the database connection to sqlite with a .sqlite extention # noqa\ndb.execute(\"\"\"CREATE TABLE IF NOT EXISTS accounts\n(name TEXT PRIMARY KEY NOT NULL, balance INTEGER NOT NULL)\"\"\")\n# noqa: #E501 This is the accounts table.\ndb.execute(\"CREATE TABLE IF NOT EXISTS history (time TIMESTAMP NOT NULL,\"\n           \" account TEXT NOT NULL, amount INTEGER NOT NULL,\"\n           \"zone INTEGER NOT NULL, PRIMARY KEY (time, account))\")\n# On line 13 we added a new column called zone.\ndb.execute(\"CREATE VIEW IF NOT EXISTS localhistory AS\"",
        "detail": "RollingBack.db.tztest",
        "documentation": {}
    },
    {
        "label": "albums",
        "kind": 5,
        "importPath": "Sequences.nested_data",
        "description": "Sequences.nested_data",
        "peekOfCode": "albums = [\n    (\"Welcome to my Nightmare\", \"Alice Cooper\", 1975,\n     [\n         (1, \"Welcome to my Nightmare\"),\n         (2, \"Devil's Food\"),\n         (3, \"The Black Widow\"),\n         (4, \"Some Folks\"),\n         (5, \"Only Women Bleed\"),\n     ]\n     ),",
        "detail": "Sequences.nested_data",
        "documentation": {}
    },
    {
        "label": "album",
        "kind": 5,
        "importPath": "Sequences.nested_data",
        "description": "Sequences.nested_data",
        "peekOfCode": "album = albums[2]\nprint(album)\nsongs = albums[3]\nprint(songs)\nsong = songs[1]\nprint(song)\nprint(song[1])",
        "detail": "Sequences.nested_data",
        "documentation": {}
    },
    {
        "label": "songs",
        "kind": 5,
        "importPath": "Sequences.nested_data",
        "description": "Sequences.nested_data",
        "peekOfCode": "songs = albums[3]\nprint(songs)\nsong = songs[1]\nprint(song)\nprint(song[1])",
        "detail": "Sequences.nested_data",
        "documentation": {}
    },
    {
        "label": "song",
        "kind": 5,
        "importPath": "Sequences.nested_data",
        "description": "Sequences.nested_data",
        "peekOfCode": "song = songs[1]\nprint(song)\nprint(song[1])",
        "detail": "Sequences.nested_data",
        "documentation": {}
    },
    {
        "label": "albums",
        "kind": 5,
        "importPath": "Sequences.tuples_intro",
        "description": "Sequences.tuples_intro",
        "peekOfCode": "albums = [(\"Welcome to my Nightmare\", \"Alice Cooper\", 1975),\n            (\"Bad Company\", \"Bad Company\", 1974),\n            (\"Nightflight\", \"Budgie\", 1981),\n            (\"More Mayhem\", \"Emilda May\", 2011),\n            (\"Ride the Lightning\", \"Metallica\", 1984),\n         ]\nprint(len(albums))\nfor album in albums:\n    name, artist, year = album\n    print(\"Album: {}, Artist: {}, Year: {}\"",
        "detail": "Sequences.tuples_intro",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Sequences.unpacking",
        "description": "Sequences.unpacking",
        "peekOfCode": "a = b = c = d = e = f = 42\nprint(c)\nx, y, z  = 1, 2, 76\nprint(x)\nprint(y)\nprint(z)\nprint(\"Unpacking a tuple\")\ndata = 1, 2, 76 # data represents a tuple\nx, y, z = data\nprint(x)",
        "detail": "Sequences.unpacking",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Sequences.unpacking",
        "description": "Sequences.unpacking",
        "peekOfCode": "data = 1, 2, 76 # data represents a tuple\nx, y, z = data\nprint(x)\nprint(y)\nprint(z)\nprint(\"Unpacking a list\")\ndata_list = [12, 13, 14]\ndata_list.append(15)\np, q, r = data_list\nprint(p)",
        "detail": "Sequences.unpacking",
        "documentation": {}
    },
    {
        "label": "data_list",
        "kind": 5,
        "importPath": "Sequences.unpacking",
        "description": "Sequences.unpacking",
        "peekOfCode": "data_list = [12, 13, 14]\ndata_list.append(15)\np, q, r = data_list\nprint(p)\nprint(q)\nprint(r)",
        "detail": "Sequences.unpacking",
        "documentation": {}
    },
    {
        "label": "format_data",
        "kind": 2,
        "importPath": "UdemyClasses.Big_O.animated_bubble_sort_1",
        "description": "UdemyClasses.Big_O.animated_bubble_sort_1",
        "peekOfCode": "def format_data(data, position=None):\n    result = \"[ \"\n    inverse = False\n    for index, val in enumerate(data):\n        if (position is not None) and (position == index):\n            result += colorama.Back.LIGHTYELLOW_EX\n            inverse = True\n        result += f\"{val}\"\n        if (position is not None) and (index == position + 1) and inverse:\n            result += colorama.Back.RESET",
        "detail": "UdemyClasses.Big_O.animated_bubble_sort_1",
        "documentation": {}
    },
    {
        "label": "bubble_sort",
        "kind": 2,
        "importPath": "UdemyClasses.Big_O.animated_bubble_sort_1",
        "description": "UdemyClasses.Big_O.animated_bubble_sort_1",
        "peekOfCode": "def bubble_sort(data: list) -> None:\n    \"\"\"Sorts a list in place.\"\"\"\n    n = len(data)\n    comparison_count = 0\n    for i in range(n - 1):\n        swapped = False\n        print(f\"i = {i}. Starting outer loop with {format_data(data)}\")\n        print(end=\"\")\n        for j in range(n - 1 - i):\n            print(f\"{CLEAR_LINE}j = {j}. Starting the inner loop with  {format_data(data, j)}\", end=\"\")",
        "detail": "UdemyClasses.Big_O.animated_bubble_sort_1",
        "documentation": {}
    },
    {
        "label": "CLEAR_SCREEN",
        "kind": 5,
        "importPath": "UdemyClasses.Big_O.animated_bubble_sort_1",
        "description": "UdemyClasses.Big_O.animated_bubble_sort_1",
        "peekOfCode": "CLEAR_SCREEN = '\\u001b[2J'\nSTART_OF_LINE = '\\u001b[1G'\nCLEAR_LINE = f'{START_OF_LINE}\\u001b[0K'\nPREVIOUS_LINE = colorama.Cursor.UP(1)\nHIDE_CURSOR = '\\u001b[?25l'\ndef format_data(data, position=None):\n    result = \"[ \"\n    inverse = False\n    for index, val in enumerate(data):\n        if (position is not None) and (position == index):",
        "detail": "UdemyClasses.Big_O.animated_bubble_sort_1",
        "documentation": {}
    },
    {
        "label": "START_OF_LINE",
        "kind": 5,
        "importPath": "UdemyClasses.Big_O.animated_bubble_sort_1",
        "description": "UdemyClasses.Big_O.animated_bubble_sort_1",
        "peekOfCode": "START_OF_LINE = '\\u001b[1G'\nCLEAR_LINE = f'{START_OF_LINE}\\u001b[0K'\nPREVIOUS_LINE = colorama.Cursor.UP(1)\nHIDE_CURSOR = '\\u001b[?25l'\ndef format_data(data, position=None):\n    result = \"[ \"\n    inverse = False\n    for index, val in enumerate(data):\n        if (position is not None) and (position == index):\n            result += colorama.Back.LIGHTYELLOW_EX",
        "detail": "UdemyClasses.Big_O.animated_bubble_sort_1",
        "documentation": {}
    },
    {
        "label": "CLEAR_LINE",
        "kind": 5,
        "importPath": "UdemyClasses.Big_O.animated_bubble_sort_1",
        "description": "UdemyClasses.Big_O.animated_bubble_sort_1",
        "peekOfCode": "CLEAR_LINE = f'{START_OF_LINE}\\u001b[0K'\nPREVIOUS_LINE = colorama.Cursor.UP(1)\nHIDE_CURSOR = '\\u001b[?25l'\ndef format_data(data, position=None):\n    result = \"[ \"\n    inverse = False\n    for index, val in enumerate(data):\n        if (position is not None) and (position == index):\n            result += colorama.Back.LIGHTYELLOW_EX\n            inverse = True",
        "detail": "UdemyClasses.Big_O.animated_bubble_sort_1",
        "documentation": {}
    },
    {
        "label": "PREVIOUS_LINE",
        "kind": 5,
        "importPath": "UdemyClasses.Big_O.animated_bubble_sort_1",
        "description": "UdemyClasses.Big_O.animated_bubble_sort_1",
        "peekOfCode": "PREVIOUS_LINE = colorama.Cursor.UP(1)\nHIDE_CURSOR = '\\u001b[?25l'\ndef format_data(data, position=None):\n    result = \"[ \"\n    inverse = False\n    for index, val in enumerate(data):\n        if (position is not None) and (position == index):\n            result += colorama.Back.LIGHTYELLOW_EX\n            inverse = True\n        result += f\"{val}\"",
        "detail": "UdemyClasses.Big_O.animated_bubble_sort_1",
        "documentation": {}
    },
    {
        "label": "HIDE_CURSOR",
        "kind": 5,
        "importPath": "UdemyClasses.Big_O.animated_bubble_sort_1",
        "description": "UdemyClasses.Big_O.animated_bubble_sort_1",
        "peekOfCode": "HIDE_CURSOR = '\\u001b[?25l'\ndef format_data(data, position=None):\n    result = \"[ \"\n    inverse = False\n    for index, val in enumerate(data):\n        if (position is not None) and (position == index):\n            result += colorama.Back.LIGHTYELLOW_EX\n            inverse = True\n        result += f\"{val}\"\n        if (position is not None) and (index == position + 1) and inverse:",
        "detail": "UdemyClasses.Big_O.animated_bubble_sort_1",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "UdemyClasses.Big_O.animated_bubble_sort_1",
        "description": "UdemyClasses.Big_O.animated_bubble_sort_1",
        "peekOfCode": "numbers = [1, 2, 3, 4, 6, 5, 7]\nprint(f\"{CLEAR_SCREEN}{HIDE_CURSOR}Sorting {format_data(numbers)}\")\nbubble_sort(numbers)\nprint(f\"The sorted data is {format_data(numbers)}\")\ncolorama.deinit()",
        "detail": "UdemyClasses.Big_O.animated_bubble_sort_1",
        "documentation": {}
    },
    {
        "label": "bubble_sort",
        "kind": 2,
        "importPath": "UdemyClasses.Big_O.bubble_sort",
        "description": "UdemyClasses.Big_O.bubble_sort",
        "peekOfCode": "def bubble_sort(data: list) -> None:\n    \"\"\"Sorts a list in place.\"\"\"\n    n = len(data)\n    comparison_count = 0\n    for i in range(n -1):\n        swapped = False\n        for j in range(n - 1 - i):\n            comparison_count += 1\n            if data[j] > data[j + 1]:\n                data[j], data[j + 1] = data[j + 1], data[j]",
        "detail": "UdemyClasses.Big_O.bubble_sort",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "UdemyClasses.Big_O.bubble_sort",
        "description": "UdemyClasses.Big_O.bubble_sort",
        "peekOfCode": "numbers = [7, 6, 5, 4, 3, 2, 1]\n# numbers = [1, 2, 3, 4, 6, 5, 7]\n# numbers = [1, 2, 3, 4, 5, 6, 7]\n# numbers = list(range(70, 0, -1))\nprint(len(numbers))\nprint(f\"Sorting {numbers}\")\nbubble_sort(numbers)\nprint(f\"The sorted data is {numbers}\")\n# x = 1\n# y = 2",
        "detail": "UdemyClasses.Big_O.bubble_sort",
        "documentation": {}
    },
    {
        "label": "load_images",
        "kind": 2,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "def load_images(card_images):\n    suits = ['heart', 'club', 'diamond', 'spade']\n    face_cards = ['jack', 'queen', 'king']\n    if tkinter.TkVersion >= 8.6:\n        extension = 'png'\n    else:\n        extension = 'ppm'\n    # For each suit, retrieve the image for the cards\n    for suit in suits:\n        # First the number cards 1 to 10",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "score_hand",
        "kind": 2,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "def score_hand(hand):\n    # calculate the total score of all cards in list.\n    # Only one ace can have the value of 11, and this will be reduce to 1 if the hand would bust.\n    score = 0\n    ace = False\n    for next_card in hand:\n        card_value = next_card[0]\n        if card_value == 1 and not ace:\n            ace = True\n            card_value = 11",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "deal_dealer",
        "kind": 2,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "def deal_dealer():\n    dealer_score = score_hand(dealer_hand)\n    while 0 < dealer_score < 17:\n        dealer_hand.append(_deal_card(dealer_card_frame))\n        dealer_score = score_hand(dealer_hand)\n        #TODO what does label.set do?\n        dealer_score_label.set(dealer_score)\n    player_score = score_hand(player_hand)\n    if player_score > 21:\n        result_text.set(\"Dealer Wins!\")",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "deal_player",
        "kind": 2,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "def deal_player():\n    player_hand.append(_deal_card(player_card_frame))\n    player_score = score_hand(player_hand)      \n    player_score_label.set(score_hand(player_hand))\n    # if player_score > 21:\n    #         result_text.set(\"Dealer Wins!\")\ndef initial_deal():\n    deal_dealer()       \n    dealer_hand.append(_deal_card(dealer_card_frame))        \n    dealer_score_label.set(score_hand(dealer_hand))        ",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "initial_deal",
        "kind": 2,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "def initial_deal():\n    deal_dealer()       \n    dealer_hand.append(_deal_card(dealer_card_frame))        \n    dealer_score_label.set(score_hand(dealer_hand))        \n    deal_player()\n    player_hand.append(_deal_card(player_card_frame))\n    player_score_label.set(score_hand(player_hand))\ndef new_deal():\n    global dealer_card_frame\n    global player_card_frame",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "new_deal",
        "kind": 2,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "def new_deal():\n    global dealer_card_frame\n    global player_card_frame\n    global dealer_hand\n    global player_hand\n    # Embedded frame to hold the card images\n    dealer_card_frame.destroy()\n    dealer_card_frame = tkinter.Frame(card_frame, background='green')\n    dealer_card_frame.grid(row=0, column=1, sticky='ew', rowspan=2)\n    # Embedded frame to hold the card images",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "shuffle",
        "kind": 2,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "def shuffle():\n    random.shuffle(deck)\ndef play():\n    initial_deal()\n    mainWindow.mainloop()\nmainWindow = tkinter.Tk()\n# Set up the screen and frames for the dealer and player\nmainWindow.title(\"Grevy's Black Jack\")\nmainWindow.geometry(\"640x480\")\nmainWindow.configure(background=\"green\")",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "play",
        "kind": 2,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "def play():\n    initial_deal()\n    mainWindow.mainloop()\nmainWindow = tkinter.Tk()\n# Set up the screen and frames for the dealer and player\nmainWindow.title(\"Grevy's Black Jack\")\nmainWindow.geometry(\"640x480\")\nmainWindow.configure(background=\"green\")\nresult_text = tkinter.StringVar()\nresult = tkinter.Label(mainWindow, textvariable=result_text)",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "mainWindow",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "mainWindow = tkinter.Tk()\n# Set up the screen and frames for the dealer and player\nmainWindow.title(\"Grevy's Black Jack\")\nmainWindow.geometry(\"640x480\")\nmainWindow.configure(background=\"green\")\nresult_text = tkinter.StringVar()\nresult = tkinter.Label(mainWindow, textvariable=result_text)\nresult.grid(row=0, column=0, columnspan=3)\ncard_frame = tkinter.Frame(mainWindow, relief=\"sunken\",\n                        borderwidth=1, background=\"green\")",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "result_text",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "result_text = tkinter.StringVar()\nresult = tkinter.Label(mainWindow, textvariable=result_text)\nresult.grid(row=0, column=0, columnspan=3)\ncard_frame = tkinter.Frame(mainWindow, relief=\"sunken\",\n                        borderwidth=1, background=\"green\")\ncard_frame.grid(row=1, column=0, sticky=\"ew\", columnspan=3, rowspan=2)\ndealer_score_label = tkinter.IntVar()\ntkinter.Label(card_frame, text=\"Dealer\", background=\"green\",\n            fg=\"white\").grid(row=0, column=0)\ntkinter.Label(card_frame, textvariable=dealer_score_label,",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "result = tkinter.Label(mainWindow, textvariable=result_text)\nresult.grid(row=0, column=0, columnspan=3)\ncard_frame = tkinter.Frame(mainWindow, relief=\"sunken\",\n                        borderwidth=1, background=\"green\")\ncard_frame.grid(row=1, column=0, sticky=\"ew\", columnspan=3, rowspan=2)\ndealer_score_label = tkinter.IntVar()\ntkinter.Label(card_frame, text=\"Dealer\", background=\"green\",\n            fg=\"white\").grid(row=0, column=0)\ntkinter.Label(card_frame, textvariable=dealer_score_label,\n            background=\"green\", fg=\"white\").grid(row=1, column=0)",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "card_frame",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "card_frame = tkinter.Frame(mainWindow, relief=\"sunken\",\n                        borderwidth=1, background=\"green\")\ncard_frame.grid(row=1, column=0, sticky=\"ew\", columnspan=3, rowspan=2)\ndealer_score_label = tkinter.IntVar()\ntkinter.Label(card_frame, text=\"Dealer\", background=\"green\",\n            fg=\"white\").grid(row=0, column=0)\ntkinter.Label(card_frame, textvariable=dealer_score_label,\n            background=\"green\", fg=\"white\").grid(row=1, column=0)\n# Embedded frame to hold the card images.\ndealer_card_frame = tkinter.Frame(card_frame, background=\"green\")",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "dealer_score_label",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "dealer_score_label = tkinter.IntVar()\ntkinter.Label(card_frame, text=\"Dealer\", background=\"green\",\n            fg=\"white\").grid(row=0, column=0)\ntkinter.Label(card_frame, textvariable=dealer_score_label,\n            background=\"green\", fg=\"white\").grid(row=1, column=0)\n# Embedded frame to hold the card images.\ndealer_card_frame = tkinter.Frame(card_frame, background=\"green\")\ndealer_card_frame.grid(row=0, column=1, sticky=\"ew\", rowspan=2)\nplayer_score_label = tkinter.IntVar()\ntkinter.Label(card_frame, text=\"Player\", background=\"green\",",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "dealer_card_frame",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "dealer_card_frame = tkinter.Frame(card_frame, background=\"green\")\ndealer_card_frame.grid(row=0, column=1, sticky=\"ew\", rowspan=2)\nplayer_score_label = tkinter.IntVar()\ntkinter.Label(card_frame, text=\"Player\", background=\"green\",\n            fg=\"white\").grid(row=2, column=0)\ntkinter.Label(card_frame, textvariable=player_score_label,\n            background=\"green\", fg=\"white\").grid(row=3, column=0)\n# Embedded frame to hold the card images\nplayer_card_frame = tkinter.Frame(card_frame, background=\"green\")\nplayer_card_frame.grid(row=2, column=1, sticky=\"ew\", rowspan=2)",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "player_score_label",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "player_score_label = tkinter.IntVar()\ntkinter.Label(card_frame, text=\"Player\", background=\"green\",\n            fg=\"white\").grid(row=2, column=0)\ntkinter.Label(card_frame, textvariable=player_score_label,\n            background=\"green\", fg=\"white\").grid(row=3, column=0)\n# Embedded frame to hold the card images\nplayer_card_frame = tkinter.Frame(card_frame, background=\"green\")\nplayer_card_frame.grid(row=2, column=1, sticky=\"ew\", rowspan=2)\nbutton_frame = tkinter.Frame(mainWindow)\nbutton_frame.grid(row=3, column=0, columnspan=3, sticky=\"w\")",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "player_card_frame",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "player_card_frame = tkinter.Frame(card_frame, background=\"green\")\nplayer_card_frame.grid(row=2, column=1, sticky=\"ew\", rowspan=2)\nbutton_frame = tkinter.Frame(mainWindow)\nbutton_frame.grid(row=3, column=0, columnspan=3, sticky=\"w\")\ndealer_button = tkinter.Button(\n    button_frame, text=\"Dealer\", command=deal_dealer)\ndealer_button.grid(row=0, column=0)\nplayer_button = tkinter.Button(\n    button_frame, text=\"Player\", command=deal_player)\nplayer_button.grid(row=0, column=1)",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "button_frame",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "button_frame = tkinter.Frame(mainWindow)\nbutton_frame.grid(row=3, column=0, columnspan=3, sticky=\"w\")\ndealer_button = tkinter.Button(\n    button_frame, text=\"Dealer\", command=deal_dealer)\ndealer_button.grid(row=0, column=0)\nplayer_button = tkinter.Button(\n    button_frame, text=\"Player\", command=deal_player)\nplayer_button.grid(row=0, column=1)\nnew_deal_button = tkinter.Button(\n    button_frame, text=\"New Deal\", command=new_deal)",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "dealer_button",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "dealer_button = tkinter.Button(\n    button_frame, text=\"Dealer\", command=deal_dealer)\ndealer_button.grid(row=0, column=0)\nplayer_button = tkinter.Button(\n    button_frame, text=\"Player\", command=deal_player)\nplayer_button.grid(row=0, column=1)\nnew_deal_button = tkinter.Button(\n    button_frame, text=\"New Deal\", command=new_deal)\nnew_deal_button.grid(row=0, column=2)\nshuffle_button = tkinter.Button(button_frame, text=\"Shuffle\", command=shuffle)",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "player_button",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "player_button = tkinter.Button(\n    button_frame, text=\"Player\", command=deal_player)\nplayer_button.grid(row=0, column=1)\nnew_deal_button = tkinter.Button(\n    button_frame, text=\"New Deal\", command=new_deal)\nnew_deal_button.grid(row=0, column=2)\nshuffle_button = tkinter.Button(button_frame, text=\"Shuffle\", command=shuffle)\nshuffle_button.grid(row=0, column=3)\n# Load cards\ncards = []",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "new_deal_button",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "new_deal_button = tkinter.Button(\n    button_frame, text=\"New Deal\", command=new_deal)\nnew_deal_button.grid(row=0, column=2)\nshuffle_button = tkinter.Button(button_frame, text=\"Shuffle\", command=shuffle)\nshuffle_button.grid(row=0, column=3)\n# Load cards\ncards = []\nload_images(cards)\nprint(cards)\n# Create a new deck of cards and shuffle them.",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "shuffle_button",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "shuffle_button = tkinter.Button(button_frame, text=\"Shuffle\", command=shuffle)\nshuffle_button.grid(row=0, column=3)\n# Load cards\ncards = []\nload_images(cards)\nprint(cards)\n# Create a new deck of cards and shuffle them.\ndeck = list(cards) + list(cards) + list(cards)\nshuffle()\n# Create the list to store the dealer's and player's hands",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "cards",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "cards = []\nload_images(cards)\nprint(cards)\n# Create a new deck of cards and shuffle them.\ndeck = list(cards) + list(cards) + list(cards)\nshuffle()\n# Create the list to store the dealer's and player's hands\ndealer_hand = []\nplayer_hand = []\n# deal_player()",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "deck",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "deck = list(cards) + list(cards) + list(cards)\nshuffle()\n# Create the list to store the dealer's and player's hands\ndealer_hand = []\nplayer_hand = []\n# deal_player()\n# dealer_hand.append(_deal_card(dealer_card_frame))\n# dealer_score_label.set(score_hand(dealer_hand))\n# deal_player()\nif __name__ == \"__main__\":",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "dealer_hand",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "dealer_hand = []\nplayer_hand = []\n# deal_player()\n# dealer_hand.append(_deal_card(dealer_card_frame))\n# dealer_score_label.set(score_hand(dealer_hand))\n# deal_player()\nif __name__ == \"__main__\":\n    play()",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "player_hand",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "description": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "peekOfCode": "player_hand = []\n# deal_player()\n# dealer_hand.append(_deal_card(dealer_card_frame))\n# dealer_score_label.set(score_hand(dealer_hand))\n# deal_player()\nif __name__ == \"__main__\":\n    play()",
        "detail": "UdemyClasses.Blackjack.blackjack-Bearded-Daddy",
        "documentation": {}
    },
    {
        "label": "load_images",
        "kind": 2,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "def load_images(card_images):\n    suits = ['heart', 'club', 'diamond', 'spade']\n    face_cards = ['jack', 'queen', 'king']\n    if tkinter.TkVersion >= 8.6:\n        extension = 'png'\n    else:\n        extension = 'ppm'\n    # For each suit, retrieve the image for the cards\n    for suit in suits:\n        # First the number cards 1 to 10",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "score_hand",
        "kind": 2,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "def score_hand(hand):\n    # calculate the total score of all cards in list.\n    # Only one ace can have the value of 11, and this will be reduce to 1 if the hand would bust.\n    score = 0\n    ace = False\n    for next_card in hand:\n        card_value = next_card[0]\n        if card_value == 1 and not ace:\n            ace = True\n            card_value = 11",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "deal_dealer",
        "kind": 2,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "def deal_dealer():\n    dealer_score = score_hand(dealer_hand)\n    while 0 < dealer_score < 17:\n        dealer_hand.append(_deal_card(dealer_card_frame))\n        dealer_score = score_hand(dealer_hand)\n        #TODO what does label.set do?\n        dealer_score_label.set(dealer_score)\n    player_score = score_hand(player_hand)\n    if player_score > 21:\n        result_text.set(\"Dealer Wins!\")",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "deal_player",
        "kind": 2,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "def deal_player():\n    player_hand.append(_deal_card(player_card_frame))\n    player_score = score_hand(player_hand)      \n    player_score_label.set(score_hand(player_hand))\n    # if player_score > 21:\n    #         result_text.set(\"Dealer Wins!\")\ndef initial_deal():\n    deal_dealer()       \n    dealer_hand.append(_deal_card(dealer_card_frame))        \n    dealer_score_label.set(score_hand(dealer_hand))        ",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "initial_deal",
        "kind": 2,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "def initial_deal():\n    deal_dealer()       \n    dealer_hand.append(_deal_card(dealer_card_frame))        \n    dealer_score_label.set(score_hand(dealer_hand))        \n    deal_player()\n    player_hand.append(_deal_card(player_card_frame))\n    player_score_label.set(score_hand(player_hand))\ndef new_deal():\n    global dealer_card_frame\n    global player_card_frame",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "new_deal",
        "kind": 2,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "def new_deal():\n    global dealer_card_frame\n    global player_card_frame\n    global dealer_hand\n    global player_hand\n    # Embedded frame to hold the card images\n    dealer_card_frame.destroy()\n    dealer_card_frame = tkinter.Frame(card_frame, background='green')\n    dealer_card_frame.grid(row=0, column=1, sticky='ew', rowspan=2)\n    # Embedded frame to hold the card images",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "shuffle",
        "kind": 2,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "def shuffle():\n    random.shuffle(deck)\ndef play():\n    initial_deal()\n    mainWindow.mainloop()\nmainWindow = tkinter.Tk()\n# Set up the screen and frames for the dealer and player\nmainWindow.title(\"Grevy's Black Jack\")\nmainWindow.geometry(\"640x480\")\nmainWindow.configure(background=\"green\")",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "play",
        "kind": 2,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "def play():\n    initial_deal()\n    mainWindow.mainloop()\nmainWindow = tkinter.Tk()\n# Set up the screen and frames for the dealer and player\nmainWindow.title(\"Grevy's Black Jack\")\nmainWindow.geometry(\"640x480\")\nmainWindow.configure(background=\"green\")\nresult_text = tkinter.StringVar()\nresult = tkinter.Label(mainWindow, textvariable=result_text)",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "mainWindow",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "mainWindow = tkinter.Tk()\n# Set up the screen and frames for the dealer and player\nmainWindow.title(\"Grevy's Black Jack\")\nmainWindow.geometry(\"640x480\")\nmainWindow.configure(background=\"green\")\nresult_text = tkinter.StringVar()\nresult = tkinter.Label(mainWindow, textvariable=result_text)\nresult.grid(row=0, column=0, columnspan=3)\ncard_frame = tkinter.Frame(mainWindow, relief=\"sunken\",\n                        borderwidth=1, background=\"green\")",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "result_text",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "result_text = tkinter.StringVar()\nresult = tkinter.Label(mainWindow, textvariable=result_text)\nresult.grid(row=0, column=0, columnspan=3)\ncard_frame = tkinter.Frame(mainWindow, relief=\"sunken\",\n                        borderwidth=1, background=\"green\")\ncard_frame.grid(row=1, column=0, sticky=\"ew\", columnspan=3, rowspan=2)\ndealer_score_label = tkinter.IntVar()\ntkinter.Label(card_frame, text=\"Dealer\", background=\"green\",\n            fg=\"white\").grid(row=0, column=0)\ntkinter.Label(card_frame, textvariable=dealer_score_label,",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "result = tkinter.Label(mainWindow, textvariable=result_text)\nresult.grid(row=0, column=0, columnspan=3)\ncard_frame = tkinter.Frame(mainWindow, relief=\"sunken\",\n                        borderwidth=1, background=\"green\")\ncard_frame.grid(row=1, column=0, sticky=\"ew\", columnspan=3, rowspan=2)\ndealer_score_label = tkinter.IntVar()\ntkinter.Label(card_frame, text=\"Dealer\", background=\"green\",\n            fg=\"white\").grid(row=0, column=0)\ntkinter.Label(card_frame, textvariable=dealer_score_label,\n            background=\"green\", fg=\"white\").grid(row=1, column=0)",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "card_frame",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "card_frame = tkinter.Frame(mainWindow, relief=\"sunken\",\n                        borderwidth=1, background=\"green\")\ncard_frame.grid(row=1, column=0, sticky=\"ew\", columnspan=3, rowspan=2)\ndealer_score_label = tkinter.IntVar()\ntkinter.Label(card_frame, text=\"Dealer\", background=\"green\",\n            fg=\"white\").grid(row=0, column=0)\ntkinter.Label(card_frame, textvariable=dealer_score_label,\n            background=\"green\", fg=\"white\").grid(row=1, column=0)\n# Embedded frame to hold the card images.\ndealer_card_frame = tkinter.Frame(card_frame, background=\"green\")",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "dealer_score_label",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "dealer_score_label = tkinter.IntVar()\ntkinter.Label(card_frame, text=\"Dealer\", background=\"green\",\n            fg=\"white\").grid(row=0, column=0)\ntkinter.Label(card_frame, textvariable=dealer_score_label,\n            background=\"green\", fg=\"white\").grid(row=1, column=0)\n# Embedded frame to hold the card images.\ndealer_card_frame = tkinter.Frame(card_frame, background=\"green\")\ndealer_card_frame.grid(row=0, column=1, sticky=\"ew\", rowspan=2)\nplayer_score_label = tkinter.IntVar()\ntkinter.Label(card_frame, text=\"Player\", background=\"green\",",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "dealer_card_frame",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "dealer_card_frame = tkinter.Frame(card_frame, background=\"green\")\ndealer_card_frame.grid(row=0, column=1, sticky=\"ew\", rowspan=2)\nplayer_score_label = tkinter.IntVar()\ntkinter.Label(card_frame, text=\"Player\", background=\"green\",\n            fg=\"white\").grid(row=2, column=0)\ntkinter.Label(card_frame, textvariable=player_score_label,\n            background=\"green\", fg=\"white\").grid(row=3, column=0)\n# Embedded frame to hold the card images\nplayer_card_frame = tkinter.Frame(card_frame, background=\"green\")\nplayer_card_frame.grid(row=2, column=1, sticky=\"ew\", rowspan=2)",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "player_score_label",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "player_score_label = tkinter.IntVar()\ntkinter.Label(card_frame, text=\"Player\", background=\"green\",\n            fg=\"white\").grid(row=2, column=0)\ntkinter.Label(card_frame, textvariable=player_score_label,\n            background=\"green\", fg=\"white\").grid(row=3, column=0)\n# Embedded frame to hold the card images\nplayer_card_frame = tkinter.Frame(card_frame, background=\"green\")\nplayer_card_frame.grid(row=2, column=1, sticky=\"ew\", rowspan=2)\nbutton_frame = tkinter.Frame(mainWindow)\nbutton_frame.grid(row=3, column=0, columnspan=3, sticky=\"w\")",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "player_card_frame",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "player_card_frame = tkinter.Frame(card_frame, background=\"green\")\nplayer_card_frame.grid(row=2, column=1, sticky=\"ew\", rowspan=2)\nbutton_frame = tkinter.Frame(mainWindow)\nbutton_frame.grid(row=3, column=0, columnspan=3, sticky=\"w\")\ndealer_button = tkinter.Button(\n    button_frame, text=\"Dealer\", command=deal_dealer)\ndealer_button.grid(row=0, column=0)\nplayer_button = tkinter.Button(\n    button_frame, text=\"Player\", command=deal_player)\nplayer_button.grid(row=0, column=1)",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "button_frame",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "button_frame = tkinter.Frame(mainWindow)\nbutton_frame.grid(row=3, column=0, columnspan=3, sticky=\"w\")\ndealer_button = tkinter.Button(\n    button_frame, text=\"Dealer\", command=deal_dealer)\ndealer_button.grid(row=0, column=0)\nplayer_button = tkinter.Button(\n    button_frame, text=\"Player\", command=deal_player)\nplayer_button.grid(row=0, column=1)\nnew_deal_button = tkinter.Button(\n    button_frame, text=\"New Deal\", command=new_deal)",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "dealer_button",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "dealer_button = tkinter.Button(\n    button_frame, text=\"Dealer\", command=deal_dealer)\ndealer_button.grid(row=0, column=0)\nplayer_button = tkinter.Button(\n    button_frame, text=\"Player\", command=deal_player)\nplayer_button.grid(row=0, column=1)\nnew_deal_button = tkinter.Button(\n    button_frame, text=\"New Deal\", command=new_deal)\nnew_deal_button.grid(row=0, column=2)\nshuffle_button = tkinter.Button(button_frame, text=\"Shuffle\", command=shuffle)",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "player_button",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "player_button = tkinter.Button(\n    button_frame, text=\"Player\", command=deal_player)\nplayer_button.grid(row=0, column=1)\nnew_deal_button = tkinter.Button(\n    button_frame, text=\"New Deal\", command=new_deal)\nnew_deal_button.grid(row=0, column=2)\nshuffle_button = tkinter.Button(button_frame, text=\"Shuffle\", command=shuffle)\nshuffle_button.grid(row=0, column=3)\n# Load cards\ncards = []",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "new_deal_button",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "new_deal_button = tkinter.Button(\n    button_frame, text=\"New Deal\", command=new_deal)\nnew_deal_button.grid(row=0, column=2)\nshuffle_button = tkinter.Button(button_frame, text=\"Shuffle\", command=shuffle)\nshuffle_button.grid(row=0, column=3)\n# Load cards\ncards = []\nload_images(cards)\nprint(cards)\n# Create a new deck of cards and shuffle them.",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "shuffle_button",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "shuffle_button = tkinter.Button(button_frame, text=\"Shuffle\", command=shuffle)\nshuffle_button.grid(row=0, column=3)\n# Load cards\ncards = []\nload_images(cards)\nprint(cards)\n# Create a new deck of cards and shuffle them.\ndeck = list(cards) + list(cards) + list(cards)\nshuffle()\n# Create the list to store the dealer's and player's hands",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "cards",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "cards = []\nload_images(cards)\nprint(cards)\n# Create a new deck of cards and shuffle them.\ndeck = list(cards) + list(cards) + list(cards)\nshuffle()\n# Create the list to store the dealer's and player's hands\ndealer_hand = []\nplayer_hand = []\n# deal_player()",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "deck",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "deck = list(cards) + list(cards) + list(cards)\nshuffle()\n# Create the list to store the dealer's and player's hands\ndealer_hand = []\nplayer_hand = []\n# deal_player()\n# dealer_hand.append(_deal_card(dealer_card_frame))\n# dealer_score_label.set(score_hand(dealer_hand))\n# deal_player()\nif __name__ == \"__main__\":",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "dealer_hand",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "dealer_hand = []\nplayer_hand = []\n# deal_player()\n# dealer_hand.append(_deal_card(dealer_card_frame))\n# dealer_score_label.set(score_hand(dealer_hand))\n# deal_player()\nif __name__ == \"__main__\":\n    play()",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "player_hand",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.blackjack",
        "description": "UdemyClasses.Blackjack.blackjack",
        "peekOfCode": "player_hand = []\n# deal_player()\n# dealer_hand.append(_deal_card(dealer_card_frame))\n# dealer_score_label.set(score_hand(dealer_hand))\n# deal_player()\nif __name__ == \"__main__\":\n    play()",
        "detail": "UdemyClasses.Blackjack.blackjack",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.get_ints",
        "description": "UdemyClasses.Blackjack.get_ints",
        "peekOfCode": "x = int(input(\"Enter a number \"))",
        "detail": "UdemyClasses.Blackjack.get_ints",
        "documentation": {}
    },
    {
        "label": "personal_details",
        "kind": 5,
        "importPath": "UdemyClasses.Blackjack.import_test",
        "description": "UdemyClasses.Blackjack.import_test",
        "peekOfCode": "personal_details = (\"Grevy\", 49, \"Florida\")\nname, _, country = personal_details\nprint(name, country)\nprint(_)",
        "detail": "UdemyClasses.Blackjack.import_test",
        "documentation": {}
    },
    {
        "label": "centre_text",
        "kind": 2,
        "importPath": "UdemyClasses.Comprehension.center_text",
        "description": "UdemyClasses.Comprehension.center_text",
        "peekOfCode": "def centre_text(*args):\n    \"\"\"This line creates a function called\n    centre_text with an *args argument.\"\"\"\n    # text = \"\"\n    # for arg in args:\n    #     text += str(arg) + \" \"\n    text = \"-\".join([str(arg) for arg in args])  # This is a list comprehension.  # noqa\n    # text = \"-\".join(str(arg) for arg in args) # This is a generator expression.  # noqa\n    left_margin = (80 - len(text)) // 2\n    print(\" \" * left_margin, text)",
        "detail": "UdemyClasses.Comprehension.center_text",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.Challenge1",
        "description": "UdemyClasses.Comprehension.Challenge1",
        "peekOfCode": "text = input(\"Please enter your text: \")\noutput = []\nfor x in text.split():\n    output.append(len(x))\nprint(output)\n# type your solution here:\nanswer = [len(x) for x in text.split()]\nprint(answer)\n# It could be useful to store the original words in the list, as well.\n# The for loop would look like this (note the extra parentheses, so",
        "detail": "UdemyClasses.Comprehension.Challenge1",
        "documentation": {}
    },
    {
        "label": "output",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.Challenge1",
        "description": "UdemyClasses.Comprehension.Challenge1",
        "peekOfCode": "output = []\nfor x in text.split():\n    output.append(len(x))\nprint(output)\n# type your solution here:\nanswer = [len(x) for x in text.split()]\nprint(answer)\n# It could be useful to store the original words in the list, as well.\n# The for loop would look like this (note the extra parentheses, so\n# that we get tuples in the list):",
        "detail": "UdemyClasses.Comprehension.Challenge1",
        "documentation": {}
    },
    {
        "label": "answer",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.Challenge1",
        "description": "UdemyClasses.Comprehension.Challenge1",
        "peekOfCode": "answer = [len(x) for x in text.split()]\nprint(answer)\n# It could be useful to store the original words in the list, as well.\n# The for loop would look like this (note the extra parentheses, so\n# that we get tuples in the list):\noutput = []\nfor x in text.split():\n    output.append(int(x, len(x)))\nprint(output)\n# type the corresponding comprehension here:",
        "detail": "UdemyClasses.Comprehension.Challenge1",
        "documentation": {}
    },
    {
        "label": "output",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.Challenge1",
        "description": "UdemyClasses.Comprehension.Challenge1",
        "peekOfCode": "output = []\nfor x in text.split():\n    output.append(int(x, len(x)))\nprint(output)\n# type the corresponding comprehension here:\nanswer = [(x, len(x)) for x in text.split()]\nprint(answer)",
        "detail": "UdemyClasses.Comprehension.Challenge1",
        "documentation": {}
    },
    {
        "label": "answer",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.Challenge1",
        "description": "UdemyClasses.Comprehension.Challenge1",
        "peekOfCode": "answer = [(x, len(x)) for x in text.split()]\nprint(answer)",
        "detail": "UdemyClasses.Comprehension.Challenge1",
        "documentation": {}
    },
    {
        "label": "inch_measurement",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.Challenge2",
        "description": "UdemyClasses.Comprehension.Challenge2",
        "peekOfCode": "inch_measurement = (3, 8, 20)\ncm_measurement = [inch * 2.54 for inch in inch_measurement]\nprint(cm_measurement)\n# Once you've got the correct values, change the code to produce a tuple, rather than a list.  # noqa\ncm_measurement = tuple([inch * 2.54 for inch in inch_measurement])\nprint(cm_measurement)",
        "detail": "UdemyClasses.Comprehension.Challenge2",
        "documentation": {}
    },
    {
        "label": "cm_measurement",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.Challenge2",
        "description": "UdemyClasses.Comprehension.Challenge2",
        "peekOfCode": "cm_measurement = [inch * 2.54 for inch in inch_measurement]\nprint(cm_measurement)\n# Once you've got the correct values, change the code to produce a tuple, rather than a list.  # noqa\ncm_measurement = tuple([inch * 2.54 for inch in inch_measurement])\nprint(cm_measurement)",
        "detail": "UdemyClasses.Comprehension.Challenge2",
        "documentation": {}
    },
    {
        "label": "cm_measurement",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.Challenge2",
        "description": "UdemyClasses.Comprehension.Challenge2",
        "peekOfCode": "cm_measurement = tuple([inch * 2.54 for inch in inch_measurement])\nprint(cm_measurement)",
        "detail": "UdemyClasses.Comprehension.Challenge2",
        "documentation": {}
    },
    {
        "label": "fizzbuzz",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.compchallenge1",
        "description": "UdemyClasses.Comprehension.compchallenge1",
        "peekOfCode": "fizzbuzz = [\"fizz buzz\" if x % 15 == 0 else \"fizz\" if x % 3 == 0 else \"buzz\" if x % 5 == 0 else str(x)\n            for x in range(1, 31)]\nprint(fizzbuzz)\nfor buzz in fizzbuzz:\n    print(buzz.center(12, '*'))  # This will print the output using 12 characters in the centered by asterisks.  # noqa",
        "detail": "UdemyClasses.Comprehension.compchallenge1",
        "documentation": {}
    },
    {
        "label": "locations",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.compchallenge2",
        "description": "UdemyClasses.Comprehension.compchallenge2",
        "peekOfCode": "locations = {0: \"You are sitting in front of a computer learning Python\",\n             1: \"You are standing at the end of a road before a small brick building\",  # noqa\n             2: \"You are at the top of a hill\",\n             3: \"You are inside a building, a well house for a small stream\",\n             4: \"You are in a valley beside a stream\",\n             5: \"You are in the forest\"}\nleaves = {0: {\"Q\": 0},\n         1: {\"W\": 2, \"E\": 3, \"N\": 5, \"S\": 4, \"Q\": 0},\n         2: {\"N\": 5, \"Q\": 0},\n         3: {\"W\": 1, \"Q\": 0},",
        "detail": "UdemyClasses.Comprehension.compchallenge2",
        "documentation": {}
    },
    {
        "label": "leaves",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.compchallenge2",
        "description": "UdemyClasses.Comprehension.compchallenge2",
        "peekOfCode": "leaves = {0: {\"Q\": 0},\n         1: {\"W\": 2, \"E\": 3, \"N\": 5, \"S\": 4, \"Q\": 0},\n         2: {\"N\": 5, \"Q\": 0},\n         3: {\"W\": 1, \"Q\": 0},\n         4: {\"N\": 1, \"W\": 2, \"Q\": 0},\n         5: {\"W\": 2, \"S\": 1, \"Q\": 0}}\nLOC = 1\nforest = [locations[leave] for leave in leaves if LOC in leaves[leave].values()]\nprint(forest)\nforest = []",
        "detail": "UdemyClasses.Comprehension.compchallenge2",
        "documentation": {}
    },
    {
        "label": "LOC",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.compchallenge2",
        "description": "UdemyClasses.Comprehension.compchallenge2",
        "peekOfCode": "LOC = 1\nforest = [locations[leave] for leave in leaves if LOC in leaves[leave].values()]\nprint(forest)\nforest = []\nfor leave in leaves:\n    if LOC in leaves[leave].values():\n        forest.append(locations[leave])\nprint(forest)\nprint()\n# for loc in sorted(locations):",
        "detail": "UdemyClasses.Comprehension.compchallenge2",
        "documentation": {}
    },
    {
        "label": "forest",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.compchallenge2",
        "description": "UdemyClasses.Comprehension.compchallenge2",
        "peekOfCode": "forest = [locations[leave] for leave in leaves if LOC in leaves[leave].values()]\nprint(forest)\nforest = []\nfor leave in leaves:\n    if LOC in leaves[leave].values():\n        forest.append(locations[leave])\nprint(forest)\nprint()\n# for loc in sorted(locations):\n#     forest = [f\"{leave}, {locations[leave]}\" for leave in leaves if LOC in leaves[leave].values()]  # noqa",
        "detail": "UdemyClasses.Comprehension.compchallenge2",
        "documentation": {}
    },
    {
        "label": "forest",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.compchallenge2",
        "description": "UdemyClasses.Comprehension.compchallenge2",
        "peekOfCode": "forest = []\nfor leave in leaves:\n    if LOC in leaves[leave].values():\n        forest.append(locations[leave])\nprint(forest)\nprint()\n# for loc in sorted(locations):\n#     forest = [f\"{leave}, {locations[leave]}\" for leave in leaves if LOC in leaves[leave].values()]  # noqa\n#     print(f\"Locations leading to {loc}\", end='\\t')\n#     print(forest)",
        "detail": "UdemyClasses.Comprehension.compchallenge2",
        "documentation": {}
    },
    {
        "label": "NESTED_LOOP",
        "kind": 2,
        "importPath": "UdemyClasses.Comprehension.compchallenge2b",
        "description": "UdemyClasses.Comprehension.compchallenge2b",
        "peekOfCode": "def NESTED_LOOP():\n    result = []\n    for loc in sorted(locations):\n        leaves_to_destination_1 = []\n        for leave in leaves:\n            if loc in leaves[leave].values():\n                leaves_to_destination_1.append((leave, locations[leave]))\n        result.append(leaves_to_destination_1)\n    # print the result before returning\n    for x in result:",
        "detail": "UdemyClasses.Comprehension.compchallenge2b",
        "documentation": {}
    },
    {
        "label": "LOOP_COMP",
        "kind": 2,
        "importPath": "UdemyClasses.Comprehension.compchallenge2b",
        "description": "UdemyClasses.Comprehension.compchallenge2b",
        "peekOfCode": "def LOOP_COMP():\n    result = []\n    for loc in sorted(locations):\n        leaves_to_destination_2 = [(leave, locations[leave]) for leave in leaves if loc in leaves[leave].values()]  # noqa\n        result.append(leaves_to_destination_2)\n    # print the result before returning\n    for x in result:\n        pass\n    return result\ndef NESTED_COMP():",
        "detail": "UdemyClasses.Comprehension.compchallenge2b",
        "documentation": {}
    },
    {
        "label": "NESTED_COMP",
        "kind": 2,
        "importPath": "UdemyClasses.Comprehension.compchallenge2b",
        "description": "UdemyClasses.Comprehension.compchallenge2b",
        "peekOfCode": "def NESTED_COMP():\n    leaves_to_destination_3 = [[(leave, locations[leave]) for leave in leaves\n                                if loc in leaves[leave].values()]\n                               for loc in sorted(locations)]\n    # print the result before returning\n    for x in leaves_to_destination_3:\n        pass\n    return leaves_to_destination_3\ndef NESTED_GEN():\n    leaves_to_destination_3 = ([(leave, locations[leave]) for leave in leaves",
        "detail": "UdemyClasses.Comprehension.compchallenge2b",
        "documentation": {}
    },
    {
        "label": "NESTED_GEN",
        "kind": 2,
        "importPath": "UdemyClasses.Comprehension.compchallenge2b",
        "description": "UdemyClasses.Comprehension.compchallenge2b",
        "peekOfCode": "def NESTED_GEN():\n    leaves_to_destination_3 = ([(leave, locations[leave]) for leave in leaves\n                                if loc in leaves[leave].values()]\n                               for loc in sorted(locations))\n    # print the result before returning\n    for x in leaves_to_destination_3:\n        pass\n    return leaves_to_destination_3\n# In this module we are using the timeit module. We are converting the list\n# comprehensions into strings by put them in triple quotes.",
        "detail": "UdemyClasses.Comprehension.compchallenge2b",
        "documentation": {}
    },
    {
        "label": "setup",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.compchallenge2b",
        "description": "UdemyClasses.Comprehension.compchallenge2b",
        "peekOfCode": "setup = \"\"\"\\\ngc.enable()\nlocations = {0: \"You are sitting in front of a computer learning Python\",\n             1: \"You are standing at the end of a road before a small brick building\",  # noqa\n             2: \"You are at the top of a hill\",\n             3: \"You are inside a building, a well house for a small stream\",\n             4: \"You are in a valley beside a stream\",\n             5: \"You are in the forest\"}\nleaves = {0: {\"Q\": 0},\n          1: {\"W\": 2, \"E\": 3, \"N\": 5, \"S\": 4, \"Q\": 0},",
        "detail": "UdemyClasses.Comprehension.compchallenge2b",
        "documentation": {}
    },
    {
        "label": "locations",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.compchallenge2b",
        "description": "UdemyClasses.Comprehension.compchallenge2b",
        "peekOfCode": "locations = {0: \"You are sitting in front of a computer learning Python\",\n             1: \"You are standing at the end of a road before a small brick building\",  # noqa\n             2: \"You are at the top of a hill\",\n             3: \"You are inside a building, a well house for a small stream\",\n             4: \"You are in a valley beside a stream\",\n             5: \"You are in the forest\"}\nleaves = {0: {\"Q\": 0},\n          1: {\"W\": 2, \"E\": 3, \"N\": 5, \"S\": 4, \"Q\": 0},\n          2: {\"N\": 5, \"Q\": 0},\n          3: {\"W\": 1, \"Q\": 0},",
        "detail": "UdemyClasses.Comprehension.compchallenge2b",
        "documentation": {}
    },
    {
        "label": "leaves",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.compchallenge2b",
        "description": "UdemyClasses.Comprehension.compchallenge2b",
        "peekOfCode": "leaves = {0: {\"Q\": 0},\n          1: {\"W\": 2, \"E\": 3, \"N\": 5, \"S\": 4, \"Q\": 0},\n          2: {\"N\": 5, \"Q\": 0},\n          3: {\"W\": 1, \"Q\": 0},\n          4: {\"N\": 1, \"W\": 2, \"Q\": 0},\n          5: {\"W\": 2, \"S\": 1, \"Q\": 0}}\n\"\"\"\nlocations = {0: \"You are sitting in front of a computer learning Python\",\n             1: \"You are standing at the end of a road before a small brick building\",  # noqa\n             2: \"You are at the top of a hill\",",
        "detail": "UdemyClasses.Comprehension.compchallenge2b",
        "documentation": {}
    },
    {
        "label": "locations",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.compchallenge2b",
        "description": "UdemyClasses.Comprehension.compchallenge2b",
        "peekOfCode": "locations = {0: \"You are sitting in front of a computer learning Python\",\n             1: \"You are standing at the end of a road before a small brick building\",  # noqa\n             2: \"You are at the top of a hill\",\n             3: \"You are inside a building, a well house for a small stream\",\n             4: \"You are in a valley beside a stream\",\n             5: \"You are in the forest\"}\nleaves = {0: {\"Q\": 0},\n          1: {\"W\": 2, \"E\": 3, \"N\": 5, \"S\": 4, \"Q\": 0},\n          2: {\"N\": 5, \"Q\": 0},\n          3: {\"W\": 1, \"Q\": 0},",
        "detail": "UdemyClasses.Comprehension.compchallenge2b",
        "documentation": {}
    },
    {
        "label": "leaves",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.compchallenge2b",
        "description": "UdemyClasses.Comprehension.compchallenge2b",
        "peekOfCode": "leaves = {0: {\"Q\": 0},\n          1: {\"W\": 2, \"E\": 3, \"N\": 5, \"S\": 4, \"Q\": 0},\n          2: {\"N\": 5, \"Q\": 0},\n          3: {\"W\": 1, \"Q\": 0},\n          4: {\"N\": 1, \"W\": 2, \"Q\": 0}}\ndef NESTED_LOOP():\n    result = []\n    for loc in sorted(locations):\n        leaves_to_destination_1 = []\n        for leave in leaves:",
        "detail": "UdemyClasses.Comprehension.compchallenge2b",
        "documentation": {}
    },
    {
        "label": "result_1",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.compchallenge2b",
        "description": "UdemyClasses.Comprehension.compchallenge2b",
        "peekOfCode": "result_1 = timeit.timeit(NESTED_LOOP, setup, number=1000)\nresult_2 = timeit.timeit(LOOP_COMP, setup, number=1000)\nresult_3 = timeit.timeit(NESTED_COMP, setup, number=1000)\nresult_4 = timeit.timeit(NESTED_GEN, setup, number=1000)\nprint(f\"Nested loop:\\t{result_1}\")\nprint(f\"LOOP_COMP:\\t{result_2}\")\nprint(f\"Nested_COMP:\\t{result_3}\")\nprint(f\"Nested_GEN:\\t{result_4}\")",
        "detail": "UdemyClasses.Comprehension.compchallenge2b",
        "documentation": {}
    },
    {
        "label": "result_2",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.compchallenge2b",
        "description": "UdemyClasses.Comprehension.compchallenge2b",
        "peekOfCode": "result_2 = timeit.timeit(LOOP_COMP, setup, number=1000)\nresult_3 = timeit.timeit(NESTED_COMP, setup, number=1000)\nresult_4 = timeit.timeit(NESTED_GEN, setup, number=1000)\nprint(f\"Nested loop:\\t{result_1}\")\nprint(f\"LOOP_COMP:\\t{result_2}\")\nprint(f\"Nested_COMP:\\t{result_3}\")\nprint(f\"Nested_GEN:\\t{result_4}\")",
        "detail": "UdemyClasses.Comprehension.compchallenge2b",
        "documentation": {}
    },
    {
        "label": "result_3",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.compchallenge2b",
        "description": "UdemyClasses.Comprehension.compchallenge2b",
        "peekOfCode": "result_3 = timeit.timeit(NESTED_COMP, setup, number=1000)\nresult_4 = timeit.timeit(NESTED_GEN, setup, number=1000)\nprint(f\"Nested loop:\\t{result_1}\")\nprint(f\"LOOP_COMP:\\t{result_2}\")\nprint(f\"Nested_COMP:\\t{result_3}\")\nprint(f\"Nested_GEN:\\t{result_4}\")",
        "detail": "UdemyClasses.Comprehension.compchallenge2b",
        "documentation": {}
    },
    {
        "label": "result_4",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.compchallenge2b",
        "description": "UdemyClasses.Comprehension.compchallenge2b",
        "peekOfCode": "result_4 = timeit.timeit(NESTED_GEN, setup, number=1000)\nprint(f\"Nested loop:\\t{result_1}\")\nprint(f\"LOOP_COMP:\\t{result_2}\")\nprint(f\"Nested_COMP:\\t{result_3}\")\nprint(f\"Nested_GEN:\\t{result_4}\")",
        "detail": "UdemyClasses.Comprehension.compchallenge2b",
        "documentation": {}
    },
    {
        "label": "menu",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.condcomp",
        "description": "UdemyClasses.Comprehension.condcomp",
        "peekOfCode": "menu = [\n    [\"egg\", \"spam\", \"bacon\"],\n    [\"egg\", \"sausage\", \"bacon\"],\n    [\"egg\", \"spam\"],\n    [\"egg\", \"bacon\", \"spam\"],\n    [\"egg\", \"bacon\", \"sausage\", \"spam\"],\n    [\"spam\", \"bacon\", \"sausage\", \"spam\"],\n    [\"spam\", \"egg\", \"spam\", \"spam\", \"bacon\", \"spam\"],\n    [\"spam\", \"egg\", \"sausage\", \"spam\"],\n    [\"chicken\", \"chips\"]",
        "detail": "UdemyClasses.Comprehension.condcomp",
        "documentation": {}
    },
    {
        "label": "meals",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.condcomp",
        "description": "UdemyClasses.Comprehension.condcomp",
        "peekOfCode": "meals = []\nfor meal in menu:\n    if \"spam\" not in meal:\n        meals.append(meal)\n    else:\n        meals.append([\"a meal was skipped\"])\nprint(meal)\n# meals = [meal for meal in menu if \"spam\" not in meal if \"chicken\" not in meal]  # noqa\nmeals = [meal for meal in menu if \"spam\" not in meal and \"chicken\" not in meal]\nprint(meals)",
        "detail": "UdemyClasses.Comprehension.condcomp",
        "documentation": {}
    },
    {
        "label": "meals",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.condcomp",
        "description": "UdemyClasses.Comprehension.condcomp",
        "peekOfCode": "meals = [meal for meal in menu if \"spam\" not in meal and \"chicken\" not in meal]\nprint(meals)\nfussy_meals = [meal for meal in menu if \"spam\" in meal or \"eggs\" in meal if not\n               (\"bacon\" in meal and \"sausage\" in meal)]\nprint(fussy_meals)\nfussy_meals = [meal for meal in menu if\n               (\"spam\" in meal or \"eggs\" in meal) and not\n               (\"bacon\" in meal and \"sausage\" in meal)]\nprint(fussy_meals)",
        "detail": "UdemyClasses.Comprehension.condcomp",
        "documentation": {}
    },
    {
        "label": "fussy_meals",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.condcomp",
        "description": "UdemyClasses.Comprehension.condcomp",
        "peekOfCode": "fussy_meals = [meal for meal in menu if \"spam\" in meal or \"eggs\" in meal if not\n               (\"bacon\" in meal and \"sausage\" in meal)]\nprint(fussy_meals)\nfussy_meals = [meal for meal in menu if\n               (\"spam\" in meal or \"eggs\" in meal) and not\n               (\"bacon\" in meal and \"sausage\" in meal)]\nprint(fussy_meals)",
        "detail": "UdemyClasses.Comprehension.condcomp",
        "documentation": {}
    },
    {
        "label": "fussy_meals",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.condcomp",
        "description": "UdemyClasses.Comprehension.condcomp",
        "peekOfCode": "fussy_meals = [meal for meal in menu if\n               (\"spam\" in meal or \"eggs\" in meal) and not\n               (\"bacon\" in meal and \"sausage\" in meal)]\nprint(fussy_meals)",
        "detail": "UdemyClasses.Comprehension.condcomp",
        "documentation": {}
    },
    {
        "label": "menu",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.condcomp1",
        "description": "UdemyClasses.Comprehension.condcomp1",
        "peekOfCode": "menu = [\n    [\"egg\", \"spam\", \"bacon\"],\n    [\"egg\", \"sausage\", \"bacon\"],\n    [\"egg\", \"spam\"],\n    [\"egg\", \"bacon\", \"spam\"],\n    [\"egg\", \"bacon\", \"sausage\", \"spam\"],\n    [\"spam\", \"bacon\", \"sausage\", \"spam\"],\n    [\"spam\", \"egg\", \"spam\", \"spam\", \"bacon\", \"spam\"],\n    [\"spam\", \"egg\", \"sausage\", \"spam\"],\n    [\"chicken\", \"chips\"]",
        "detail": "UdemyClasses.Comprehension.condcomp1",
        "documentation": {}
    },
    {
        "label": "items",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.condcomp1",
        "description": "UdemyClasses.Comprehension.condcomp1",
        "peekOfCode": "items = set()\nfor meal in menu:\n    for item in meal:\n        items.add(item)\nprint(items)\nprint()\nfor meal in menu:\n    for item in items:\n        if item in meal:\n            print(f\"{(meal)} contains {item}\")",
        "detail": "UdemyClasses.Comprehension.condcomp1",
        "documentation": {}
    },
    {
        "label": "TEXT",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.examples",
        "description": "UdemyClasses.Comprehension.examples",
        "peekOfCode": "TEXT = \"what have the romans ever done for us\"\ncapitals = [char.upper() for char in TEXT]\nprint(capitals)\nwords = [word.upper() for word in TEXT.split(' ')]\nprint(words)\nlc_words = TEXT.split(' ')\nprint(lc_words)",
        "detail": "UdemyClasses.Comprehension.examples",
        "documentation": {}
    },
    {
        "label": "capitals",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.examples",
        "description": "UdemyClasses.Comprehension.examples",
        "peekOfCode": "capitals = [char.upper() for char in TEXT]\nprint(capitals)\nwords = [word.upper() for word in TEXT.split(' ')]\nprint(words)\nlc_words = TEXT.split(' ')\nprint(lc_words)",
        "detail": "UdemyClasses.Comprehension.examples",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.examples",
        "description": "UdemyClasses.Comprehension.examples",
        "peekOfCode": "words = [word.upper() for word in TEXT.split(' ')]\nprint(words)\nlc_words = TEXT.split(' ')\nprint(lc_words)",
        "detail": "UdemyClasses.Comprehension.examples",
        "documentation": {}
    },
    {
        "label": "lc_words",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.examples",
        "description": "UdemyClasses.Comprehension.examples",
        "peekOfCode": "lc_words = TEXT.split(' ')\nprint(lc_words)",
        "detail": "UdemyClasses.Comprehension.examples",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.list comp",
        "description": "UdemyClasses.Comprehension.list comp",
        "peekOfCode": "numbers = [1, 2, 3, 4, 5, 6]\nnumber = int(input(\"Please enter a number, and I'll tell you which one is squared. \"))  # noqa\nsquares = [number ** 2 for number in numbers]\nindex_pos = numbers.index(number)\nprint(squares[index_pos])",
        "detail": "UdemyClasses.Comprehension.list comp",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.list comp",
        "description": "UdemyClasses.Comprehension.list comp",
        "peekOfCode": "number = int(input(\"Please enter a number, and I'll tell you which one is squared. \"))  # noqa\nsquares = [number ** 2 for number in numbers]\nindex_pos = numbers.index(number)\nprint(squares[index_pos])",
        "detail": "UdemyClasses.Comprehension.list comp",
        "documentation": {}
    },
    {
        "label": "squares",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.list comp",
        "description": "UdemyClasses.Comprehension.list comp",
        "peekOfCode": "squares = [number ** 2 for number in numbers]\nindex_pos = numbers.index(number)\nprint(squares[index_pos])",
        "detail": "UdemyClasses.Comprehension.list comp",
        "documentation": {}
    },
    {
        "label": "index_pos",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.list comp",
        "description": "UdemyClasses.Comprehension.list comp",
        "peekOfCode": "index_pos = numbers.index(number)\nprint(squares[index_pos])",
        "detail": "UdemyClasses.Comprehension.list comp",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.listfor",
        "description": "UdemyClasses.Comprehension.listfor",
        "peekOfCode": "numbers = [1, 2, 3, 4, 5, 6]\nnumber = int(input(\"Please enter a number, and I'll tell you which one is squared. \"))  # noqa\nsquares = []\nfor number in numbers:\n    squares.append(number ** 2)\nindex_pos = numbers.index(number)\nprint(squares[index_pos])",
        "detail": "UdemyClasses.Comprehension.listfor",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.listfor",
        "description": "UdemyClasses.Comprehension.listfor",
        "peekOfCode": "number = int(input(\"Please enter a number, and I'll tell you which one is squared. \"))  # noqa\nsquares = []\nfor number in numbers:\n    squares.append(number ** 2)\nindex_pos = numbers.index(number)\nprint(squares[index_pos])",
        "detail": "UdemyClasses.Comprehension.listfor",
        "documentation": {}
    },
    {
        "label": "squares",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.listfor",
        "description": "UdemyClasses.Comprehension.listfor",
        "peekOfCode": "squares = []\nfor number in numbers:\n    squares.append(number ** 2)\nindex_pos = numbers.index(number)\nprint(squares[index_pos])",
        "detail": "UdemyClasses.Comprehension.listfor",
        "documentation": {}
    },
    {
        "label": "index_pos",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.listfor",
        "description": "UdemyClasses.Comprehension.listfor",
        "peekOfCode": "index_pos = numbers.index(number)\nprint(squares[index_pos])",
        "detail": "UdemyClasses.Comprehension.listfor",
        "documentation": {}
    },
    {
        "label": "burgers",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.nested1",
        "description": "UdemyClasses.Comprehension.nested1",
        "peekOfCode": "burgers = [\"beef\", \"chicken\", \"spicy bean\"]\ntoppings = [\"cheese\", \"egg\", \"beans\", \"spam\"]\nfor meals in [(burger, toppings) for burger in burgers for topping in toppings]:\n    print(meals)\n# The above code is a nested list comprehension.\nprint()\n# for burger in burgers:\n#     for topping in toppings:\n#         print((burger, topping))\n# The above code is a nested for loop.",
        "detail": "UdemyClasses.Comprehension.nested1",
        "documentation": {}
    },
    {
        "label": "toppings",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.nested1",
        "description": "UdemyClasses.Comprehension.nested1",
        "peekOfCode": "toppings = [\"cheese\", \"egg\", \"beans\", \"spam\"]\nfor meals in [(burger, toppings) for burger in burgers for topping in toppings]:\n    print(meals)\n# The above code is a nested list comprehension.\nprint()\n# for burger in burgers:\n#     for topping in toppings:\n#         print((burger, topping))\n# The above code is a nested for loop.\nfor nested_meals in [[(burger, toppings) for burger in burgers] for topping in toppings]:  # noqa",
        "detail": "UdemyClasses.Comprehension.nested1",
        "documentation": {}
    },
    {
        "label": "times",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.nested_challenge",
        "description": "UdemyClasses.Comprehension.nested_challenge",
        "peekOfCode": "times = [(i, i * j) for i in range(1, 11) for j in range(1, 1)]\nprint(times)\nfor x, y in [(i, i * j) for i in range(1, 11) for j in range(1, 1)]:\n    print(x, y)\ntimes2 = [[(i, i * j) for i in range(1, 11)] for j in range(1, 1)]\nprint(times2)\nfor x, y in ((i, i * j) for i in range(1, 11) for j in range(1, 1)):\n    print(x, y)",
        "detail": "UdemyClasses.Comprehension.nested_challenge",
        "documentation": {}
    },
    {
        "label": "times2",
        "kind": 5,
        "importPath": "UdemyClasses.Comprehension.nested_challenge",
        "description": "UdemyClasses.Comprehension.nested_challenge",
        "peekOfCode": "times2 = [[(i, i * j) for i in range(1, 11)] for j in range(1, 1)]\nprint(times2)\nfor x, y in ((i, i * j) for i in range(1, 11) for j in range(1, 1)):\n    print(x, y)",
        "detail": "UdemyClasses.Comprehension.nested_challenge",
        "documentation": {}
    },
    {
        "label": "fact",
        "kind": 2,
        "importPath": "UdemyClasses.Comprehension.timeitchallenge",
        "description": "UdemyClasses.Comprehension.timeitchallenge",
        "peekOfCode": "def fact(n):\n    \"\"\" This function returns the factorial.\"\"\"\n    result = 1\n    if n > 1:\n        for f in range(2, n + 1):\n            result *= f\n    return result\ndef factorial(n):\n    \"\"\" This function returns the factorial\"\"\"\n    # n! can also be defined as n * (n-1)!",
        "detail": "UdemyClasses.Comprehension.timeitchallenge",
        "documentation": {}
    },
    {
        "label": "factorial",
        "kind": 2,
        "importPath": "UdemyClasses.Comprehension.timeitchallenge",
        "description": "UdemyClasses.Comprehension.timeitchallenge",
        "peekOfCode": "def factorial(n):\n    \"\"\" This function returns the factorial\"\"\"\n    # n! can also be defined as n * (n-1)!\n    if n <= 1:\n        return 1\n    else:\n        return n * factorial(n-1)\nif __name__ == \"__main__\":\n    list1 = timeit.repeat(\"x = fact(130)\", setup=\"from __main__ import fact\", number = 10000, repeat = 6)  # noqa\n    list2 = timeit.repeat(\"x = factorial(130)\", setup=\"from __main__ import factorial\", number = 10000, repeat = 6)  # noqa",
        "detail": "UdemyClasses.Comprehension.timeitchallenge",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "UdemyClasses.createDB.contacts2",
        "description": "UdemyClasses.createDB.contacts2",
        "peekOfCode": "db = sqlite3.connect(\"contacts.sqlite\")\nnew_email = \"newemail@update.com\"\nphone = input(\"Please enter a phone number \")\n# update_sql = \"UPDATE contacts SET email = '{}' WHERE phone = {}\".format(new_email, phone)  # noqa\nupdate_sql = \"UPDATE contacts SET email = ? WHERE phone = ?\"  # noqa\n# print(update_sql)\nupdate_cursor = db.cursor()\nupdate_cursor.execute(update_sql, (new_email, phone))\nprint(\"{} rows updated\".format(update_cursor.rowcount))\nprint()",
        "detail": "UdemyClasses.createDB.contacts2",
        "documentation": {}
    },
    {
        "label": "new_email",
        "kind": 5,
        "importPath": "UdemyClasses.createDB.contacts2",
        "description": "UdemyClasses.createDB.contacts2",
        "peekOfCode": "new_email = \"newemail@update.com\"\nphone = input(\"Please enter a phone number \")\n# update_sql = \"UPDATE contacts SET email = '{}' WHERE phone = {}\".format(new_email, phone)  # noqa\nupdate_sql = \"UPDATE contacts SET email = ? WHERE phone = ?\"  # noqa\n# print(update_sql)\nupdate_cursor = db.cursor()\nupdate_cursor.execute(update_sql, (new_email, phone))\nprint(\"{} rows updated\".format(update_cursor.rowcount))\nprint()\nprint(\"Are connections the same: {}\".format(update_cursor.connection == db))",
        "detail": "UdemyClasses.createDB.contacts2",
        "documentation": {}
    },
    {
        "label": "phone",
        "kind": 5,
        "importPath": "UdemyClasses.createDB.contacts2",
        "description": "UdemyClasses.createDB.contacts2",
        "peekOfCode": "phone = input(\"Please enter a phone number \")\n# update_sql = \"UPDATE contacts SET email = '{}' WHERE phone = {}\".format(new_email, phone)  # noqa\nupdate_sql = \"UPDATE contacts SET email = ? WHERE phone = ?\"  # noqa\n# print(update_sql)\nupdate_cursor = db.cursor()\nupdate_cursor.execute(update_sql, (new_email, phone))\nprint(\"{} rows updated\".format(update_cursor.rowcount))\nprint()\nprint(\"Are connections the same: {}\".format(update_cursor.connection == db))\nprint()",
        "detail": "UdemyClasses.createDB.contacts2",
        "documentation": {}
    },
    {
        "label": "update_sql",
        "kind": 5,
        "importPath": "UdemyClasses.createDB.contacts2",
        "description": "UdemyClasses.createDB.contacts2",
        "peekOfCode": "update_sql = \"UPDATE contacts SET email = ? WHERE phone = ?\"  # noqa\n# print(update_sql)\nupdate_cursor = db.cursor()\nupdate_cursor.execute(update_sql, (new_email, phone))\nprint(\"{} rows updated\".format(update_cursor.rowcount))\nprint()\nprint(\"Are connections the same: {}\".format(update_cursor.connection == db))\nprint()\nupdate_cursor.connection.commit()\n# this is the same as db.commit() # calling dot commit on the wrong connection could cause bugs. # noqa",
        "detail": "UdemyClasses.createDB.contacts2",
        "documentation": {}
    },
    {
        "label": "update_cursor",
        "kind": 5,
        "importPath": "UdemyClasses.createDB.contacts2",
        "description": "UdemyClasses.createDB.contacts2",
        "peekOfCode": "update_cursor = db.cursor()\nupdate_cursor.execute(update_sql, (new_email, phone))\nprint(\"{} rows updated\".format(update_cursor.rowcount))\nprint()\nprint(\"Are connections the same: {}\".format(update_cursor.connection == db))\nprint()\nupdate_cursor.connection.commit()\n# this is the same as db.commit() # calling dot commit on the wrong connection could cause bugs. # noqa\nupdate_cursor.close()\nfor name, phone, email in db.execute(\"SELECT * FROM contacts\"):",
        "detail": "UdemyClasses.createDB.contacts2",
        "documentation": {}
    },
    {
        "label": "getint",
        "kind": 2,
        "importPath": "UdemyClasses.createDB.get_ints",
        "description": "UdemyClasses.createDB.get_ints",
        "peekOfCode": "def getint(prompt):\n    while True:\n        try:\n            number = int(input(prompt))\n            return number\n        except ValueError:\n            print(\"Invalid number entered, please try again\")\n        except EOFError:\n            sys.exit(0)\n        except KeyboardInterrupt:",
        "detail": "UdemyClasses.createDB.get_ints",
        "documentation": {}
    },
    {
        "label": "first_number",
        "kind": 5,
        "importPath": "UdemyClasses.createDB.get_ints",
        "description": "UdemyClasses.createDB.get_ints",
        "peekOfCode": "first_number = getint(\"Please enter first number \")\nsecond_number = getint(\"Please enter second number \")\ntry:\n    print(\"{} divided by {} is {:.2f}\".format(first_number, second_number, first_number / second_number))   # noqa\nexcept ZeroDivisionError:\n    print(\"You can't divide by zero\")\n    sys.exit(2)\nelse:\n    print(\"Division performed successfully\")",
        "detail": "UdemyClasses.createDB.get_ints",
        "documentation": {}
    },
    {
        "label": "second_number",
        "kind": 5,
        "importPath": "UdemyClasses.createDB.get_ints",
        "description": "UdemyClasses.createDB.get_ints",
        "peekOfCode": "second_number = getint(\"Please enter second number \")\ntry:\n    print(\"{} divided by {} is {:.2f}\".format(first_number, second_number, first_number / second_number))   # noqa\nexcept ZeroDivisionError:\n    print(\"You can't divide by zero\")\n    sys.exit(2)\nelse:\n    print(\"Division performed successfully\")",
        "detail": "UdemyClasses.createDB.get_ints",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "UdemyClasses.createDB-LivingRoom-Computer.checkdb",
        "description": "UdemyClasses.createDB-LivingRoom-Computer.checkdb",
        "peekOfCode": "conn = sqlite3.connect(\"contacts.sqlite\")\nname = input(\"Please enter a name to search for \")\nfor row in conn.execute(\"SELECT * FROM contacts WHERE name LIKE ?\", (name,)):\n# the name at the end in parathesis has comma with it to make it a tuple. \n# If you do not use a comma you will get a ProgrammingError:\n# Incorrect number of bindings supplied. The current statement uses 1, and there are 5 supplied. #noqa\n# Also in that line you can use LIKE so that the query does not have to be case sensative. #noqa\n    print(row)  \nconn.close()",
        "detail": "UdemyClasses.createDB-LivingRoom-Computer.checkdb",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "UdemyClasses.createDB-LivingRoom-Computer.checkdb",
        "description": "UdemyClasses.createDB-LivingRoom-Computer.checkdb",
        "peekOfCode": "name = input(\"Please enter a name to search for \")\nfor row in conn.execute(\"SELECT * FROM contacts WHERE name LIKE ?\", (name,)):\n# the name at the end in parathesis has comma with it to make it a tuple. \n# If you do not use a comma you will get a ProgrammingError:\n# Incorrect number of bindings supplied. The current statement uses 1, and there are 5 supplied. #noqa\n# Also in that line you can use LIKE so that the query does not have to be case sensative. #noqa\n    print(row)  \nconn.close()",
        "detail": "UdemyClasses.createDB-LivingRoom-Computer.checkdb",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "UdemyClasses.createDB-LivingRoom-Computer.contacts",
        "description": "UdemyClasses.createDB-LivingRoom-Computer.contacts",
        "peekOfCode": "db = sqlite3.connect(\"contacts.sqlite\")\ndb.execute(\"CREATE TABLE IF NOT EXISTS contacts (name TEXT, phone INTEGER, email TEXT)\")\ndb.execute(\"INSERT INTO contacts(name, phone, email) VALUES('Grevy', 7542134200, 'grevyjr@gmail.com')\")  # noqa: E501\ndb.execute(\"INSERT INTO contacts VALUES('Mia', 7542314300, 'mia@gmail.com')\")\ncursor = db.cursor()\ncursor.execute(\"SELECT * FROM contacts\")\n# print (cursor.fetchall())\nprint(cursor.fetchone())\nprint(cursor.fetchone())\nprint(cursor.fetchone())",
        "detail": "UdemyClasses.createDB-LivingRoom-Computer.contacts",
        "documentation": {}
    },
    {
        "label": "cursor",
        "kind": 5,
        "importPath": "UdemyClasses.createDB-LivingRoom-Computer.contacts",
        "description": "UdemyClasses.createDB-LivingRoom-Computer.contacts",
        "peekOfCode": "cursor = db.cursor()\ncursor.execute(\"SELECT * FROM contacts\")\n# print (cursor.fetchall())\nprint(cursor.fetchone())\nprint(cursor.fetchone())\nprint(cursor.fetchone())\nfor name, phone, email in cursor:\n    print(name)\n    print(phone)\n    print(email)",
        "detail": "UdemyClasses.createDB-LivingRoom-Computer.contacts",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "UdemyClasses.createDB-LivingRoom-Computer.contacts2",
        "description": "UdemyClasses.createDB-LivingRoom-Computer.contacts2",
        "peekOfCode": "db = sqlite3.connect(\"contacts.sqlite\")\nnew_email = \"newupdate@update.com\"\nphone = input(\"Please enter a phone number \")\nupdate_sql = \"UPDATE contacts SET email = ? WHERE phone = ?\"\nprint(update_sql)\nupdate_cursor = db.cursor()\nupdate_cursor.execute(update_sql, (new_email, phone))\nprint(\"{} rows updated\".format(update_cursor.rowcount))\nprint()\nprint(\"Are connections the same: {}\".format(update_cursor.connection == db))",
        "detail": "UdemyClasses.createDB-LivingRoom-Computer.contacts2",
        "documentation": {}
    },
    {
        "label": "new_email",
        "kind": 5,
        "importPath": "UdemyClasses.createDB-LivingRoom-Computer.contacts2",
        "description": "UdemyClasses.createDB-LivingRoom-Computer.contacts2",
        "peekOfCode": "new_email = \"newupdate@update.com\"\nphone = input(\"Please enter a phone number \")\nupdate_sql = \"UPDATE contacts SET email = ? WHERE phone = ?\"\nprint(update_sql)\nupdate_cursor = db.cursor()\nupdate_cursor.execute(update_sql, (new_email, phone))\nprint(\"{} rows updated\".format(update_cursor.rowcount))\nprint()\nprint(\"Are connections the same: {}\".format(update_cursor.connection == db))\nprint()",
        "detail": "UdemyClasses.createDB-LivingRoom-Computer.contacts2",
        "documentation": {}
    },
    {
        "label": "phone",
        "kind": 5,
        "importPath": "UdemyClasses.createDB-LivingRoom-Computer.contacts2",
        "description": "UdemyClasses.createDB-LivingRoom-Computer.contacts2",
        "peekOfCode": "phone = input(\"Please enter a phone number \")\nupdate_sql = \"UPDATE contacts SET email = ? WHERE phone = ?\"\nprint(update_sql)\nupdate_cursor = db.cursor()\nupdate_cursor.execute(update_sql, (new_email, phone))\nprint(\"{} rows updated\".format(update_cursor.rowcount))\nprint()\nprint(\"Are connections the same: {}\".format(update_cursor.connection == db))\nprint()\nupdate_cursor.connection.commit()",
        "detail": "UdemyClasses.createDB-LivingRoom-Computer.contacts2",
        "documentation": {}
    },
    {
        "label": "update_sql",
        "kind": 5,
        "importPath": "UdemyClasses.createDB-LivingRoom-Computer.contacts2",
        "description": "UdemyClasses.createDB-LivingRoom-Computer.contacts2",
        "peekOfCode": "update_sql = \"UPDATE contacts SET email = ? WHERE phone = ?\"\nprint(update_sql)\nupdate_cursor = db.cursor()\nupdate_cursor.execute(update_sql, (new_email, phone))\nprint(\"{} rows updated\".format(update_cursor.rowcount))\nprint()\nprint(\"Are connections the same: {}\".format(update_cursor.connection == db))\nprint()\nupdate_cursor.connection.commit()\n# this is the same as db.commit() # calling dot commit on the wrong connection could cause bugs. # noqa",
        "detail": "UdemyClasses.createDB-LivingRoom-Computer.contacts2",
        "documentation": {}
    },
    {
        "label": "update_cursor",
        "kind": 5,
        "importPath": "UdemyClasses.createDB-LivingRoom-Computer.contacts2",
        "description": "UdemyClasses.createDB-LivingRoom-Computer.contacts2",
        "peekOfCode": "update_cursor = db.cursor()\nupdate_cursor.execute(update_sql, (new_email, phone))\nprint(\"{} rows updated\".format(update_cursor.rowcount))\nprint()\nprint(\"Are connections the same: {}\".format(update_cursor.connection == db))\nprint()\nupdate_cursor.connection.commit()\n# this is the same as db.commit() # calling dot commit on the wrong connection could cause bugs. # noqa\nupdate_cursor.close()\nfor name, phone, email in db.execute(\"SELECT * FROM contacts\"):",
        "detail": "UdemyClasses.createDB-LivingRoom-Computer.contacts2",
        "documentation": {}
    },
    {
        "label": "entries",
        "kind": 5,
        "importPath": "UdemyClasses.map.allgotcha",
        "description": "UdemyClasses.map.allgotcha",
        "peekOfCode": "entries = []\nif entries:\n    print(\"all: {}\".format(all(entries)))\nelse:\n    print(False)\nprint(\"any: {}\".format(any(entries)))\nresult = bool(entries) and all(entries)\nprint(result)",
        "detail": "UdemyClasses.map.allgotcha",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "UdemyClasses.map.allgotcha",
        "description": "UdemyClasses.map.allgotcha",
        "peekOfCode": "result = bool(entries) and all(entries)\nprint(result)",
        "detail": "UdemyClasses.map.allgotcha",
        "documentation": {}
    },
    {
        "label": "entries",
        "kind": 5,
        "importPath": "UdemyClasses.map.anyall",
        "description": "UdemyClasses.map.anyall",
        "peekOfCode": "entries = [1, 2, 3, 4, 5]\nprint(\"all: {}\".format(all(entries)))\nprint(\"any: {}\".format(any(entries)))\nprint(\"Iterable with a 'False' value\")\nentries_with_zero = [1, 2, 0, 4, 5]\nprint(\"all: {}\".format(all(entries_with_zero)))\nprint(\"any: {}\".format(any(entries_with_zero)))\nprint()\nprint(\"Values interpreted as False in Python\")\nprint(\"\"\"False; {0}",
        "detail": "UdemyClasses.map.anyall",
        "documentation": {}
    },
    {
        "label": "entries_with_zero",
        "kind": 5,
        "importPath": "UdemyClasses.map.anyall",
        "description": "UdemyClasses.map.anyall",
        "peekOfCode": "entries_with_zero = [1, 2, 0, 4, 5]\nprint(\"all: {}\".format(all(entries_with_zero)))\nprint(\"any: {}\".format(any(entries_with_zero)))\nprint()\nprint(\"Values interpreted as False in Python\")\nprint(\"\"\"False; {0}\nNone: {1}\n0: {2}\n0.0: {3}\nempty list []: {4}",
        "detail": "UdemyClasses.map.anyall",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "UdemyClasses.map.anyall",
        "description": "UdemyClasses.map.anyall",
        "peekOfCode": "name = \"Grevy\"\nif name:\n    print(\"Hello {}\".format(name))\nelse:\n    print(\"Welcome, person with no name\")",
        "detail": "UdemyClasses.map.anyall",
        "documentation": {}
    },
    {
        "label": "people",
        "kind": 5,
        "importPath": "UdemyClasses.map.data",
        "description": "UdemyClasses.map.data",
        "peekOfCode": "people = [\n    (\"John Cleese\", \"cleese@gmail.com\"),\n    (\"Terry Gilliam\", \"gilliam@gmail.com\"),\n    (\"Eric Idle\", \"\"),\n    (\"Terry Jones\", \"jones@gmail.com\"),\n    (\"Graham Chapman\", \"chapman@gmail.com\"),\n    (\"Michael Palin\", \"\")\n]\n# Named Tuples are described in the documentation\n# https://docs.python.org/3/library/collections.html#collections.namedtuple",
        "detail": "UdemyClasses.map.data",
        "documentation": {}
    },
    {
        "label": "Plant",
        "kind": 5,
        "importPath": "UdemyClasses.map.data",
        "description": "UdemyClasses.map.data",
        "peekOfCode": "Plant = namedtuple('Plant', 'name, scientific_name, lifecycle, plant_type')\nPlantDetails = namedtuple('PlantDetails',\n                          ['scientific_name', 'lifecycle', 'plant_type'])\nbasic_plants_list = [\n    (\"Andromeda\", \"Pieris japonica\", \"Evergreen\", \"Shrub\"),\n    (\"Bellflower\", \"Campanula\", \"perennial\", \"Flower\"),\n    (\"China Pink\", \"Dianthus\", \"Perennial\", \"Flower\"),\n    (\"Daffodil\", \"Narcissus\", \"Perennial\", \"Flower\"),\n    (\"Evening Primrose\", \"Oenothera\", \"Biennial\", \"Flower\"),\n    (\"French Marigold\", \"Tagetes patula\", \"Annual\", \"Flower\"),",
        "detail": "UdemyClasses.map.data",
        "documentation": {}
    },
    {
        "label": "PlantDetails",
        "kind": 5,
        "importPath": "UdemyClasses.map.data",
        "description": "UdemyClasses.map.data",
        "peekOfCode": "PlantDetails = namedtuple('PlantDetails',\n                          ['scientific_name', 'lifecycle', 'plant_type'])\nbasic_plants_list = [\n    (\"Andromeda\", \"Pieris japonica\", \"Evergreen\", \"Shrub\"),\n    (\"Bellflower\", \"Campanula\", \"perennial\", \"Flower\"),\n    (\"China Pink\", \"Dianthus\", \"Perennial\", \"Flower\"),\n    (\"Daffodil\", \"Narcissus\", \"Perennial\", \"Flower\"),\n    (\"Evening Primrose\", \"Oenothera\", \"Biennial\", \"Flower\"),\n    (\"French Marigold\", \"Tagetes patula\", \"Annual\", \"Flower\"),\n    (\"Golden Hakone Grass\", \"Hakonechloa macra\", \"Perennial\", \"Grass\"),",
        "detail": "UdemyClasses.map.data",
        "documentation": {}
    },
    {
        "label": "basic_plants_list",
        "kind": 5,
        "importPath": "UdemyClasses.map.data",
        "description": "UdemyClasses.map.data",
        "peekOfCode": "basic_plants_list = [\n    (\"Andromeda\", \"Pieris japonica\", \"Evergreen\", \"Shrub\"),\n    (\"Bellflower\", \"Campanula\", \"perennial\", \"Flower\"),\n    (\"China Pink\", \"Dianthus\", \"Perennial\", \"Flower\"),\n    (\"Daffodil\", \"Narcissus\", \"Perennial\", \"Flower\"),\n    (\"Evening Primrose\", \"Oenothera\", \"Biennial\", \"Flower\"),\n    (\"French Marigold\", \"Tagetes patula\", \"Annual\", \"Flower\"),\n    (\"Golden Hakone Grass\", \"Hakonechloa macra\", \"Perennial\", \"Grass\"),\n    (\"Hydrangea\", \"Hydrangea\", \"evergreen\", \"Shrub\"),\n    (\"Iris\", \"Iris\", \"Perennial\", \"Flower\"),",
        "detail": "UdemyClasses.map.data",
        "documentation": {}
    },
    {
        "label": "plants_list",
        "kind": 5,
        "importPath": "UdemyClasses.map.data",
        "description": "UdemyClasses.map.data",
        "peekOfCode": "plants_list = [\n    Plant(\"Andromeda\", \"Pieris japonica\", \"Evergreen\", \"Shrub\"),\n    Plant(\"Bellflower\", \"Campanula\", \"perennial\", \"Flower\"),\n    Plant(\"China Pink\", \"Dianthus\", \"Perennial\", \"Flower\"),\n    Plant(\"Daffodil\", \"Narcissus\", \"Perennial\", \"Flower\"),\n    Plant(\"Evening Primrose\", \"Oenothera\", \"Biennial\", \"Flower\"),\n    Plant(\"French Marigold\", \"Tagetes patula\", \"Annual\", \"Flower\"),\n    Plant(\"Golden Hakone Grass\", \"Hakonechloa macra\", \"Perennial\", \"Grass\"),\n    Plant(\"Hydrangea\", \"Hydrangea\", \"evergreen\", \"Shrub\"),\n    Plant(\"Iris\", \"Iris\", \"Perennial\", \"Flower\"),",
        "detail": "UdemyClasses.map.data",
        "documentation": {}
    },
    {
        "label": "plants_dict",
        "kind": 5,
        "importPath": "UdemyClasses.map.data",
        "description": "UdemyClasses.map.data",
        "peekOfCode": "plants_dict = {\n    \"Andromeda\": PlantDetails(\"Pieris japonica\", \"Evergreen\", \"Shrub\"),\n    \"Bellflower\": PlantDetails(\"Campanula\", \"Annual, biennial, perennial\", \"Flower\"),\n    \"China Pink\": PlantDetails(\"Dianthus\", \"Perennial\", \"Flower\"),\n    \"Daffodil\": PlantDetails(\"Narcissus\", \"Perennial\", \"Flower\"),\n    \"Evening Primrose\": PlantDetails(\"Oenothera\", \"Biennial\", \"Flower\"),\n    \"French Marigold\": PlantDetails(\"Tagetes patula\", \"Annual\", \"Flower\"),\n    \"Golden Hakone Grass\": PlantDetails(\"Hakonechloa macra\", \"Perennial\", \"Grass\"),\n    \"Hydrangea\": PlantDetails(\"Hydrangea\", \"Deciduous, evergreen\", \"Shrub\"),\n    \"Iris\": PlantDetails(\"Iris\", \"Perennial\", \"Flower\"),",
        "detail": "UdemyClasses.map.data",
        "documentation": {}
    },
    {
        "label": "spamless_comp",
        "kind": 2,
        "importPath": "UdemyClasses.map.filtertest",
        "description": "UdemyClasses.map.filtertest",
        "peekOfCode": "def spamless_comp():\n    \"\"\"\n    This is function called spamless comprehension\n    creates an object that loops through the items\n    in the menu and displays everything except spam.\n    \"\"\"\n    meals = [meal for meal in menu if not_spam(meal)]\n    return meals\nprint(\"-\" * 40)\ndef not_spam(meal_list: list):",
        "detail": "UdemyClasses.map.filtertest",
        "documentation": {}
    },
    {
        "label": "not_spam",
        "kind": 2,
        "importPath": "UdemyClasses.map.filtertest",
        "description": "UdemyClasses.map.filtertest",
        "peekOfCode": "def not_spam(meal_list: list):\n    \"\"\"\n    This line creates a function called\n    not_spam that does not have spam in the menu.\n    \"\"\"\n    return \"spam\" not in meal_list\ndef spamless_filter():\n    \"\"\"spamless_filter is a function that creates a filter\n    that only display items in the menu that are not spam.\n    Returns",
        "detail": "UdemyClasses.map.filtertest",
        "documentation": {}
    },
    {
        "label": "spamless_filter",
        "kind": 2,
        "importPath": "UdemyClasses.map.filtertest",
        "description": "UdemyClasses.map.filtertest",
        "peekOfCode": "def spamless_filter():\n    \"\"\"spamless_filter is a function that creates a filter\n    that only display items in the menu that are not spam.\n    Returns\n    -------\n        it will return variable with a list function that\n        will iterate through the menu and display everything\n        in the menu but spam.\n    \"\"\"\n    spamless_meals = list(filter(not_spam, menu))",
        "detail": "UdemyClasses.map.filtertest",
        "documentation": {}
    },
    {
        "label": "menu",
        "kind": 5,
        "importPath": "UdemyClasses.map.filtertest",
        "description": "UdemyClasses.map.filtertest",
        "peekOfCode": "menu = [\n    [\"egg\", \"spam\", \"bacon\"],\n    [\"egg\", \"sausage\", \"bacon\"],\n    [\"egg\", \"spam\"],\n    [\"egg\", \"bacon\", \"spam\"],\n    [\"egg\", \"bacon\", \"sausage\", \"spam\"],\n    [\"spam\", \"bacon\", \"sausage\", \"spam\"],\n    [\"spam\", \"egg\", \"spam\", \"spam\", \"bacon\", \"spam\"],\n    [\"spam\", \"egg\", \"sausage\", \"spam\"],\n    [\"chicken\", \"chips\"]",
        "detail": "UdemyClasses.map.filtertest",
        "documentation": {}
    },
    {
        "label": "sort_key",
        "kind": 2,
        "importPath": "UdemyClasses.map.lambda_example",
        "description": "UdemyClasses.map.lambda_example",
        "peekOfCode": "def sort_key(d: dict, field: str) -> str:\n    return d['field']\nmedals_table.sort(key=sort_key)\nprint(medals_table)",
        "detail": "UdemyClasses.map.lambda_example",
        "documentation": {}
    },
    {
        "label": "comp_caps",
        "kind": 2,
        "importPath": "UdemyClasses.map.map_intro",
        "description": "UdemyClasses.map.map_intro",
        "peekOfCode": "def comp_caps():\n    \"\"\"\n    The code snippet below is a function\n    that changes the text character to uppercase.\n    \"\"\"\n    capitals = [char.upper() for char in TEXT]\n    return capitals\n# use map\ndef map_caps():\n    \"\"\"",
        "detail": "UdemyClasses.map.map_intro",
        "documentation": {}
    },
    {
        "label": "map_caps",
        "kind": 2,
        "importPath": "UdemyClasses.map.map_intro",
        "description": "UdemyClasses.map.map_intro",
        "peekOfCode": "def map_caps():\n    \"\"\"\n    The code snippet below is a function\n    that changes the text string to uppercase.\n    \"\"\"\n    map_capitals = list(map(str.upper, TEXT))\n    return map_capitals\ndef comp_words():\n    \"\"\"\n    The code snippet below is a function",
        "detail": "UdemyClasses.map.map_intro",
        "documentation": {}
    },
    {
        "label": "comp_words",
        "kind": 2,
        "importPath": "UdemyClasses.map.map_intro",
        "description": "UdemyClasses.map.map_intro",
        "peekOfCode": "def comp_words():\n    \"\"\"\n    The code snippet below is a function\n    that changes the text words to uppercase.\n    \"\"\"\n    words = [word.upper() for word in TEXT.split(' ')]\n    return words\n# use map\ndef map_words():\n    \"\"\"",
        "detail": "UdemyClasses.map.map_intro",
        "documentation": {}
    },
    {
        "label": "map_words",
        "kind": 2,
        "importPath": "UdemyClasses.map.map_intro",
        "description": "UdemyClasses.map.map_intro",
        "peekOfCode": "def map_words():\n    \"\"\"\n    The code snippet below is a function\n    that changes the list of text words to uppercase.\n    \"\"\"\n    map_w = list(map(str.upper, TEXT.split(' ')))\n    return map_w\n# The code below is how you call the print the functions above.\nif __name__ == '__main__':\n    print(comp_caps())",
        "detail": "UdemyClasses.map.map_intro",
        "documentation": {}
    },
    {
        "label": "TEXT",
        "kind": 5,
        "importPath": "UdemyClasses.map.map_intro",
        "description": "UdemyClasses.map.map_intro",
        "peekOfCode": "TEXT = \"what have the romans ever done for us\"\ndef comp_caps():\n    \"\"\"\n    The code snippet below is a function\n    that changes the text character to uppercase.\n    \"\"\"\n    capitals = [char.upper() for char in TEXT]\n    return capitals\n# use map\ndef map_caps():",
        "detail": "UdemyClasses.map.map_intro",
        "documentation": {}
    },
    {
        "label": "medals_table",
        "kind": 5,
        "importPath": "UdemyClasses.map.medals_data",
        "description": "UdemyClasses.map.medals_data",
        "peekOfCode": "medals_table = [\n    {'country': 'United States', 'gold': 39, 'silver': 41, 'bronze': 33, 'rank': 1},\n    {'country': 'China', 'gold': 38, 'silver': 32, 'bronze': 18, 'rank': 2},\n    {'country': 'Japan', 'gold': 27, 'silver': 14, 'bronze': 17, 'rank': 3},\n    {'country': 'Great Britain', 'gold': 22, 'silver': 21, 'bronze': 22, 'rank': 4},\n    {'country': 'ROC', 'gold': 20, 'silver': 28, 'bronze': 23, 'rank': 5},\n    {'country': 'Australia', 'gold': 17, 'silver': 7, 'bronze': 22, 'rank': 6},\n    {'country': 'Netherlands', 'gold': 10, 'silver': 12, 'bronze': 14, 'rank': 7},\n    {'country': 'France', 'gold': 10, 'silver': 12, 'bronze': 11, 'rank': 8},\n    {'country': 'Germany', 'gold': 10, 'silver': 11, 'bronze': 16, 'rank': 9},",
        "detail": "UdemyClasses.map.medals_data",
        "documentation": {}
    },
    {
        "label": "example",
        "kind": 5,
        "importPath": "UdemyClasses.map.namedtupletest",
        "description": "UdemyClasses.map.namedtupletest",
        "peekOfCode": "example = plants_list[0]\nprint(example)\nexample = example._replace(lifecycle='Annual')\nprint(example)",
        "detail": "UdemyClasses.map.namedtupletest",
        "documentation": {}
    },
    {
        "label": "example",
        "kind": 5,
        "importPath": "UdemyClasses.map.namedtupletest",
        "description": "UdemyClasses.map.namedtupletest",
        "peekOfCode": "example = example._replace(lifecycle='Annual')\nprint(example)",
        "detail": "UdemyClasses.map.namedtupletest",
        "documentation": {}
    },
    {
        "label": "calc_values",
        "kind": 2,
        "importPath": "UdemyClasses.map.reduceintro",
        "description": "UdemyClasses.map.reduceintro",
        "peekOfCode": "def calc_values(x, y: int):\n    \"\"\"\n    This function ask to take to two values and expect\n    the an int, then on the next line adds those\n    two values.\n    \"\"\"\n    return x * y\nnumbers = [2, 3, 5, 8, 13]\nreduced_value = functools.reduce(calc_values, numbers)\nprint(reduced_value)",
        "detail": "UdemyClasses.map.reduceintro",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "UdemyClasses.map.reduceintro",
        "description": "UdemyClasses.map.reduceintro",
        "peekOfCode": "numbers = [2, 3, 5, 8, 13]\nreduced_value = functools.reduce(calc_values, numbers)\nprint(reduced_value)\nprint(sum(numbers))\nRESULT = 1\nfor x in numbers:\n    RESULT *= x\n# print(RESULT)\nRESULT = calc_values(2, 3)\nRESULT = calc_values(RESULT, 5)",
        "detail": "UdemyClasses.map.reduceintro",
        "documentation": {}
    },
    {
        "label": "reduced_value",
        "kind": 5,
        "importPath": "UdemyClasses.map.reduceintro",
        "description": "UdemyClasses.map.reduceintro",
        "peekOfCode": "reduced_value = functools.reduce(calc_values, numbers)\nprint(reduced_value)\nprint(sum(numbers))\nRESULT = 1\nfor x in numbers:\n    RESULT *= x\n# print(RESULT)\nRESULT = calc_values(2, 3)\nRESULT = calc_values(RESULT, 5)\nRESULT = calc_values(RESULT, 8)",
        "detail": "UdemyClasses.map.reduceintro",
        "documentation": {}
    },
    {
        "label": "RESULT",
        "kind": 5,
        "importPath": "UdemyClasses.map.reduceintro",
        "description": "UdemyClasses.map.reduceintro",
        "peekOfCode": "RESULT = 1\nfor x in numbers:\n    RESULT *= x\n# print(RESULT)\nRESULT = calc_values(2, 3)\nRESULT = calc_values(RESULT, 5)\nRESULT = calc_values(RESULT, 8)\nRESULT = calc_values(RESULT, 13)\nprint(RESULT)",
        "detail": "UdemyClasses.map.reduceintro",
        "documentation": {}
    },
    {
        "label": "RESULT",
        "kind": 5,
        "importPath": "UdemyClasses.map.reduceintro",
        "description": "UdemyClasses.map.reduceintro",
        "peekOfCode": "RESULT = calc_values(2, 3)\nRESULT = calc_values(RESULT, 5)\nRESULT = calc_values(RESULT, 8)\nRESULT = calc_values(RESULT, 13)\nprint(RESULT)",
        "detail": "UdemyClasses.map.reduceintro",
        "documentation": {}
    },
    {
        "label": "RESULT",
        "kind": 5,
        "importPath": "UdemyClasses.map.reduceintro",
        "description": "UdemyClasses.map.reduceintro",
        "peekOfCode": "RESULT = calc_values(RESULT, 5)\nRESULT = calc_values(RESULT, 8)\nRESULT = calc_values(RESULT, 13)\nprint(RESULT)",
        "detail": "UdemyClasses.map.reduceintro",
        "documentation": {}
    },
    {
        "label": "RESULT",
        "kind": 5,
        "importPath": "UdemyClasses.map.reduceintro",
        "description": "UdemyClasses.map.reduceintro",
        "peekOfCode": "RESULT = calc_values(RESULT, 8)\nRESULT = calc_values(RESULT, 13)\nprint(RESULT)",
        "detail": "UdemyClasses.map.reduceintro",
        "documentation": {}
    },
    {
        "label": "RESULT",
        "kind": 5,
        "importPath": "UdemyClasses.map.reduceintro",
        "description": "UdemyClasses.map.reduceintro",
        "peekOfCode": "RESULT = calc_values(RESULT, 13)\nprint(RESULT)",
        "detail": "UdemyClasses.map.reduceintro",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "UdemyClasses.map.sort_data_functions",
        "description": "UdemyClasses.map.sort_data_functions",
        "peekOfCode": "options = {\n    'C': ('country', lambda d: d['country'], False),\n    'G': ('gold medals', lambda d: d['gold'],True ),\n    'S': ('silver medals', lambda d: d['silver'],True ),\n    'B': ('bronze medals', lambda d:  d['bronze'],True ),\n    'R': ('rank', lambda d: d['rank'], False),\n}\nwhile True:\n    for option, (description, *_) in options.items():\n        print(f'{option}: Sort by {description}')",
        "detail": "UdemyClasses.map.sort_data_functions",
        "documentation": {}
    },
    {
        "label": "area_of_square",
        "kind": 2,
        "importPath": "UdemyClasses.ModulesAndFunctions.bad_code",
        "description": "UdemyClasses.ModulesAndFunctions.bad_code",
        "peekOfCode": "def area_of_square(length: float):\n    global area\n    area = length * length\narea_of_square(30)\nprint(f'The area is {area}')",
        "detail": "UdemyClasses.ModulesAndFunctions.bad_code",
        "documentation": {}
    },
    {
        "label": "area",
        "kind": 5,
        "importPath": "UdemyClasses.ModulesAndFunctions.bad_code",
        "description": "UdemyClasses.ModulesAndFunctions.bad_code",
        "peekOfCode": "area = 0\ndef area_of_square(length: float):\n    global area\n    area = length * length\narea_of_square(30)\nprint(f'The area is {area}')",
        "detail": "UdemyClasses.ModulesAndFunctions.bad_code",
        "documentation": {}
    },
    {
        "label": "area_of_square",
        "kind": 2,
        "importPath": "UdemyClasses.ModulesAndFunctions.better_code",
        "description": "UdemyClasses.ModulesAndFunctions.better_code",
        "peekOfCode": "def area_of_square(length: float) -> float:\n    return length * length\nif __name__ == '__main__':\n    area = area_of_square(30)\n    print(f'The area is {area}')\n    print(f'in better_code.py, __name__ is {__name__}')",
        "detail": "UdemyClasses.ModulesAndFunctions.better_code",
        "documentation": {}
    },
    {
        "label": "area",
        "kind": 5,
        "importPath": "UdemyClasses.ModulesAndFunctions.break_globals",
        "description": "UdemyClasses.ModulesAndFunctions.break_globals",
        "peekOfCode": "area = better_code.area_of_square(40)\narea = area_of_square(40)\nprint(area)\nprint('Global namespace')\nnamespace = globals()  # .copy()\nfor name, obj in namespace.items():\n    print(name, obj)",
        "detail": "UdemyClasses.ModulesAndFunctions.break_globals",
        "documentation": {}
    },
    {
        "label": "area",
        "kind": 5,
        "importPath": "UdemyClasses.ModulesAndFunctions.break_globals",
        "description": "UdemyClasses.ModulesAndFunctions.break_globals",
        "peekOfCode": "area = area_of_square(40)\nprint(area)\nprint('Global namespace')\nnamespace = globals()  # .copy()\nfor name, obj in namespace.items():\n    print(name, obj)",
        "detail": "UdemyClasses.ModulesAndFunctions.break_globals",
        "documentation": {}
    },
    {
        "label": "namespace",
        "kind": 5,
        "importPath": "UdemyClasses.ModulesAndFunctions.break_globals",
        "description": "UdemyClasses.ModulesAndFunctions.break_globals",
        "peekOfCode": "namespace = globals()  # .copy()\nfor name, obj in namespace.items():\n    print(name, obj)",
        "detail": "UdemyClasses.ModulesAndFunctions.break_globals",
        "documentation": {}
    },
    {
        "label": "today",
        "kind": 5,
        "importPath": "UdemyClasses.ModulesAndFunctions.datetime_example",
        "description": "UdemyClasses.ModulesAndFunctions.datetime_example",
        "peekOfCode": "today = dt.datetime.today()\nnow = datetime.now()\nutc_now = datetime.utcnow()\nprint(today)\nprint(now)\nprint(utc_now)",
        "detail": "UdemyClasses.ModulesAndFunctions.datetime_example",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "UdemyClasses.ModulesAndFunctions.datetime_example",
        "description": "UdemyClasses.ModulesAndFunctions.datetime_example",
        "peekOfCode": "now = datetime.now()\nutc_now = datetime.utcnow()\nprint(today)\nprint(now)\nprint(utc_now)",
        "detail": "UdemyClasses.ModulesAndFunctions.datetime_example",
        "documentation": {}
    },
    {
        "label": "utc_now",
        "kind": 5,
        "importPath": "UdemyClasses.ModulesAndFunctions.datetime_example",
        "description": "UdemyClasses.ModulesAndFunctions.datetime_example",
        "peekOfCode": "utc_now = datetime.utcnow()\nprint(today)\nprint(now)\nprint(utc_now)",
        "detail": "UdemyClasses.ModulesAndFunctions.datetime_example",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "UdemyClasses.ModulesAndFunctions.date_example",
        "description": "UdemyClasses.ModulesAndFunctions.date_example",
        "peekOfCode": "start = datetime.date(2022, 2, 4)\nprint(start)\npretty_start = start.strftime('%A %d %B, %Y')  # %A is the day of the week, %d is the day of the month, %B is the month, %Y is the year\nprint(pretty_start)\nduration = datetime.timedelta(days=15, hours=48)\nend = start + duration\nprint(end)\nprint(duration)\nd1 = datetime.timedelta(hours=2)\nd2 = datetime.timedelta(minutes=120)",
        "detail": "UdemyClasses.ModulesAndFunctions.date_example",
        "documentation": {}
    },
    {
        "label": "pretty_start",
        "kind": 5,
        "importPath": "UdemyClasses.ModulesAndFunctions.date_example",
        "description": "UdemyClasses.ModulesAndFunctions.date_example",
        "peekOfCode": "pretty_start = start.strftime('%A %d %B, %Y')  # %A is the day of the week, %d is the day of the month, %B is the month, %Y is the year\nprint(pretty_start)\nduration = datetime.timedelta(days=15, hours=48)\nend = start + duration\nprint(end)\nprint(duration)\nd1 = datetime.timedelta(hours=2)\nd2 = datetime.timedelta(minutes=120)\nd3 = datetime.timedelta(seconds=7200)\nprint(d1, d2, d3, sep=', ')",
        "detail": "UdemyClasses.ModulesAndFunctions.date_example",
        "documentation": {}
    },
    {
        "label": "duration",
        "kind": 5,
        "importPath": "UdemyClasses.ModulesAndFunctions.date_example",
        "description": "UdemyClasses.ModulesAndFunctions.date_example",
        "peekOfCode": "duration = datetime.timedelta(days=15, hours=48)\nend = start + duration\nprint(end)\nprint(duration)\nd1 = datetime.timedelta(hours=2)\nd2 = datetime.timedelta(minutes=120)\nd3 = datetime.timedelta(seconds=7200)\nprint(d1, d2, d3, sep=', ')\nprint(repr(d1), repr(d2), repr(d3), sep=', ')\ndifference = end - start",
        "detail": "UdemyClasses.ModulesAndFunctions.date_example",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "UdemyClasses.ModulesAndFunctions.date_example",
        "description": "UdemyClasses.ModulesAndFunctions.date_example",
        "peekOfCode": "end = start + duration\nprint(end)\nprint(duration)\nd1 = datetime.timedelta(hours=2)\nd2 = datetime.timedelta(minutes=120)\nd3 = datetime.timedelta(seconds=7200)\nprint(d1, d2, d3, sep=', ')\nprint(repr(d1), repr(d2), repr(d3), sep=', ')\ndifference = end - start\nprint(repr(difference))",
        "detail": "UdemyClasses.ModulesAndFunctions.date_example",
        "documentation": {}
    },
    {
        "label": "d1",
        "kind": 5,
        "importPath": "UdemyClasses.ModulesAndFunctions.date_example",
        "description": "UdemyClasses.ModulesAndFunctions.date_example",
        "peekOfCode": "d1 = datetime.timedelta(hours=2)\nd2 = datetime.timedelta(minutes=120)\nd3 = datetime.timedelta(seconds=7200)\nprint(d1, d2, d3, sep=', ')\nprint(repr(d1), repr(d2), repr(d3), sep=', ')\ndifference = end - start\nprint(repr(difference))\nprint(difference == duration)",
        "detail": "UdemyClasses.ModulesAndFunctions.date_example",
        "documentation": {}
    },
    {
        "label": "d2",
        "kind": 5,
        "importPath": "UdemyClasses.ModulesAndFunctions.date_example",
        "description": "UdemyClasses.ModulesAndFunctions.date_example",
        "peekOfCode": "d2 = datetime.timedelta(minutes=120)\nd3 = datetime.timedelta(seconds=7200)\nprint(d1, d2, d3, sep=', ')\nprint(repr(d1), repr(d2), repr(d3), sep=', ')\ndifference = end - start\nprint(repr(difference))\nprint(difference == duration)",
        "detail": "UdemyClasses.ModulesAndFunctions.date_example",
        "documentation": {}
    },
    {
        "label": "d3",
        "kind": 5,
        "importPath": "UdemyClasses.ModulesAndFunctions.date_example",
        "description": "UdemyClasses.ModulesAndFunctions.date_example",
        "peekOfCode": "d3 = datetime.timedelta(seconds=7200)\nprint(d1, d2, d3, sep=', ')\nprint(repr(d1), repr(d2), repr(d3), sep=', ')\ndifference = end - start\nprint(repr(difference))\nprint(difference == duration)",
        "detail": "UdemyClasses.ModulesAndFunctions.date_example",
        "documentation": {}
    },
    {
        "label": "difference",
        "kind": 5,
        "importPath": "UdemyClasses.ModulesAndFunctions.date_example",
        "description": "UdemyClasses.ModulesAndFunctions.date_example",
        "peekOfCode": "difference = end - start\nprint(repr(difference))\nprint(difference == duration)",
        "detail": "UdemyClasses.ModulesAndFunctions.date_example",
        "documentation": {}
    },
    {
        "label": "area",
        "kind": 5,
        "importPath": "UdemyClasses.ModulesAndFunctions.importing",
        "description": "UdemyClasses.ModulesAndFunctions.importing",
        "peekOfCode": "area = better_code.area_of_square(40)\narea = area_of_square(40)\nprint(area)\nprint('Global namespace')\nnamespace = globals().copy()\nfor name, obj in namespace.items():\n    print(name, obj)",
        "detail": "UdemyClasses.ModulesAndFunctions.importing",
        "documentation": {}
    },
    {
        "label": "area",
        "kind": 5,
        "importPath": "UdemyClasses.ModulesAndFunctions.importing",
        "description": "UdemyClasses.ModulesAndFunctions.importing",
        "peekOfCode": "area = area_of_square(40)\nprint(area)\nprint('Global namespace')\nnamespace = globals().copy()\nfor name, obj in namespace.items():\n    print(name, obj)",
        "detail": "UdemyClasses.ModulesAndFunctions.importing",
        "documentation": {}
    },
    {
        "label": "namespace",
        "kind": 5,
        "importPath": "UdemyClasses.ModulesAndFunctions.importing",
        "description": "UdemyClasses.ModulesAndFunctions.importing",
        "peekOfCode": "namespace = globals().copy()\nfor name, obj in namespace.items():\n    print(name, obj)",
        "detail": "UdemyClasses.ModulesAndFunctions.importing",
        "documentation": {}
    },
    {
        "label": "square",
        "kind": 2,
        "importPath": "UdemyClasses.ModulesAndFunctions.import_turtle",
        "description": "UdemyClasses.ModulesAndFunctions.import_turtle",
        "peekOfCode": "def square(length: int) -> None:\n    \"\"\"Draws a square of length `length`\"\"\"\n    inner_forward = forward\n    inner_right = right\n    for side in range(4):\n        inner_forward(length)\n        inner_right(90)\ndef encircled_square(length: int) -> None:\n    \"\"\"Draws a square of length `length`,\n    then encloses it in a circle.",
        "detail": "UdemyClasses.ModulesAndFunctions.import_turtle",
        "documentation": {}
    },
    {
        "label": "encircled_square",
        "kind": 2,
        "importPath": "UdemyClasses.ModulesAndFunctions.import_turtle",
        "description": "UdemyClasses.ModulesAndFunctions.import_turtle",
        "peekOfCode": "def encircled_square(length: int) -> None:\n    \"\"\"Draws a square of length `length`,\n    then encloses it in a circle.\n    \"\"\"\n    square(length)\n    angle = radians(45)\n    radius = length * cos(angle)\n    right(135)\n    circle(radius)\n    left(135)",
        "detail": "UdemyClasses.ModulesAndFunctions.import_turtle",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "UdemyClasses.ModulesAndFunctions.import_turtle",
        "description": "UdemyClasses.ModulesAndFunctions.import_turtle",
        "peekOfCode": "g = globals()\nprint(g['square'])\nprint(dir(__builtins__))",
        "detail": "UdemyClasses.ModulesAndFunctions.import_turtle",
        "documentation": {}
    },
    {
        "label": "greet_pythons",
        "kind": 2,
        "importPath": "UdemyClasses.ModulesAndFunctions.nested_function_1",
        "description": "UdemyClasses.ModulesAndFunctions.nested_function_1",
        "peekOfCode": "def greet_pythons(items: list) -> None:\n    greeting = 'Hello'\n    print(f'The ID of `greeting` in `greet_pythons` is {id(greeting)}')\n    print(f'local namespace in `greet_pythons`(1): {locals()}')\n    def make_greeting(item: str) -> str:\n        nonlocal greeting\n        print(f'local namespace in `make_greeting`(1): {locals()}')\n        greeting = 'Hi'\n        print(f'The ID of `greeting` in `make_greeting` is {id(greeting)}')\n        print(f'local namespace in `make_greeting`(2): {locals()}')",
        "detail": "UdemyClasses.ModulesAndFunctions.nested_function_1",
        "documentation": {}
    },
    {
        "label": "names",
        "kind": 5,
        "importPath": "UdemyClasses.ModulesAndFunctions.nested_function_1",
        "description": "UdemyClasses.ModulesAndFunctions.nested_function_1",
        "peekOfCode": "names = ['John']  #, 'Eric', 'Graham', 'Terry', 'Terry', 'Michael']\ngreet_pythons(names)",
        "detail": "UdemyClasses.ModulesAndFunctions.nested_function_1",
        "documentation": {}
    },
    {
        "label": "greet_pythons",
        "kind": 2,
        "importPath": "UdemyClasses.ModulesAndFunctions.nested_function_2",
        "description": "UdemyClasses.ModulesAndFunctions.nested_function_2",
        "peekOfCode": "def greet_pythons(items: list) -> None:\n    for item in items:\n        print(make_greeting(item))\ndef make_greeting(item: str) -> str:\n    return f'Hello {item}'\nnames = ['John', 'Eric', 'Graham', 'Terry', 'Terry', 'Michael']\ngreet_pythons(names)",
        "detail": "UdemyClasses.ModulesAndFunctions.nested_function_2",
        "documentation": {}
    },
    {
        "label": "make_greeting",
        "kind": 2,
        "importPath": "UdemyClasses.ModulesAndFunctions.nested_function_2",
        "description": "UdemyClasses.ModulesAndFunctions.nested_function_2",
        "peekOfCode": "def make_greeting(item: str) -> str:\n    return f'Hello {item}'\nnames = ['John', 'Eric', 'Graham', 'Terry', 'Terry', 'Michael']\ngreet_pythons(names)",
        "detail": "UdemyClasses.ModulesAndFunctions.nested_function_2",
        "documentation": {}
    },
    {
        "label": "names",
        "kind": 5,
        "importPath": "UdemyClasses.ModulesAndFunctions.nested_function_2",
        "description": "UdemyClasses.ModulesAndFunctions.nested_function_2",
        "peekOfCode": "names = ['John', 'Eric', 'Graham', 'Terry', 'Terry', 'Michael']\ngreet_pythons(names)",
        "detail": "UdemyClasses.ModulesAndFunctions.nested_function_2",
        "documentation": {}
    },
    {
        "label": "chrome",
        "kind": 5,
        "importPath": "UdemyClasses.ModulesAndFunctions.open_url",
        "description": "UdemyClasses.ModulesAndFunctions.open_url",
        "peekOfCode": "chrome = webbrowser.get('C:/Program Files (x86)/Google/Chrome/Application/chrome.exe %s')\nchrome.open('https://learnprogramming.academy/courses')",
        "detail": "UdemyClasses.ModulesAndFunctions.open_url",
        "documentation": {}
    },
    {
        "label": "generate_hash",
        "kind": 2,
        "importPath": "UdemyClasses.ModulesAndFunctions.supported_hashes",
        "description": "UdemyClasses.ModulesAndFunctions.supported_hashes",
        "peekOfCode": "def generate_hash(filename: str, algorithm: str) -> str:\n    \"\"\"Generate the hash for `filename`\n    :param filename: The file to generate a hash for.\n    :param algorithm: The hashlib algorithm to use.\n        See `hashlib.supported_hashes` for the algorithms supported.\n    :return: A `hexdigest` string containing the hash.\n             None if an unsupported hash is requested.\n    \"\"\"\n    hash_algorithm = supported_hashes.get(algorithm, None)\n    print(hash_algorithm, type(hash_algorithm))  # TODO: delete after testing",
        "detail": "UdemyClasses.ModulesAndFunctions.supported_hashes",
        "documentation": {}
    },
    {
        "label": "supported_hashes",
        "kind": 5,
        "importPath": "UdemyClasses.ModulesAndFunctions.supported_hashes",
        "description": "UdemyClasses.ModulesAndFunctions.supported_hashes",
        "peekOfCode": "supported_hashes = {\n    'blake2b': hashlib.blake2b,\n    'blake2s': hashlib.blake2s,\n    'md5': hashlib.md5,\n    'sha1': hashlib.sha1,\n    'sha224': hashlib.sha224,\n    'sha256': hashlib.sha3_256,\n    'sha384': hashlib.sha384,\n    'sha3_224': hashlib.sha224,\n    'sha3_256': hashlib.sha3_256,",
        "detail": "UdemyClasses.ModulesAndFunctions.supported_hashes",
        "documentation": {}
    },
    {
        "label": "meeting",
        "kind": 5,
        "importPath": "UdemyClasses.ModulesAndFunctions.time_example",
        "description": "UdemyClasses.ModulesAndFunctions.time_example",
        "peekOfCode": "meeting = time(hour=11, minute=15, second=0)\nprint(meeting)\nend_time= time(hour=12, minute=30)\nprint(end_time)\niso_time = '11:15:00'\n_time = time.fromisoformat(iso_time)\nprint(_time)\niso_date = '2022-02-04'\n_date = date.fromisoformat(iso_date)\nprint(_date)",
        "detail": "UdemyClasses.ModulesAndFunctions.time_example",
        "documentation": {}
    },
    {
        "label": "iso_time",
        "kind": 5,
        "importPath": "UdemyClasses.ModulesAndFunctions.time_example",
        "description": "UdemyClasses.ModulesAndFunctions.time_example",
        "peekOfCode": "iso_time = '11:15:00'\n_time = time.fromisoformat(iso_time)\nprint(_time)\niso_date = '2022-02-04'\n_date = date.fromisoformat(iso_date)\nprint(_date)",
        "detail": "UdemyClasses.ModulesAndFunctions.time_example",
        "documentation": {}
    },
    {
        "label": "_time",
        "kind": 5,
        "importPath": "UdemyClasses.ModulesAndFunctions.time_example",
        "description": "UdemyClasses.ModulesAndFunctions.time_example",
        "peekOfCode": "_time = time.fromisoformat(iso_time)\nprint(_time)\niso_date = '2022-02-04'\n_date = date.fromisoformat(iso_date)\nprint(_date)",
        "detail": "UdemyClasses.ModulesAndFunctions.time_example",
        "documentation": {}
    },
    {
        "label": "iso_date",
        "kind": 5,
        "importPath": "UdemyClasses.ModulesAndFunctions.time_example",
        "description": "UdemyClasses.ModulesAndFunctions.time_example",
        "peekOfCode": "iso_date = '2022-02-04'\n_date = date.fromisoformat(iso_date)\nprint(_date)",
        "detail": "UdemyClasses.ModulesAndFunctions.time_example",
        "documentation": {}
    },
    {
        "label": "_date",
        "kind": 5,
        "importPath": "UdemyClasses.ModulesAndFunctions.time_example",
        "description": "UdemyClasses.ModulesAndFunctions.time_example",
        "peekOfCode": "_date = date.fromisoformat(iso_date)\nprint(_date)",
        "detail": "UdemyClasses.ModulesAndFunctions.time_example",
        "documentation": {}
    },
    {
        "label": "area_of_square",
        "kind": 2,
        "importPath": "UdemyClasses.ModulesAndFunctions.worse_code",
        "description": "UdemyClasses.ModulesAndFunctions.worse_code",
        "peekOfCode": "def area_of_square():\n    global area\n    area = length * length\narea_of_square()\nprint(f'The area is {area}')",
        "detail": "UdemyClasses.ModulesAndFunctions.worse_code",
        "documentation": {}
    },
    {
        "label": "area",
        "kind": 5,
        "importPath": "UdemyClasses.ModulesAndFunctions.worse_code",
        "description": "UdemyClasses.ModulesAndFunctions.worse_code",
        "peekOfCode": "area = 0\nlength = 30\ndef area_of_square():\n    global area\n    area = length * length\narea_of_square()\nprint(f'The area is {area}')",
        "detail": "UdemyClasses.ModulesAndFunctions.worse_code",
        "documentation": {}
    },
    {
        "label": "length",
        "kind": 5,
        "importPath": "UdemyClasses.ModulesAndFunctions.worse_code",
        "description": "UdemyClasses.ModulesAndFunctions.worse_code",
        "peekOfCode": "length = 30\ndef area_of_square():\n    global area\n    area = length * length\narea_of_square()\nprint(f'The area is {area}')",
        "detail": "UdemyClasses.ModulesAndFunctions.worse_code",
        "documentation": {}
    },
    {
        "label": "Scrollbox",
        "kind": 6,
        "importPath": "UdemyClasses.MusicBrowser.jukebox",
        "description": "UdemyClasses.MusicBrowser.jukebox",
        "peekOfCode": "class Scrollbox(tkinter.Listbox):\n    \"\"\" Line 10 creates a class called Scrollbox that has method as argument.\n    \"\"\"\n    def __init__(self, window, **kwargs):\n        # tkinter.Listbox.__init__(self, window, **kwargs)  # Python 2\n        super().__init__(window, **kwargs)\n        self.scrollbar = tkinter.Scrollbar(window, orient=tkinter.VERTICAL,\n                                           command=self.yview)\n    def grid(self, row, column, sticky='nsw',\n             rowspan=1, columnspan=1, **kwargs):",
        "detail": "UdemyClasses.MusicBrowser.jukebox",
        "documentation": {}
    },
    {
        "label": "DataListBox",
        "kind": 6,
        "importPath": "UdemyClasses.MusicBrowser.jukebox",
        "description": "UdemyClasses.MusicBrowser.jukebox",
        "peekOfCode": "class DataListBox(Scrollbox):\n    \"\"\" Line 36 creates a class called DataListBox that has method as argument.\n    \"\"\"\n    def __init__(self, window, connection, table, field, sort_order=(), **kwargs):  # noqa\n        # Scrollbox.__init__(self, window, **kwargs)  # Python 2\n        super().__init__(window, **kwargs)\n        self.linked_box = None\n        self.link_field = None\n        self.cursor = connection.cursor()\n        self.table = table",
        "detail": "UdemyClasses.MusicBrowser.jukebox",
        "documentation": {}
    },
    {
        "label": "print_backwards",
        "kind": 2,
        "importPath": "UdemyClasses.MusicBrowser.star_args",
        "description": "UdemyClasses.MusicBrowser.star_args",
        "peekOfCode": "def print_backwards(*args, **kwargs):\n    \"\"\" This line of code creates a function called\n    print_backwards that has two arguments * args and **kwargs.\n    \"\"\"\n    end_character = kwargs.pop('end', '\\n')\n    sep_character = kwargs.pop('sep', ' ')\n    for word in args[:0:-1]:    # change the range\n        print(word[::-1], end=sep_character, **kwargs)\n    print(args[0][::-1], end=end_character, **kwargs)\n    # and print the first word separately  # noqa",
        "detail": "UdemyClasses.MusicBrowser.star_args",
        "documentation": {}
    },
    {
        "label": "backwards_print",
        "kind": 2,
        "importPath": "UdemyClasses.MusicBrowser.star_args",
        "description": "UdemyClasses.MusicBrowser.star_args",
        "peekOfCode": "def backwards_print(*args, **kwargs):\n    \"\"\"backwards_print is a function\n    that has two arguments * args and **kwargs.\n    \"\"\"\n    sep_character = kwargs.pop('sep', ' ')\n    print(sep_character.join(word[::-1] for word in args[::-1]), **kwargs)\nwith open(\"backwards.txt\", 'w', encoding='UTF-8') as backwards:\n    print_backwards(\"hello\", \"planet\", \"earth\",\n                    \"take\", \"me\", \"to\", \"your\", \"leader\", end='\\n')\n    print(\"Another String\")",
        "detail": "UdemyClasses.MusicBrowser.star_args",
        "documentation": {}
    },
    {
        "label": "list_directories",
        "kind": 2,
        "importPath": "UdemyClasses.ScopeAndNamespace.filesanddirectories",
        "description": "UdemyClasses.ScopeAndNamespace.filesanddirectories",
        "peekOfCode": "def list_directories(s):\n    def dir_list(d):\n        nonlocal tab_stop\n        files = os.listdir(d)\n        for f in files:\n            current_dir = os.path.join(d, f)\n            if os.path.isdir(current_dir):\n                print(\"\\t\" * tab_stop + \"Directory \" + f)\n                tab_stop += 1\n                dir_list(current_dir)",
        "detail": "UdemyClasses.ScopeAndNamespace.filesanddirectories",
        "documentation": {}
    },
    {
        "label": "fact",
        "kind": 2,
        "importPath": "UdemyClasses.ScopeAndNamespace.scope",
        "description": "UdemyClasses.ScopeAndNamespace.scope",
        "peekOfCode": "def fact(n):\n    \"\"\" calucate n! iteratively \"\"\"\n    result = 1\n    if n > 1:\n        for f in range(2, n + 1):\n            result *= f\n    return result\ndef factorial(n):\n    # n! can also be defined as n * (n+1)!\n    \"\"\" calculates n! recursively \"\"\"",
        "detail": "UdemyClasses.ScopeAndNamespace.scope",
        "documentation": {}
    },
    {
        "label": "factorial",
        "kind": 2,
        "importPath": "UdemyClasses.ScopeAndNamespace.scope",
        "description": "UdemyClasses.ScopeAndNamespace.scope",
        "peekOfCode": "def factorial(n):\n    # n! can also be defined as n * (n+1)!\n    \"\"\" calculates n! recursively \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        return n * factorial(n-1)\ndef fib(n):\n    \"\"\" F(n) = F(n -1) + F(n -2) \"\"\"\n    if n < 2:",
        "detail": "UdemyClasses.ScopeAndNamespace.scope",
        "documentation": {}
    },
    {
        "label": "fib",
        "kind": 2,
        "importPath": "UdemyClasses.ScopeAndNamespace.scope",
        "description": "UdemyClasses.ScopeAndNamespace.scope",
        "peekOfCode": "def fib(n):\n    \"\"\" F(n) = F(n -1) + F(n -2) \"\"\"\n    if n < 2:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\ndef fibonacci(n):\n    if n == 0:\n        result = 0\n    elif  n == 1:",
        "detail": "UdemyClasses.ScopeAndNamespace.scope",
        "documentation": {}
    },
    {
        "label": "fibonacci",
        "kind": 2,
        "importPath": "UdemyClasses.ScopeAndNamespace.scope",
        "description": "UdemyClasses.ScopeAndNamespace.scope",
        "peekOfCode": "def fibonacci(n):\n    if n == 0:\n        result = 0\n    elif  n == 1:\n        result = 1\n    else:\n        n_minus1 = 1\n        n_minus2 = 0\n        for f in range(1, n):\n            result = n_minus2 + n_minus1",
        "detail": "UdemyClasses.ScopeAndNamespace.scope",
        "documentation": {}
    },
    {
        "label": "spam1",
        "kind": 2,
        "importPath": "UdemyClasses.ScopeAndNamespace.spam",
        "description": "UdemyClasses.ScopeAndNamespace.spam",
        "peekOfCode": "def spam1():\n    def spam2():\n        def spam3():\n            z = \" even\"\n            z += y\n            print(\"In spam3, locals are {}\".format(locals()))\n            return z\n        y = \" more \" + x # y must exist before spam3 is called.\n        y += spam3() # do not combine these assignments.\n        print(\"In spam2, locals are {}\".format(locals()))",
        "detail": "UdemyClasses.ScopeAndNamespace.spam",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "UdemyClasses.__pycache__.preview.PIL.checkdb",
        "description": "UdemyClasses.__pycache__.preview.PIL.checkdb",
        "peekOfCode": "conn = sqlite3.connect(\"contacts.sqlite\")\nname = input(\"Please enter a name to search for? \")\nfor row in conn.execute(\"SELECT * FROM contacts WHERE name = ?\", (name,)):\n    print(row)\n# the name at the end in parathesis has comma with it to make it a tuple.\n# If you do not use a comma you will get a ProgrammingError:\n# Incorrect number of bindings supplied. The current statement uses 1, and there are 5 supplied.  # noqa\n# Also in that line you can use LIKE so that the query does not have to be case sensative.  # noqa\nconn.close()",
        "detail": "UdemyClasses.__pycache__.preview.PIL.checkdb",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "UdemyClasses.__pycache__.preview.PIL.checkdb",
        "description": "UdemyClasses.__pycache__.preview.PIL.checkdb",
        "peekOfCode": "name = input(\"Please enter a name to search for? \")\nfor row in conn.execute(\"SELECT * FROM contacts WHERE name = ?\", (name,)):\n    print(row)\n# the name at the end in parathesis has comma with it to make it a tuple.\n# If you do not use a comma you will get a ProgrammingError:\n# Incorrect number of bindings supplied. The current statement uses 1, and there are 5 supplied.  # noqa\n# Also in that line you can use LIKE so that the query does not have to be case sensative.  # noqa\nconn.close()",
        "detail": "UdemyClasses.__pycache__.preview.PIL.checkdb",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "UdemyClasses.__pycache__.preview.PIL.contacts",
        "description": "UdemyClasses.__pycache__.preview.PIL.contacts",
        "peekOfCode": "db = sqlite3.connect(\"contacts.sqlite\")\ndb.execute(\"CREATE TABLE IF NOT EXISTS contacts (name TEXT, phone INTEGER, email TEXT)\")  # noqa\ndb.execute(\"INSERT INTO contacts(name, phone, email) VALUES('Grevy', 7542134200, 'grevyjr@gmail.com')\")  # noqa\ndb.execute(\"INSERT INTO contacts VALUES('MIA', 7542134300, 'mia@gmail.com')\")\ncursor = db.cursor()\ncursor.execute(\"SELECT * FROM contacts\")\n# print(cursor.fetchall())\nprint(cursor.fetchone())\nprint(cursor.fetchone())\nprint(cursor.fetchone())",
        "detail": "UdemyClasses.__pycache__.preview.PIL.contacts",
        "documentation": {}
    },
    {
        "label": "cursor",
        "kind": 5,
        "importPath": "UdemyClasses.__pycache__.preview.PIL.contacts",
        "description": "UdemyClasses.__pycache__.preview.PIL.contacts",
        "peekOfCode": "cursor = db.cursor()\ncursor.execute(\"SELECT * FROM contacts\")\n# print(cursor.fetchall())\nprint(cursor.fetchone())\nprint(cursor.fetchone())\nprint(cursor.fetchone())\nfor name, phone, email in cursor:\n    print(name)\n    print(phone)\n    print(email)",
        "detail": "UdemyClasses.__pycache__.preview.PIL.contacts",
        "documentation": {}
    },
    {
        "label": "CalculatorButton",
        "kind": 6,
        "importPath": "UdemyClasses.calculator_widgets",
        "description": "UdemyClasses.calculator_widgets",
        "peekOfCode": "class CalculatorButton(tk.Button):\n    \"\"\"A button with callback, to be used with a CalculatorGrid widget\"\"\"\n    def __init__(self, master, callback=None, **kwargs):\n        # self.callback = kwargs.pop('callback', None)\n        self.callback = callback\n        super().__init__(master, **kwargs)\n        self.config(command=self.on_click)\n    def on_click(self):\n        if self.callback:\n            self.callback(self['text'])",
        "detail": "UdemyClasses.calculator_widgets",
        "documentation": {}
    },
    {
        "label": "CopyLabel",
        "kind": 6,
        "importPath": "UdemyClasses.calculator_widgets",
        "description": "UdemyClasses.calculator_widgets",
        "peekOfCode": "class CopyLabel(tk.Label):\n    \"\"\"A Label that allows copying its text to the clipboard.\"\"\"\n    def __init__(self, master, **kwargs):\n        super().__init__(master, **kwargs)\n        # Bind the double click event to our on_copy method\n        self.bind('<Double-Button-1>', self.on_copy)  \n    def on_copy(self, event):\n        self.clipboard_clear()\n        self.clipboard_append(self['text'])\n        tk.messagebox.showinfo('Clipboard', 'text copied')",
        "detail": "UdemyClasses.calculator_widgets",
        "documentation": {}
    },
    {
        "label": "CalculatorGrid",
        "kind": 6,
        "importPath": "UdemyClasses.calculator_widgets",
        "description": "UdemyClasses.calculator_widgets",
        "peekOfCode": "class CalculatorGrid(tk.Frame):\n    \"\"\"A tinker Frame that displays buttons and implements a simple calculator.\"\"\"  # noqa\n    keys = [[('C', 1), ('CE', 1)],\n            [('7', 1), ('8', 1), ('9', 1), ('+', 1)],\n            [('4', 1), ('5', 1), ('6', 1), ('-', 1)],\n            [('1', 1), ('2', 1), ('3', 1), ('*', 1)],\n            [('0', 1), ('=', 2), ('/', 1)],\n            ]\n    # allowed_chars = [key[0] for key_row in keys for key in key_row]\n    def __init__(self, master, **kwargs):",
        "detail": "UdemyClasses.calculator_widgets",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "UdemyClasses.calculator_widgets",
        "description": "UdemyClasses.calculator_widgets",
        "peekOfCode": "def test():\n    def clicked(caption: str):\n        print(f'{caption} was clicked')\n    main_window = tk.Tk()\n    main_window.title(\"CalculatorButton test\")\n    main_window.geometry('640x480')\n    btn = CalculatorButton(main_window, callback=clicked, text='Test')\n    btn.grid(row=0, column=0, sticky=\"nsew\")\n    main_window.mainloop()\nif __name__ == '__main__':",
        "detail": "UdemyClasses.calculator_widgets",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "UdemyClasses.checkdb",
        "description": "UdemyClasses.checkdb",
        "peekOfCode": "db = sqlite3.connect(\"accounts.sqlite\", detect_types=sqlite3.PARSE_DECLTYPES)\n# for row in db.execute(\"SELECT strftime('%Y-%m-%d %H:%M:%f', history.time,'localtime') AS localtime,\"\n#                       \" history.account, history.amount FROM history ORDER BY history.time\"):\nfor row in db.execute(\"SELECT * FROM localhistory\"):\n    print(row)\ndb.close()\n# conn.close()",
        "detail": "UdemyClasses.checkdb",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "UdemyClasses.conditional_expression",
        "description": "UdemyClasses.conditional_expression",
        "peekOfCode": "x = 99\nresult = 'in range' if x < 100 else 'out of range'\nprint(result)",
        "detail": "UdemyClasses.conditional_expression",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "UdemyClasses.conditional_expression",
        "description": "UdemyClasses.conditional_expression",
        "peekOfCode": "result = 'in range' if x < 100 else 'out of range'\nprint(result)",
        "detail": "UdemyClasses.conditional_expression",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "UdemyClasses.contacts",
        "description": "UdemyClasses.contacts",
        "peekOfCode": "db = sqlite3.connect(\"contacts.sqlite\")\ndb.execute(\"CREATE TABLE IF NOT EXISTS contacts (name TEXT, phone INTEGER, email TEXT)\")  # noqa\ndb.execute(\"INSERT INTO contacts(name, phone, email) VALUES('Grevy', 7542134200, 'grevyjr@gmail.com')\")  # noqa\ndb.execute(\"INSERT INTO contacts VALUES('MIA', 7542134300, 'mia@gmail.com')\")\ncursor = db.cursor()\ncursor.execute(\"SELECT * FROM contacts\")\n# print(cursor.fetchall())\nprint(cursor.fetchone())\nprint(cursor.fetchone())\nprint(cursor.fetchone())",
        "detail": "UdemyClasses.contacts",
        "documentation": {}
    },
    {
        "label": "cursor",
        "kind": 5,
        "importPath": "UdemyClasses.contacts",
        "description": "UdemyClasses.contacts",
        "peekOfCode": "cursor = db.cursor()\ncursor.execute(\"SELECT * FROM contacts\")\n# print(cursor.fetchall())\nprint(cursor.fetchone())\nprint(cursor.fetchone())\nprint(cursor.fetchone())\nfor name, phone, email in cursor:\n    print(name)\n    print(phone)\n    print(email)",
        "detail": "UdemyClasses.contacts",
        "documentation": {}
    },
    {
        "label": "people",
        "kind": 5,
        "importPath": "UdemyClasses.data",
        "description": "UdemyClasses.data",
        "peekOfCode": "people = [\n    (\"John Cleese\", \"cleese@gmail.com\"),\n    (\"Terry Gilliam\", \"gilliam@gmail.com\"),\n    (\"Eric Idle\", \"\"),\n    (\"Terry Jones\", \"jones@gmail.com\"),\n    (\"Graham Chapman\", \"chapman@gmail.com\"),\n    (\"Michael Palin\", \"\")\n]\n# Named Tuples are described in the documentation\n# https://docs.python.org/3/library/collections.html#collections.namedtuple",
        "detail": "UdemyClasses.data",
        "documentation": {}
    },
    {
        "label": "Plant",
        "kind": 5,
        "importPath": "UdemyClasses.data",
        "description": "UdemyClasses.data",
        "peekOfCode": "Plant = namedtuple('Plant', 'name, scientific_name, lifecycle, plant_type')\nPlantDetails = namedtuple('PlantDetails', ['scientific_name', 'lifecycle', 'plant_type'])\nbasic_plants_list = [\n    (\"Andromeda\", \"Pieris japonica\", \"Evergreen\", \"Shrub\"),\n    (\"Bellflower\", \"Campanula\", \"perennial\", \"Flower\"),\n    (\"China Pink\", \"Dianthus\", \"Perennial\", \"Flower\"),\n    (\"Daffodil\", \"Narcissus\", \"Perennial\", \"Flower\"),\n    (\"Evening Primrose\", \"Oenothera\", \"Biennial\", \"Flower\"),\n    (\"French Marigold\", \"Tagetes patula\", \"Annual\", \"Flower\"),\n    (\"Golden Hakone Grass\", \"Hakonechloa macra\", \"Perennial\", \"Grass\"),",
        "detail": "UdemyClasses.data",
        "documentation": {}
    },
    {
        "label": "PlantDetails",
        "kind": 5,
        "importPath": "UdemyClasses.data",
        "description": "UdemyClasses.data",
        "peekOfCode": "PlantDetails = namedtuple('PlantDetails', ['scientific_name', 'lifecycle', 'plant_type'])\nbasic_plants_list = [\n    (\"Andromeda\", \"Pieris japonica\", \"Evergreen\", \"Shrub\"),\n    (\"Bellflower\", \"Campanula\", \"perennial\", \"Flower\"),\n    (\"China Pink\", \"Dianthus\", \"Perennial\", \"Flower\"),\n    (\"Daffodil\", \"Narcissus\", \"Perennial\", \"Flower\"),\n    (\"Evening Primrose\", \"Oenothera\", \"Biennial\", \"Flower\"),\n    (\"French Marigold\", \"Tagetes patula\", \"Annual\", \"Flower\"),\n    (\"Golden Hakone Grass\", \"Hakonechloa macra\", \"Perennial\", \"Grass\"),\n    (\"Hydrangea\", \"Hydrangea\", \"evergreen\", \"Shrub\"),",
        "detail": "UdemyClasses.data",
        "documentation": {}
    },
    {
        "label": "basic_plants_list",
        "kind": 5,
        "importPath": "UdemyClasses.data",
        "description": "UdemyClasses.data",
        "peekOfCode": "basic_plants_list = [\n    (\"Andromeda\", \"Pieris japonica\", \"Evergreen\", \"Shrub\"),\n    (\"Bellflower\", \"Campanula\", \"perennial\", \"Flower\"),\n    (\"China Pink\", \"Dianthus\", \"Perennial\", \"Flower\"),\n    (\"Daffodil\", \"Narcissus\", \"Perennial\", \"Flower\"),\n    (\"Evening Primrose\", \"Oenothera\", \"Biennial\", \"Flower\"),\n    (\"French Marigold\", \"Tagetes patula\", \"Annual\", \"Flower\"),\n    (\"Golden Hakone Grass\", \"Hakonechloa macra\", \"Perennial\", \"Grass\"),\n    (\"Hydrangea\", \"Hydrangea\", \"evergreen\", \"Shrub\"),\n    (\"Iris\", \"Iris\", \"Perennial\", \"Flower\"),",
        "detail": "UdemyClasses.data",
        "documentation": {}
    },
    {
        "label": "plants_list",
        "kind": 5,
        "importPath": "UdemyClasses.data",
        "description": "UdemyClasses.data",
        "peekOfCode": "plants_list = [\n    Plant(\"Andromeda\", \"Pieris japonica\", \"Evergreen\", \"Shrub\"),\n    Plant(\"Bellflower\", \"Campanula\", \"perennial\", \"Flower\"),\n    Plant(\"China Pink\", \"Dianthus\", \"Perennial\", \"Flower\"),\n    Plant(\"Daffodil\", \"Narcissus\", \"Perennial\", \"Flower\"),\n    Plant(\"Evening Primrose\", \"Oenothera\", \"Biennial\", \"Flower\"),\n    Plant(\"French Marigold\", \"Tagetes patula\", \"Annual\", \"Flower\"),\n    Plant(\"Golden Hakone Grass\", \"Hakonechloa macra\", \"Perennial\", \"Grass\"),\n    Plant(\"Hydrangea\", \"Hydrangea\", \"evergreen\", \"Shrub\"),\n    Plant(\"Iris\", \"Iris\", \"Perennial\", \"Flower\"),",
        "detail": "UdemyClasses.data",
        "documentation": {}
    },
    {
        "label": "plants_dict",
        "kind": 5,
        "importPath": "UdemyClasses.data",
        "description": "UdemyClasses.data",
        "peekOfCode": "plants_dict = {\n    \"Andromeda\": PlantDetails(\"Pieris japonica\", \"Evergreen\", \"Shrub\"),\n    \"Bellflower\": PlantDetails(\"Campanula\", \"Annual, biennial, perennial\", \"Flower\"),\n    \"China Pink\": PlantDetails(\"Dianthus\", \"Perennial\", \"Flower\"),\n    \"Daffodil\": PlantDetails(\"Narcissus\", \"Perennial\", \"Flower\"),\n    \"Evening Primrose\": PlantDetails(\"Oenothera\", \"Biennial\", \"Flower\"),\n    \"French Marigold\": PlantDetails(\"Tagetes patula\", \"Annual\", \"Flower\"),\n    \"Golden Hakone Grass\": PlantDetails(\"Hakonechloa macra\", \"Perennial\", \"Grass\"),\n    \"Hydrangea\": PlantDetails(\"Hydrangea\", \"Deciduous, evergreen\", \"Shrub\"),\n    \"Iris\": PlantDetails(\"Iris\", \"Perennial\", \"Flower\"),",
        "detail": "UdemyClasses.data",
        "documentation": {}
    },
    {
        "label": "divide_two_numbers",
        "kind": 2,
        "importPath": "UdemyClasses.DivideTwoNumber",
        "description": "UdemyClasses.DivideTwoNumber",
        "peekOfCode": "def divide_two_numbers(prompt):\n    while True:\n        try:\n            number = int(input(prompt))\n            return number\n        except ValueError:\n            print(\"Invalid number entered, please try again\")\nprint(\"Pick two numbers to divide: \")\nfirst_number = divide_two_numbers('First Number ')\nsecond_number = divide_two_numbers('Second Number ')",
        "detail": "UdemyClasses.DivideTwoNumber",
        "documentation": {}
    },
    {
        "label": "first_number",
        "kind": 5,
        "importPath": "UdemyClasses.DivideTwoNumber",
        "description": "UdemyClasses.DivideTwoNumber",
        "peekOfCode": "first_number = divide_two_numbers('First Number ')\nsecond_number = divide_two_numbers('Second Number ')\ntry:\n    print(\"{} divided by {} is {}\".format(first_number, second_number, first_number / second_number))  # noqa\nexcept ZeroDivisionError:\n    print(\"You can't divide by zero\")",
        "detail": "UdemyClasses.DivideTwoNumber",
        "documentation": {}
    },
    {
        "label": "second_number",
        "kind": 5,
        "importPath": "UdemyClasses.DivideTwoNumber",
        "description": "UdemyClasses.DivideTwoNumber",
        "peekOfCode": "second_number = divide_two_numbers('Second Number ')\ntry:\n    print(\"{} divided by {} is {}\".format(first_number, second_number, first_number / second_number))  # noqa\nexcept ZeroDivisionError:\n    print(\"You can't divide by zero\")",
        "detail": "UdemyClasses.DivideTwoNumber",
        "documentation": {}
    },
    {
        "label": "fibonacci",
        "kind": 2,
        "importPath": "UdemyClasses.fibgen",
        "description": "UdemyClasses.fibgen",
        "peekOfCode": "def fibonacci():\n    \"\"\"fibonacci generator\n    Returns\n    -------\n        current get the value zero plus 1, and previous get the old value of\n        current, which the first time it runs is zero. Next time around\n        current becomes 1 plus zero, so one again, in other words,\n        and previous this time, becomes one. And the third time around,\n        current becomes two and previous becomes one. Then we get three and\n        two, followed by five and three and so on.",
        "detail": "UdemyClasses.fibgen",
        "documentation": {}
    },
    {
        "label": "fib",
        "kind": 5,
        "importPath": "UdemyClasses.fibgen",
        "description": "UdemyClasses.fibgen",
        "peekOfCode": "fib = fibonacci()\nfor i in range(21):\n    print(i, next(fib))",
        "detail": "UdemyClasses.fibgen",
        "documentation": {}
    },
    {
        "label": "ROOT",
        "kind": 5,
        "importPath": "UdemyClasses.filegen",
        "description": "UdemyClasses.filegen",
        "peekOfCode": "ROOT = \"music\"\nfor path, directories, files in os.walk(ROOT, topdown=True):\n    if files:\n        print(path)\n        first_split = os.path.split(path)\n        print(first_split)\n        second_split = os.path.split(first_split[0])\n        print(second_split)\n        for f in files:\n            song_details = f[:-5].split(' - ')",
        "detail": "UdemyClasses.filegen",
        "documentation": {}
    },
    {
        "label": "find_albums",
        "kind": 2,
        "importPath": "UdemyClasses.filesearch",
        "description": "UdemyClasses.filesearch",
        "peekOfCode": "def find_albums(root, artist_name):\n    \"\"\" This function creates a function called find_albums to locate\n    the albums and artist in the file directory.\n    \"\"\"\n    caps_name = artist_name.upper()\n    for path, directories, files in os.walk(root):\n        # for artist in fnmatch.filter(directories, artist_name):\n        # for artist in fnmatch.filter((d.upper() for d in directories), caps_name):  # noqa\n        for artist in (d for d in directories if fnmatch.fnmatch(d.upper(), caps_name)):  # noqa\n            subdir = os.path.join(path, artist)",
        "detail": "UdemyClasses.filesearch",
        "documentation": {}
    },
    {
        "label": "find_songs",
        "kind": 2,
        "importPath": "UdemyClasses.filesearch",
        "description": "UdemyClasses.filesearch",
        "peekOfCode": "def find_songs(albums):\n    \"\"\"find_songs is a function to search for albums\n    in the file directory.\n    Parameters\n    ----------\n    albums\n        Albums is the column name in this table.\n    Yields\n    ------\n        The yield keyword is used here to iterate thru",
        "detail": "UdemyClasses.filesearch",
        "documentation": {}
    },
    {
        "label": "album_list",
        "kind": 5,
        "importPath": "UdemyClasses.filesearch",
        "description": "UdemyClasses.filesearch",
        "peekOfCode": "album_list = find_albums(\"music\", \"black*\")\nsong_list = find_songs(album_list)\nfor s in song_list:\n    print(s)",
        "detail": "UdemyClasses.filesearch",
        "documentation": {}
    },
    {
        "label": "song_list",
        "kind": 5,
        "importPath": "UdemyClasses.filesearch",
        "description": "UdemyClasses.filesearch",
        "peekOfCode": "song_list = find_songs(album_list)\nfor s in song_list:\n    print(s)",
        "detail": "UdemyClasses.filesearch",
        "documentation": {}
    },
    {
        "label": "Id3Error",
        "kind": 6,
        "importPath": "UdemyClasses.id3reader_p3",
        "description": "UdemyClasses.id3reader_p3",
        "peekOfCode": "class Id3Error(Exception):\n    \"\"\" An exception caused by id3reader properly handling a bad ID3 tag.\n    \"\"\"\n    pass\nclass _Header:\n    \"\"\" Represent the ID3 header in a tag.\n    \"\"\"\n    def __init__(self):\n        self.majorVersion = 0\n        self.revision = 0",
        "detail": "UdemyClasses.id3reader_p3",
        "documentation": {}
    },
    {
        "label": "_Header",
        "kind": 6,
        "importPath": "UdemyClasses.id3reader_p3",
        "description": "UdemyClasses.id3reader_p3",
        "peekOfCode": "class _Header:\n    \"\"\" Represent the ID3 header in a tag.\n    \"\"\"\n    def __init__(self):\n        self.majorVersion = 0\n        self.revision = 0\n        self.flags = 0\n        self.size = 0\n        self.bUnsynchronized = False\n        self.bExperimental = False",
        "detail": "UdemyClasses.id3reader_p3",
        "documentation": {}
    },
    {
        "label": "_Frame",
        "kind": 6,
        "importPath": "UdemyClasses.id3reader_p3",
        "description": "UdemyClasses.id3reader_p3",
        "peekOfCode": "class _Frame:\n    \"\"\" Represent an ID3 frame in a tag.\n    \"\"\"\n    def __init__(self):\n        self.id = ''\n        self.size = 0\n        self.flags = 0\n        self.rawData = ''\n        self.bTagAlterPreserve = False\n        self.bFileAlterPreserve = False",
        "detail": "UdemyClasses.id3reader_p3",
        "documentation": {}
    },
    {
        "label": "Reader",
        "kind": 6,
        "importPath": "UdemyClasses.id3reader_p3",
        "description": "UdemyClasses.id3reader_p3",
        "peekOfCode": "class Reader:\n    \"\"\" An ID3 reader.\n        Create one on a file object, and then use getValue('TIT2') (for example)\n        to pull values.\n    \"\"\"\n    def __init__(self, music_file):\n        \"\"\" Create a reader from a file or filename. \"\"\"\n        self.file = music_file\n        self.header = None\n        self.frames = {}",
        "detail": "UdemyClasses.id3reader_p3",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "UdemyClasses.id3reader_p3",
        "description": "UdemyClasses.id3reader_p3",
        "peekOfCode": "__version__ = '2.00.20170522'  # History at the end of the file.\n# ID3 specs: http://www.id3.org/develop.html\n# These are the text encodings, indexed by the first byte of a text value.\n_encodings = ['iso8859-1', 'utf-16', 'utf-16be', 'utf-8']\n# Simple pseudo-id's, mapped to their various representations.\n# Use these ids with getValue, and you don't need to know what\n# version of ID3 the file contains.\n_simpleDataMapping = {\n    'album': ('TALB', 'TAL', 'v1album', 'TOAL'),\n    'performer': ('TPE1', 'TP1', 'v1performer', 'TOPE'),",
        "detail": "UdemyClasses.id3reader_p3",
        "documentation": {}
    },
    {
        "label": "_encodings",
        "kind": 5,
        "importPath": "UdemyClasses.id3reader_p3",
        "description": "UdemyClasses.id3reader_p3",
        "peekOfCode": "_encodings = ['iso8859-1', 'utf-16', 'utf-16be', 'utf-8']\n# Simple pseudo-id's, mapped to their various representations.\n# Use these ids with getValue, and you don't need to know what\n# version of ID3 the file contains.\n_simpleDataMapping = {\n    'album': ('TALB', 'TAL', 'v1album', 'TOAL'),\n    'performer': ('TPE1', 'TP1', 'v1performer', 'TOPE'),\n    'title': ('TIT2', 'TT2', 'v1title'),\n    'track': ('TRCK', 'TRK', 'v1track'),\n    'year': ('TYER', 'TYE', 'v1year'),",
        "detail": "UdemyClasses.id3reader_p3",
        "documentation": {}
    },
    {
        "label": "_simpleDataMapping",
        "kind": 5,
        "importPath": "UdemyClasses.id3reader_p3",
        "description": "UdemyClasses.id3reader_p3",
        "peekOfCode": "_simpleDataMapping = {\n    'album': ('TALB', 'TAL', 'v1album', 'TOAL'),\n    'performer': ('TPE1', 'TP1', 'v1performer', 'TOPE'),\n    'title': ('TIT2', 'TT2', 'v1title'),\n    'track': ('TRCK', 'TRK', 'v1track'),\n    'year': ('TYER', 'TYE', 'v1year'),\n    'genre': ('TCON', 'TCO', 'v1genre'),\n    'comment': ('COMM', 'COM', 'v1comment'),\n}\n# Tracing",
        "detail": "UdemyClasses.id3reader_p3",
        "documentation": {}
    },
    {
        "label": "_t",
        "kind": 5,
        "importPath": "UdemyClasses.id3reader_p3",
        "description": "UdemyClasses.id3reader_p3",
        "peekOfCode": "_t = False\ndef _trace(msg):\n    print(msg)\n# Coverage\n_c = False\n_features = {}\ndef _coverage(feat):\n    # if _t: _trace('feature '+feat)\n    _features[feat] = _features.setdefault(feat, 0) + 1\ndef _safestr(s):",
        "detail": "UdemyClasses.id3reader_p3",
        "documentation": {}
    },
    {
        "label": "_c",
        "kind": 5,
        "importPath": "UdemyClasses.id3reader_p3",
        "description": "UdemyClasses.id3reader_p3",
        "peekOfCode": "_c = False\n_features = {}\ndef _coverage(feat):\n    # if _t: _trace('feature '+feat)\n    _features[feat] = _features.setdefault(feat, 0) + 1\ndef _safestr(s):\n    \"\"\" Get a good string for printing, that won't throw exceptions,\n        no matter what's in it.\n    \"\"\"\n    try:",
        "detail": "UdemyClasses.id3reader_p3",
        "documentation": {}
    },
    {
        "label": "_features",
        "kind": 5,
        "importPath": "UdemyClasses.id3reader_p3",
        "description": "UdemyClasses.id3reader_p3",
        "peekOfCode": "_features = {}\ndef _coverage(feat):\n    # if _t: _trace('feature '+feat)\n    _features[feat] = _features.setdefault(feat, 0) + 1\ndef _safestr(s):\n    \"\"\" Get a good string for printing, that won't throw exceptions,\n        no matter what's in it.\n    \"\"\"\n    try:\n        return s.encode(sys.getdefaultencoding())",
        "detail": "UdemyClasses.id3reader_p3",
        "documentation": {}
    },
    {
        "label": "_genres",
        "kind": 5,
        "importPath": "UdemyClasses.id3reader_p3",
        "description": "UdemyClasses.id3reader_p3",
        "peekOfCode": "_genres = [\n    # 0-19\n    'Blues', 'Classic Rock', 'Country', 'Dance', 'Disco', 'Funk', 'Grunge', 'Hip - Hop', 'Jazz', 'Metal',\n    'New Age', 'Oldies', 'Other', 'Pop', 'R&B', 'Rap', 'Reggae', 'Rock', 'Techno', 'Industrial',\n    # 20-39\n    'Alternative', 'Ska', 'Death Metal', 'Pranks', 'Soundtrack', 'Euro - Techno', 'Ambient', 'Trip - Hop',\n    'Vocal', 'Jazz + Funk', 'Fusion', 'Trance', 'Classical', 'Instrumental', 'Acid', 'House', 'Game',\n    'Sound Clip', 'Gospel', 'Noise',\n    # 40-59\n    'Alt Rock', 'Bass', 'Soul', 'Punk', 'Space', 'Meditative', 'Instrumental Pop', 'Instrumental Rock', 'Ethnic',",
        "detail": "UdemyClasses.id3reader_p3",
        "documentation": {}
    },
    {
        "label": "Id3Error",
        "kind": 6,
        "importPath": "UdemyClasses.ID_3reader_p3",
        "description": "UdemyClasses.ID_3reader_p3",
        "peekOfCode": "class Id3Error(Exception):\n    \"\"\" An exception caused by id3reader properly handling a bad ID3 tag.\n    \"\"\"\n    pass\nclass _Header:\n    \"\"\" Represent the ID3 header in a tag.\n    \"\"\"\n    def __init__(self):\n        self._major_version = 0\n        self.revision = 0",
        "detail": "UdemyClasses.ID_3reader_p3",
        "documentation": {}
    },
    {
        "label": "_Header",
        "kind": 6,
        "importPath": "UdemyClasses.ID_3reader_p3",
        "description": "UdemyClasses.ID_3reader_p3",
        "peekOfCode": "class _Header:\n    \"\"\" Represent the ID3 header in a tag.\n    \"\"\"\n    def __init__(self):\n        self._major_version = 0\n        self.revision = 0\n        self.flags = 0\n        self.size = 0\n        self.bunsynchronized = False\n        self.bexperimental = False",
        "detail": "UdemyClasses.ID_3reader_p3",
        "documentation": {}
    },
    {
        "label": "_Frame",
        "kind": 6,
        "importPath": "UdemyClasses.ID_3reader_p3",
        "description": "UdemyClasses.ID_3reader_p3",
        "peekOfCode": "class _Frame:\n    \"\"\" Represent an ID3 frame in a tag.\n    \"\"\"\n    def __init__(self):\n        self.id = ''\n        self.size = 0\n        self.flags = 0\n        self.raw_data = None\n        self.b_tag_alter_preserve = False\n        self.b_file_alter_preserve = False",
        "detail": "UdemyClasses.ID_3reader_p3",
        "documentation": {}
    },
    {
        "label": "Reader",
        "kind": 6,
        "importPath": "UdemyClasses.ID_3reader_p3",
        "description": "UdemyClasses.ID_3reader_p3",
        "peekOfCode": "class Reader:\n    \"\"\" An ID3 reader.\n        Create one on a file object, and then use getValue('TIT2') (for example)  # noqa\n        to pull values.\n    \"\"\"\n    def __init__(self, music_file):\n        \"\"\" Create a reader from a file or filename. \"\"\"\n        self.file = music_file\n        self.header = None\n        self.frames = {}",
        "detail": "UdemyClasses.ID_3reader_p3",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "UdemyClasses.ID_3reader_p3",
        "description": "UdemyClasses.ID_3reader_p3",
        "peekOfCode": "__version__ = '2.00.20170522'  # History at the end of the file.\n# ID3 specs: http://www.id3.org/develop.html\n# These are the text encodings, indexed by the first byte of a text value.\n_encodings = ['iso8859-1', 'utf-16', 'utf-16be', 'utf-8']\n# Simple pseudo-id's, mapped to their various representations.\n# Use these ids with getValue, and you don't need to know what\n# version of ID3 the file contains.\n_simpleDataMapping = {\n    'album': ('TALB', 'TAL', 'v1album', 'TOAL'),\n    'performer': ('TPE1', 'TP1', 'v1performer', 'TOPE'),",
        "detail": "UdemyClasses.ID_3reader_p3",
        "documentation": {}
    },
    {
        "label": "_encodings",
        "kind": 5,
        "importPath": "UdemyClasses.ID_3reader_p3",
        "description": "UdemyClasses.ID_3reader_p3",
        "peekOfCode": "_encodings = ['iso8859-1', 'utf-16', 'utf-16be', 'utf-8']\n# Simple pseudo-id's, mapped to their various representations.\n# Use these ids with getValue, and you don't need to know what\n# version of ID3 the file contains.\n_simpleDataMapping = {\n    'album': ('TALB', 'TAL', 'v1album', 'TOAL'),\n    'performer': ('TPE1', 'TP1', 'v1performer', 'TOPE'),\n    'title': ('TIT2', 'TT2', 'v1title'),\n    'track': ('TRCK', 'TRK', 'v1track'),\n    'year': ('TYER', 'TYE', 'v1year'),",
        "detail": "UdemyClasses.ID_3reader_p3",
        "documentation": {}
    },
    {
        "label": "_simpleDataMapping",
        "kind": 5,
        "importPath": "UdemyClasses.ID_3reader_p3",
        "description": "UdemyClasses.ID_3reader_p3",
        "peekOfCode": "_simpleDataMapping = {\n    'album': ('TALB', 'TAL', 'v1album', 'TOAL'),\n    'performer': ('TPE1', 'TP1', 'v1performer', 'TOPE'),\n    'title': ('TIT2', 'TT2', 'v1title'),\n    'track': ('TRCK', 'TRK', 'v1track'),\n    'year': ('TYER', 'TYE', 'v1year'),\n    'genre': ('TCON', 'TCO', 'v1genre'),\n    'comment': ('COMM', 'COM', 'v1comment'),\n}\n# Tracing",
        "detail": "UdemyClasses.ID_3reader_p3",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "UdemyClasses.ID_3reader_p3",
        "description": "UdemyClasses.ID_3reader_p3",
        "peekOfCode": "_T = False\ndef _trace(msg):\n    print(msg)\n# Coverage\n_C = False\n_features: dict = {}\ndef _coverage(feat):\n    # if _t: _trace('feature '+feat)\n    _features[feat] = _features.setdefault(feat, 0) + 1\ndef _safestr(s):",
        "detail": "UdemyClasses.ID_3reader_p3",
        "documentation": {}
    },
    {
        "label": "_C",
        "kind": 5,
        "importPath": "UdemyClasses.ID_3reader_p3",
        "description": "UdemyClasses.ID_3reader_p3",
        "peekOfCode": "_C = False\n_features: dict = {}\ndef _coverage(feat):\n    # if _t: _trace('feature '+feat)\n    _features[feat] = _features.setdefault(feat, 0) + 1\ndef _safestr(s):\n    \"\"\" Get a good string for printing, that won't throw exceptions,\n        no matter what's in it.\n    \"\"\"\n    try:",
        "detail": "UdemyClasses.ID_3reader_p3",
        "documentation": {}
    },
    {
        "label": "_genres",
        "kind": 5,
        "importPath": "UdemyClasses.ID_3reader_p3",
        "description": "UdemyClasses.ID_3reader_p3",
        "peekOfCode": "_genres = [\n    # 0-19\n    'Blues', 'Classic Rock', 'Country', 'Dance', 'Disco', 'Funk', 'Grunge', 'Hip - Hop', 'Jazz', 'Metal',  # noqa\n    'New Age', 'Oldies', 'Other', 'Pop', 'R&B', 'Rap', 'Reggae', 'Rock', 'Techno', 'Industrial',  # noqa\n    # 20-39\n    'Alternative', 'Ska', 'Death Metal', 'Pranks', 'Soundtrack', 'Euro - Techno', 'Ambient', 'Trip - Hop',  # noqa\n    'Vocal', 'Jazz + Funk', 'Fusion', 'Trance', 'Classical', 'Instrumental', 'Acid', 'House', 'Game',  # noqa\n    'Sound Clip', 'Gospel', 'Noise',\n    # 40-59\n    'Alt Rock', 'Bass', 'Soul', 'Punk', 'Space', 'Meditative', 'Instrumental Pop', 'Instrumental Rock', 'Ethnic',  # noqa",
        "detail": "UdemyClasses.ID_3reader_p3",
        "documentation": {}
    },
    {
        "label": "double",
        "kind": 2,
        "importPath": "UdemyClasses.more_lambdas",
        "description": "UdemyClasses.more_lambdas",
        "peekOfCode": "def double(x):\n    return x * 2\nprint(anon)\nprint(lambda x: x * 2)\nprint(double)\nprint(anon(7))\nprint(anon(7))",
        "detail": "UdemyClasses.more_lambdas",
        "documentation": {}
    },
    {
        "label": "anon",
        "kind": 5,
        "importPath": "UdemyClasses.more_lambdas",
        "description": "UdemyClasses.more_lambdas",
        "peekOfCode": "anon = lambda x: x * 2 # Not PEP 8 compliant!!!\ndef double(x):\n    return x * 2\nprint(anon)\nprint(lambda x: x * 2)\nprint(double)\nprint(anon(7))\nprint(anon(7))",
        "detail": "UdemyClasses.more_lambdas",
        "documentation": {}
    },
    {
        "label": "find_music",
        "kind": 2,
        "importPath": "UdemyClasses.mp3scan",
        "description": "UdemyClasses.mp3scan",
        "peekOfCode": "def find_music(start, extension):\n    \"\"\"find_music is a function with two parameters,\n    one that has a start parameter and the second to for the extention.\n    Parameters\n    ----------\n    start\n       This parameter indicates where we start the search.\n    extension\n        This parameter indicates the files with a certain\n        file extention.",
        "detail": "UdemyClasses.mp3scan",
        "documentation": {}
    },
    {
        "label": "my_music_files",
        "kind": 5,
        "importPath": "UdemyClasses.mp3scan",
        "description": "UdemyClasses.mp3scan",
        "peekOfCode": "my_music_files = find_music(\"/Users/grevy/OneDrive/Music/\", \"mp3\")\nerror_list = []\nfor f in my_music_files:  # The music parameter indicates\n    # where to start. The emp3 indicates the file extention to search for.\n    try:\n        id3r = id3reader.Reader(f)\n        print(f\"Artist: {id3r.get_value('performer')}, \"\n              f\"Album: {id3r.get_value('album')}, \"\n              f\"Track: {id3r.get_value('track')}, \"\n              f\"Song: {id3r.get_value('title')}\")",
        "detail": "UdemyClasses.mp3scan",
        "documentation": {}
    },
    {
        "label": "error_list",
        "kind": 5,
        "importPath": "UdemyClasses.mp3scan",
        "description": "UdemyClasses.mp3scan",
        "peekOfCode": "error_list = []\nfor f in my_music_files:  # The music parameter indicates\n    # where to start. The emp3 indicates the file extention to search for.\n    try:\n        id3r = id3reader.Reader(f)\n        print(f\"Artist: {id3r.get_value('performer')}, \"\n              f\"Album: {id3r.get_value('album')}, \"\n              f\"Track: {id3r.get_value('track')}, \"\n              f\"Song: {id3r.get_value('title')}\")\n    except:",
        "detail": "UdemyClasses.mp3scan",
        "documentation": {}
    },
    {
        "label": "oddnumbers",
        "kind": 2,
        "importPath": "UdemyClasses.pigen",
        "description": "UdemyClasses.pigen",
        "peekOfCode": "def oddnumbers():\n    n = 1\n    while True:\n        yield n\n        n += 2\ndef pi_series():\n    odds = oddnumbers()\n    approximation = 0\n    while True:\n        approximation += (4 / next(odds))",
        "detail": "UdemyClasses.pigen",
        "documentation": {}
    },
    {
        "label": "pi_series",
        "kind": 2,
        "importPath": "UdemyClasses.pigen",
        "description": "UdemyClasses.pigen",
        "peekOfCode": "def pi_series():\n    odds = oddnumbers()\n    approximation = 0\n    while True:\n        approximation += (4 / next(odds))\n        yield approximation\n        approximation -= (4 / next(odds))\n        yield approximation\napprox_pi = pi_series()\nfor x in range(100000):",
        "detail": "UdemyClasses.pigen",
        "documentation": {}
    },
    {
        "label": "approx_pi",
        "kind": 5,
        "importPath": "UdemyClasses.pigen",
        "description": "UdemyClasses.pigen",
        "peekOfCode": "approx_pi = pi_series()\nfor x in range(100000):\n    print(next(approx_pi))",
        "detail": "UdemyClasses.pigen",
        "documentation": {}
    },
    {
        "label": "sort_perinnials",
        "kind": 2,
        "importPath": "UdemyClasses.planting _instructions",
        "description": "UdemyClasses.planting _instructions",
        "peekOfCode": "def sort_perinnials(item) -> str:\n    if item.lifecycle.casefold() == 'perinnial':\n        return '1' + item.name\n    else:\n        return '0' + item.name\n# plants_list.sort(key=sort_perinnials)\nplants_list.sort(key=lambda item: '1' + item.name if item.lifecycle ==\n                 'Perinnial' else '0' + item.name)\nwith open(\"planting_instructions.txt\", 'w', encoding='utf-8') as output_file:\n    for plant in plants_list:",
        "detail": "UdemyClasses.planting _instructions",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "UdemyClasses.scratchpad",
        "description": "UdemyClasses.scratchpad",
        "peekOfCode": "a = 2 \nb = 3\nprint(f\"a is {a}, b is {b}\")\na, b = 3, 2 # b, a\n# TEMP = a\n# A = b\n# B = TEMP\nprint(f\"a is {a}, b is {b}\")",
        "detail": "UdemyClasses.scratchpad",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "UdemyClasses.scratchpad",
        "description": "UdemyClasses.scratchpad",
        "peekOfCode": "b = 3\nprint(f\"a is {a}, b is {b}\")\na, b = 3, 2 # b, a\n# TEMP = a\n# A = b\n# B = TEMP\nprint(f\"a is {a}, b is {b}\")",
        "detail": "UdemyClasses.scratchpad",
        "documentation": {}
    },
    {
        "label": "main_window_padding",
        "kind": 5,
        "importPath": "UdemyClasses.simple_calculator",
        "description": "UdemyClasses.simple_calculator",
        "peekOfCode": "main_window_padding = 8\nmain_window = tk.Tk()\nmain_window.title(\"Calculator with subclassed widgets\")\nmain_window.geometry('640x480')\nmain_window['padx'] = main_window_padding\ncalc = CalculatorGrid(main_window)\ncalc.grid(row=1, column=0, sticky='nsew')\nmain_window.mainloop()",
        "detail": "UdemyClasses.simple_calculator",
        "documentation": {}
    },
    {
        "label": "main_window",
        "kind": 5,
        "importPath": "UdemyClasses.simple_calculator",
        "description": "UdemyClasses.simple_calculator",
        "peekOfCode": "main_window = tk.Tk()\nmain_window.title(\"Calculator with subclassed widgets\")\nmain_window.geometry('640x480')\nmain_window['padx'] = main_window_padding\ncalc = CalculatorGrid(main_window)\ncalc.grid(row=1, column=0, sticky='nsew')\nmain_window.mainloop()",
        "detail": "UdemyClasses.simple_calculator",
        "documentation": {}
    },
    {
        "label": "main_window['padx']",
        "kind": 5,
        "importPath": "UdemyClasses.simple_calculator",
        "description": "UdemyClasses.simple_calculator",
        "peekOfCode": "main_window['padx'] = main_window_padding\ncalc = CalculatorGrid(main_window)\ncalc.grid(row=1, column=0, sticky='nsew')\nmain_window.mainloop()",
        "detail": "UdemyClasses.simple_calculator",
        "documentation": {}
    },
    {
        "label": "calc",
        "kind": 5,
        "importPath": "UdemyClasses.simple_calculator",
        "description": "UdemyClasses.simple_calculator",
        "peekOfCode": "calc = CalculatorGrid(main_window)\ncalc.grid(row=1, column=0, sticky='nsew')\nmain_window.mainloop()",
        "detail": "UdemyClasses.simple_calculator",
        "documentation": {}
    },
    {
        "label": "my_range",
        "kind": 2,
        "importPath": "UdemyClasses.size",
        "description": "UdemyClasses.size",
        "peekOfCode": "def my_range(n: int):\n    \"\"\"\n    This line defines a function named my_range that takes one argument n.\n    The : int part is a type hint that indicates n should be an integer.\n    Type hints are optional in Python and do not enforce\n    the type of the variable, but they can make your code easier to understand.\n    \"\"\"\n    print(\"my_range starts\")\n    start = 0\n    while start < n:",
        "detail": "UdemyClasses.size",
        "documentation": {}
    },
    {
        "label": "big_range",
        "kind": 5,
        "importPath": "UdemyClasses.size",
        "description": "UdemyClasses.size",
        "peekOfCode": "big_range = range(5)\n# big_range = my_range(5)\n# _ = input(\"Line 23, hit enter to continue.\")\nprint(f\"big_range is {sys.getsizeof(big_range)} bytes\")\n# Create a list containing all the values in big_range\nbig_list = []\n# _ = input(\"Line 31, hit enter to continue.\")\nfor val in big_range:\n    # _ = input(\"Line 34, hit enter to continue.\")\n    big_list.append(val)",
        "detail": "UdemyClasses.size",
        "documentation": {}
    },
    {
        "label": "big_list",
        "kind": 5,
        "importPath": "UdemyClasses.size",
        "description": "UdemyClasses.size",
        "peekOfCode": "big_list = []\n# _ = input(\"Line 31, hit enter to continue.\")\nfor val in big_range:\n    # _ = input(\"Line 34, hit enter to continue.\")\n    big_list.append(val)\nprint(f\"big_list is {sys.getsizeof(big_list)} bytes\")\nprint(big_range)\nprint(big_list)\nprint(\"looping again ...or not\")\nfor i in big_range:",
        "detail": "UdemyClasses.size",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "blocks",
        "description": "blocks",
        "peekOfCode": "name = input(\"Please enter name: \")\nage = int(input(f\"How old are you, {name} ? \"))\n# print(\"Oh \", age)\n# if age >= 18:\n#     print(\"You are old enough to vote.\")\n# else:\n#     print(f\"Please come back in {18 - age} years {name}.\")\nmessage = f\"You are old enough to vote {name}.\" if age >= 18 \\\n    else f\"Please come back in {18 - age} years {name}.\"\nprint(message)",
        "detail": "blocks",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "blocks",
        "description": "blocks",
        "peekOfCode": "age = int(input(f\"How old are you, {name} ? \"))\n# print(\"Oh \", age)\n# if age >= 18:\n#     print(\"You are old enough to vote.\")\n# else:\n#     print(f\"Please come back in {18 - age} years {name}.\")\nmessage = f\"You are old enough to vote {name}.\" if age >= 18 \\\n    else f\"Please come back in {18 - age} years {name}.\"\nprint(message)",
        "detail": "blocks",
        "documentation": {}
    },
    {
        "label": "message",
        "kind": 5,
        "importPath": "blocks",
        "description": "blocks",
        "peekOfCode": "message = f\"You are old enough to vote {name}.\" if age >= 18 \\\n    else f\"Please come back in {18 - age} years {name}.\"\nprint(message)",
        "detail": "blocks",
        "documentation": {}
    },
    {
        "label": "button_click",
        "kind": 2,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "def button_click(number):\n    # e.delete(0, END)\n    current = e.get()\n    e.delete(0, Tk.END)\n    e.insert(0, str(current) + str(number))\ndef button_clear():\n    e.delete(0, END)\ndef button_add():\n    first_number = e.get()\n    global f_num",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_clear",
        "kind": 2,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "def button_clear():\n    e.delete(0, END)\ndef button_add():\n    first_number = e.get()\n    global f_num\n    f_num = int(first_number)\n    e.delete(0, END)\ndef button_equal():\n    second_number = e.get()\n    e.delete(0, END)",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_add",
        "kind": 2,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "def button_add():\n    first_number = e.get()\n    global f_num\n    f_num = int(first_number)\n    e.delete(0, END)\ndef button_equal():\n    second_number = e.get()\n    e.delete(0, END)\n    e.insert(0, f_num + int(second_number))\ndef button_subtract():",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_equal",
        "kind": 2,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "def button_equal():\n    second_number = e.get()\n    e.delete(0, END)\n    e.insert(0, f_num + int(second_number))\ndef button_subtract():\n    return\ndef button_multiply():\n    return\ndef button_divide():\n    return",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_subtract",
        "kind": 2,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "def button_subtract():\n    return\ndef button_multiply():\n    return\ndef button_divide():\n    return\n# Define buttons\nbutton_1 = Button(root, text=\"1\", padx=40, pady=20, command=lambda: button_click(1))\nbutton_2 = Button(root, text=\"2\", padx=40, pady=20, command=lambda: button_click(2))\nbutton_3 = Button(root, text=\"3\", padx=40, pady=20, command=lambda: button_click(3))",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_multiply",
        "kind": 2,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "def button_multiply():\n    return\ndef button_divide():\n    return\n# Define buttons\nbutton_1 = Button(root, text=\"1\", padx=40, pady=20, command=lambda: button_click(1))\nbutton_2 = Button(root, text=\"2\", padx=40, pady=20, command=lambda: button_click(2))\nbutton_3 = Button(root, text=\"3\", padx=40, pady=20, command=lambda: button_click(3))\nbutton_4 = Button(root, text=\"4\", padx=40, pady=20, command=lambda: button_click(4))\nbutton_5 = Button(root, text=\"5\", padx=40, pady=20, command=lambda: button_click(5))",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_divide",
        "kind": 2,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "def button_divide():\n    return\n# Define buttons\nbutton_1 = Button(root, text=\"1\", padx=40, pady=20, command=lambda: button_click(1))\nbutton_2 = Button(root, text=\"2\", padx=40, pady=20, command=lambda: button_click(2))\nbutton_3 = Button(root, text=\"3\", padx=40, pady=20, command=lambda: button_click(3))\nbutton_4 = Button(root, text=\"4\", padx=40, pady=20, command=lambda: button_click(4))\nbutton_5 = Button(root, text=\"5\", padx=40, pady=20, command=lambda: button_click(5))\nbutton_6 = Button(root, text=\"6\", padx=40, pady=20, command=lambda: button_click(6))\nbutton_7 = Button(root, text=\"7\", padx=40, pady=20, command=lambda: button_click(7))",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "root = Tk()\nroot.title(\"Grevy's Calculator\")\ne = Entry(root, width=35, borderwidth=5)\ne.grid(row=0, column=0, columnspan=3, padx=10, pady=10)\n# e.insert(0, \"\")\ndef button_click(number):\n    # e.delete(0, END)\n    current = e.get()\n    e.delete(0, Tk.END)\n    e.insert(0, str(current) + str(number))",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "e = Entry(root, width=35, borderwidth=5)\ne.grid(row=0, column=0, columnspan=3, padx=10, pady=10)\n# e.insert(0, \"\")\ndef button_click(number):\n    # e.delete(0, END)\n    current = e.get()\n    e.delete(0, Tk.END)\n    e.insert(0, str(current) + str(number))\ndef button_clear():\n    e.delete(0, END)",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_1",
        "kind": 5,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "button_1 = Button(root, text=\"1\", padx=40, pady=20, command=lambda: button_click(1))\nbutton_2 = Button(root, text=\"2\", padx=40, pady=20, command=lambda: button_click(2))\nbutton_3 = Button(root, text=\"3\", padx=40, pady=20, command=lambda: button_click(3))\nbutton_4 = Button(root, text=\"4\", padx=40, pady=20, command=lambda: button_click(4))\nbutton_5 = Button(root, text=\"5\", padx=40, pady=20, command=lambda: button_click(5))\nbutton_6 = Button(root, text=\"6\", padx=40, pady=20, command=lambda: button_click(6))\nbutton_7 = Button(root, text=\"7\", padx=40, pady=20, command=lambda: button_click(7))\nbutton_8 = Button(root, text=\"8\", padx=40, pady=20, command=lambda: button_click(8))\nbutton_9 = Button(root, text=\"9\", padx=40, pady=20, command=lambda: button_click(9))\nbutton_0 = Button(root, text=\"0\", padx=40, pady=20, command=lambda: button_click(0))",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_2",
        "kind": 5,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "button_2 = Button(root, text=\"2\", padx=40, pady=20, command=lambda: button_click(2))\nbutton_3 = Button(root, text=\"3\", padx=40, pady=20, command=lambda: button_click(3))\nbutton_4 = Button(root, text=\"4\", padx=40, pady=20, command=lambda: button_click(4))\nbutton_5 = Button(root, text=\"5\", padx=40, pady=20, command=lambda: button_click(5))\nbutton_6 = Button(root, text=\"6\", padx=40, pady=20, command=lambda: button_click(6))\nbutton_7 = Button(root, text=\"7\", padx=40, pady=20, command=lambda: button_click(7))\nbutton_8 = Button(root, text=\"8\", padx=40, pady=20, command=lambda: button_click(8))\nbutton_9 = Button(root, text=\"9\", padx=40, pady=20, command=lambda: button_click(9))\nbutton_0 = Button(root, text=\"0\", padx=40, pady=20, command=lambda: button_click(0))\nbutton_add = Button(root, text=\"+\", padx=39, pady=20, command=button_add)",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_3",
        "kind": 5,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "button_3 = Button(root, text=\"3\", padx=40, pady=20, command=lambda: button_click(3))\nbutton_4 = Button(root, text=\"4\", padx=40, pady=20, command=lambda: button_click(4))\nbutton_5 = Button(root, text=\"5\", padx=40, pady=20, command=lambda: button_click(5))\nbutton_6 = Button(root, text=\"6\", padx=40, pady=20, command=lambda: button_click(6))\nbutton_7 = Button(root, text=\"7\", padx=40, pady=20, command=lambda: button_click(7))\nbutton_8 = Button(root, text=\"8\", padx=40, pady=20, command=lambda: button_click(8))\nbutton_9 = Button(root, text=\"9\", padx=40, pady=20, command=lambda: button_click(9))\nbutton_0 = Button(root, text=\"0\", padx=40, pady=20, command=lambda: button_click(0))\nbutton_add = Button(root, text=\"+\", padx=39, pady=20, command=button_add)\nbutton_equal = Button(root, text=\"=\", padx=91, pady=20, command=button_equal)",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_4",
        "kind": 5,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "button_4 = Button(root, text=\"4\", padx=40, pady=20, command=lambda: button_click(4))\nbutton_5 = Button(root, text=\"5\", padx=40, pady=20, command=lambda: button_click(5))\nbutton_6 = Button(root, text=\"6\", padx=40, pady=20, command=lambda: button_click(6))\nbutton_7 = Button(root, text=\"7\", padx=40, pady=20, command=lambda: button_click(7))\nbutton_8 = Button(root, text=\"8\", padx=40, pady=20, command=lambda: button_click(8))\nbutton_9 = Button(root, text=\"9\", padx=40, pady=20, command=lambda: button_click(9))\nbutton_0 = Button(root, text=\"0\", padx=40, pady=20, command=lambda: button_click(0))\nbutton_add = Button(root, text=\"+\", padx=39, pady=20, command=button_add)\nbutton_equal = Button(root, text=\"=\", padx=91, pady=20, command=button_equal)\nbutton_clear = Button(root, text=\"Clear\", padx=79, pady=20, command=button_clear)",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_5",
        "kind": 5,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "button_5 = Button(root, text=\"5\", padx=40, pady=20, command=lambda: button_click(5))\nbutton_6 = Button(root, text=\"6\", padx=40, pady=20, command=lambda: button_click(6))\nbutton_7 = Button(root, text=\"7\", padx=40, pady=20, command=lambda: button_click(7))\nbutton_8 = Button(root, text=\"8\", padx=40, pady=20, command=lambda: button_click(8))\nbutton_9 = Button(root, text=\"9\", padx=40, pady=20, command=lambda: button_click(9))\nbutton_0 = Button(root, text=\"0\", padx=40, pady=20, command=lambda: button_click(0))\nbutton_add = Button(root, text=\"+\", padx=39, pady=20, command=button_add)\nbutton_equal = Button(root, text=\"=\", padx=91, pady=20, command=button_equal)\nbutton_clear = Button(root, text=\"Clear\", padx=79, pady=20, command=button_clear)\nbutton_subtract = Button(root, text=\"-\", padx=39, pady=20, command=button_subtract)",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_6",
        "kind": 5,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "button_6 = Button(root, text=\"6\", padx=40, pady=20, command=lambda: button_click(6))\nbutton_7 = Button(root, text=\"7\", padx=40, pady=20, command=lambda: button_click(7))\nbutton_8 = Button(root, text=\"8\", padx=40, pady=20, command=lambda: button_click(8))\nbutton_9 = Button(root, text=\"9\", padx=40, pady=20, command=lambda: button_click(9))\nbutton_0 = Button(root, text=\"0\", padx=40, pady=20, command=lambda: button_click(0))\nbutton_add = Button(root, text=\"+\", padx=39, pady=20, command=button_add)\nbutton_equal = Button(root, text=\"=\", padx=91, pady=20, command=button_equal)\nbutton_clear = Button(root, text=\"Clear\", padx=79, pady=20, command=button_clear)\nbutton_subtract = Button(root, text=\"-\", padx=39, pady=20, command=button_subtract)\nbutton_multiply = Button(root, text=\"*\", padx=39, pady=20, command=button_multiply)",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_7",
        "kind": 5,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "button_7 = Button(root, text=\"7\", padx=40, pady=20, command=lambda: button_click(7))\nbutton_8 = Button(root, text=\"8\", padx=40, pady=20, command=lambda: button_click(8))\nbutton_9 = Button(root, text=\"9\", padx=40, pady=20, command=lambda: button_click(9))\nbutton_0 = Button(root, text=\"0\", padx=40, pady=20, command=lambda: button_click(0))\nbutton_add = Button(root, text=\"+\", padx=39, pady=20, command=button_add)\nbutton_equal = Button(root, text=\"=\", padx=91, pady=20, command=button_equal)\nbutton_clear = Button(root, text=\"Clear\", padx=79, pady=20, command=button_clear)\nbutton_subtract = Button(root, text=\"-\", padx=39, pady=20, command=button_subtract)\nbutton_multiply = Button(root, text=\"*\", padx=39, pady=20, command=button_multiply)\nbutton_divide = Button(root, text=\"/\", padx=39, pady=20, command=button_divide)",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_8",
        "kind": 5,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "button_8 = Button(root, text=\"8\", padx=40, pady=20, command=lambda: button_click(8))\nbutton_9 = Button(root, text=\"9\", padx=40, pady=20, command=lambda: button_click(9))\nbutton_0 = Button(root, text=\"0\", padx=40, pady=20, command=lambda: button_click(0))\nbutton_add = Button(root, text=\"+\", padx=39, pady=20, command=button_add)\nbutton_equal = Button(root, text=\"=\", padx=91, pady=20, command=button_equal)\nbutton_clear = Button(root, text=\"Clear\", padx=79, pady=20, command=button_clear)\nbutton_subtract = Button(root, text=\"-\", padx=39, pady=20, command=button_subtract)\nbutton_multiply = Button(root, text=\"*\", padx=39, pady=20, command=button_multiply)\nbutton_divide = Button(root, text=\"/\", padx=39, pady=20, command=button_divide)\n# Put buttons on the screen",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_9",
        "kind": 5,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "button_9 = Button(root, text=\"9\", padx=40, pady=20, command=lambda: button_click(9))\nbutton_0 = Button(root, text=\"0\", padx=40, pady=20, command=lambda: button_click(0))\nbutton_add = Button(root, text=\"+\", padx=39, pady=20, command=button_add)\nbutton_equal = Button(root, text=\"=\", padx=91, pady=20, command=button_equal)\nbutton_clear = Button(root, text=\"Clear\", padx=79, pady=20, command=button_clear)\nbutton_subtract = Button(root, text=\"-\", padx=39, pady=20, command=button_subtract)\nbutton_multiply = Button(root, text=\"*\", padx=39, pady=20, command=button_multiply)\nbutton_divide = Button(root, text=\"/\", padx=39, pady=20, command=button_divide)\n# Put buttons on the screen\nbutton_1.grid(row=3, column=0)",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_0",
        "kind": 5,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "button_0 = Button(root, text=\"0\", padx=40, pady=20, command=lambda: button_click(0))\nbutton_add = Button(root, text=\"+\", padx=39, pady=20, command=button_add)\nbutton_equal = Button(root, text=\"=\", padx=91, pady=20, command=button_equal)\nbutton_clear = Button(root, text=\"Clear\", padx=79, pady=20, command=button_clear)\nbutton_subtract = Button(root, text=\"-\", padx=39, pady=20, command=button_subtract)\nbutton_multiply = Button(root, text=\"*\", padx=39, pady=20, command=button_multiply)\nbutton_divide = Button(root, text=\"/\", padx=39, pady=20, command=button_divide)\n# Put buttons on the screen\nbutton_1.grid(row=3, column=0)\nbutton_2.grid(row=3, column=1)",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_add",
        "kind": 5,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "button_add = Button(root, text=\"+\", padx=39, pady=20, command=button_add)\nbutton_equal = Button(root, text=\"=\", padx=91, pady=20, command=button_equal)\nbutton_clear = Button(root, text=\"Clear\", padx=79, pady=20, command=button_clear)\nbutton_subtract = Button(root, text=\"-\", padx=39, pady=20, command=button_subtract)\nbutton_multiply = Button(root, text=\"*\", padx=39, pady=20, command=button_multiply)\nbutton_divide = Button(root, text=\"/\", padx=39, pady=20, command=button_divide)\n# Put buttons on the screen\nbutton_1.grid(row=3, column=0)\nbutton_2.grid(row=3, column=1)\nbutton_3.grid(row=3, column=2)",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_equal",
        "kind": 5,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "button_equal = Button(root, text=\"=\", padx=91, pady=20, command=button_equal)\nbutton_clear = Button(root, text=\"Clear\", padx=79, pady=20, command=button_clear)\nbutton_subtract = Button(root, text=\"-\", padx=39, pady=20, command=button_subtract)\nbutton_multiply = Button(root, text=\"*\", padx=39, pady=20, command=button_multiply)\nbutton_divide = Button(root, text=\"/\", padx=39, pady=20, command=button_divide)\n# Put buttons on the screen\nbutton_1.grid(row=3, column=0)\nbutton_2.grid(row=3, column=1)\nbutton_3.grid(row=3, column=2)\nbutton_4.grid(row=2, column=0)",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_clear",
        "kind": 5,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "button_clear = Button(root, text=\"Clear\", padx=79, pady=20, command=button_clear)\nbutton_subtract = Button(root, text=\"-\", padx=39, pady=20, command=button_subtract)\nbutton_multiply = Button(root, text=\"*\", padx=39, pady=20, command=button_multiply)\nbutton_divide = Button(root, text=\"/\", padx=39, pady=20, command=button_divide)\n# Put buttons on the screen\nbutton_1.grid(row=3, column=0)\nbutton_2.grid(row=3, column=1)\nbutton_3.grid(row=3, column=2)\nbutton_4.grid(row=2, column=0)\nbutton_5.grid(row=2, column=1)",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_subtract",
        "kind": 5,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "button_subtract = Button(root, text=\"-\", padx=39, pady=20, command=button_subtract)\nbutton_multiply = Button(root, text=\"*\", padx=39, pady=20, command=button_multiply)\nbutton_divide = Button(root, text=\"/\", padx=39, pady=20, command=button_divide)\n# Put buttons on the screen\nbutton_1.grid(row=3, column=0)\nbutton_2.grid(row=3, column=1)\nbutton_3.grid(row=3, column=2)\nbutton_4.grid(row=2, column=0)\nbutton_5.grid(row=2, column=1)\nbutton_6.grid(row=2, column=2)",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_multiply",
        "kind": 5,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "button_multiply = Button(root, text=\"*\", padx=39, pady=20, command=button_multiply)\nbutton_divide = Button(root, text=\"/\", padx=39, pady=20, command=button_divide)\n# Put buttons on the screen\nbutton_1.grid(row=3, column=0)\nbutton_2.grid(row=3, column=1)\nbutton_3.grid(row=3, column=2)\nbutton_4.grid(row=2, column=0)\nbutton_5.grid(row=2, column=1)\nbutton_6.grid(row=2, column=2)\nbutton_7.grid(row=1, column=0)",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "button_divide",
        "kind": 5,
        "importPath": "calculator",
        "description": "calculator",
        "peekOfCode": "button_divide = Button(root, text=\"/\", padx=39, pady=20, command=button_divide)\n# Put buttons on the screen\nbutton_1.grid(row=3, column=0)\nbutton_2.grid(row=3, column=1)\nbutton_3.grid(row=3, column=2)\nbutton_4.grid(row=2, column=0)\nbutton_5.grid(row=2, column=1)\nbutton_6.grid(row=2, column=2)\nbutton_7.grid(row=1, column=0)\nbutton_8.grid(row=1, column=1)",
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "splitString",
        "kind": 5,
        "importPath": "EscapeChar",
        "description": "EscapeChar",
        "peekOfCode": "splitString = \"This string has been\\nsplit over\\nseveral\\nlines\"\nprint(splitString)\ntabbedString = \"1\\t2\\t3\\t4\\t5\"\nprint(tabbedString)\nprint('The pet shop owner said \"No, no, \\'e\\'s uh,...he\\'s resting\".')\nprint(\"The pet shop owner said \\\"No, no, 'e's uh...he's resting\\\".\")\nprint(\"\"\"The pet shop owner said \"No, no, 'e's uh...he's resting\". \"\"\")\nanotherString = \"\"\"This string has been \\\nsplit over \\\nseveral \\",
        "detail": "EscapeChar",
        "documentation": {}
    },
    {
        "label": "tabbedString",
        "kind": 5,
        "importPath": "EscapeChar",
        "description": "EscapeChar",
        "peekOfCode": "tabbedString = \"1\\t2\\t3\\t4\\t5\"\nprint(tabbedString)\nprint('The pet shop owner said \"No, no, \\'e\\'s uh,...he\\'s resting\".')\nprint(\"The pet shop owner said \\\"No, no, 'e's uh...he's resting\\\".\")\nprint(\"\"\"The pet shop owner said \"No, no, 'e's uh...he's resting\". \"\"\")\nanotherString = \"\"\"This string has been \\\nsplit over \\\nseveral \\\nlines\"\"\"\nprint(anotherString)",
        "detail": "EscapeChar",
        "documentation": {}
    },
    {
        "label": "anotherString",
        "kind": 5,
        "importPath": "EscapeChar",
        "description": "EscapeChar",
        "peekOfCode": "anotherString = \"\"\"This string has been \\\nsplit over \\\nseveral \\\nlines\"\"\"\nprint(anotherString)\nprint(\"C:\\\\Users\\\\grevymarcelin\\\\notes.txt\")\nprint(r\"C:\\Users\\grevymarcelin\\notes.txt\")",
        "detail": "EscapeChar",
        "documentation": {}
    },
    {
        "label": "square",
        "kind": 2,
        "importPath": "import_turtle",
        "description": "import_turtle",
        "peekOfCode": "def square(length: int) -> None:\n    \"\"\"Draws a square of lenght 'length'\"\"\"\n    for side in range(4):\n        turtle.forward(length)\n        turtle.right(90)\ndef encircled_square(length: int)-> None:\n    \"\"\"Draws a square of length 'length',\n    then encloses it in a circle.\"\"\"\n    square(length)\n    angle = radians(45)",
        "detail": "import_turtle",
        "documentation": {}
    },
    {
        "label": "encircled_square",
        "kind": 2,
        "importPath": "import_turtle",
        "description": "import_turtle",
        "peekOfCode": "def encircled_square(length: int)-> None:\n    \"\"\"Draws a square of length 'length',\n    then encloses it in a circle.\"\"\"\n    square(length)\n    angle = radians(45)\n    radius = length * cos(angle)\n    turtle.right(135)\n    turtle.circle(radius)\n    turtle.left(135)\n    print(f'Inside fucntion, namespace is: {dir()}')",
        "detail": "import_turtle",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "import_turtle",
        "description": "import_turtle",
        "peekOfCode": "g = globals()\nprint(g['square'])\nprint(dir(__builtins__))",
        "detail": "import_turtle",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "moreprint",
        "description": "moreprint",
        "peekOfCode": "name = \"Grevy\"\nage = 50\nprint(name, age, \"Python\", 2020)\nprint((name, age, \"Python\", 2020))",
        "detail": "moreprint",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "moreprint",
        "description": "moreprint",
        "peekOfCode": "age = 50\nprint(name, age, \"Python\", 2020)\nprint((name, age, \"Python\", 2020))",
        "detail": "moreprint",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Operators",
        "description": "Operators",
        "peekOfCode": "a = 12\nb = 3\nprint(a+b)\nprint(a -b)\nprint(a * b)\nprint(a / b)\nprint(a // b)\nprint(a % b)\n#print()\nfor i in range(1, a // b): ",
        "detail": "Operators",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Operators",
        "description": "Operators",
        "peekOfCode": "b = 3\nprint(a+b)\nprint(a -b)\nprint(a * b)\nprint(a / b)\nprint(a // b)\nprint(a % b)\n#print()\nfor i in range(1, a // b): \n    print(i)",
        "detail": "Operators",
        "documentation": {}
    },
    {
        "label": "read_data",
        "kind": 2,
        "importPath": "Python Examples",
        "description": "Python Examples",
        "peekOfCode": "def read_data():\n   return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsample = read_data()\ndef mean(data):\n   return sum(data) / len(data)\naverage = mean(sample)\npython -i sample.py",
        "detail": "Python Examples",
        "documentation": {}
    },
    {
        "label": "mean",
        "kind": 2,
        "importPath": "Python Examples",
        "description": "Python Examples",
        "peekOfCode": "def mean(data):\n   return sum(data) / len(data)\naverage = mean(sample)\npython -i sample.py",
        "detail": "Python Examples",
        "documentation": {}
    },
    {
        "label": "sample",
        "kind": 5,
        "importPath": "Python Examples",
        "description": "Python Examples",
        "peekOfCode": "sample = read_data()\ndef mean(data):\n   return sum(data) / len(data)\naverage = mean(sample)\npython -i sample.py",
        "detail": "Python Examples",
        "documentation": {}
    },
    {
        "label": "average",
        "kind": 5,
        "importPath": "Python Examples",
        "description": "Python Examples",
        "peekOfCode": "average = mean(sample)\npython -i sample.py",
        "detail": "Python Examples",
        "documentation": {}
    },
    {
        "label": "Account",
        "kind": 6,
        "importPath": "python_property_decorates",
        "description": "python_property_decorates",
        "peekOfCode": "class Account:\n    def __init__(self, balance, name):\n        self.balance = balance\n        self.name = name\n    def credit(self, deposit):\n        self.balance = self.balance + deposit\n    def debit(self, withdrawal):\n        self.balance = self.balance - withdrawal\n    def get_balance(self):",
        "detail": "python_property_decorates",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "Repfields",
        "description": "Repfields",
        "peekOfCode": "age = 48\n#print(\"My age is {0} years\".format(age))\n#\n#print(\"There are {0} days in {1}, {2}, {3}, {4}, #{5}, {6} and {7}\".format(31, \"Jan\", \"Mar\", \"May\", #\"Jul\", \"Aug\", \"Oct\", \"Dec\"))\n#print(\"There are {0} days in Jan, Mar, May, Jul, #Aug, Oct, and Dec\".format(31))\n#print(\"Jan: {2}, Feb: {0}, Mar: {2}, Apr: {1}, #May: {2}, Jun: {1}, Jul: {2}, Sep: {1}, Oct: {2}, #Nov: {1}, Dec: {2}\".format(28, 30, 31))\n#print()\nprint(\"\"\"Jan: {2}\nFeb: {0}\nMar: {2}",
        "detail": "Repfields",
        "documentation": {}
    },
    {
        "label": "string1",
        "kind": 5,
        "importPath": "sequence_operators",
        "description": "sequence_operators",
        "peekOfCode": "string1 = \"he's \"\nstring2 = \"probably \"\nstring3 = \"pining \"\nstring4 = \"for the \"\nstring5 = \"fjords\"\nprint(string1 + string2 + string3 + string4 + string5)\nprint(\"he's \" \"probably \" \"pining \" \"for the \" \"fjords\")\nprint(\"Hello \" * 5)\nprint(\"Hello \" * (5 + 4))\nprint(\"Hello \" * 5 + \"4\")",
        "detail": "sequence_operators",
        "documentation": {}
    },
    {
        "label": "string2",
        "kind": 5,
        "importPath": "sequence_operators",
        "description": "sequence_operators",
        "peekOfCode": "string2 = \"probably \"\nstring3 = \"pining \"\nstring4 = \"for the \"\nstring5 = \"fjords\"\nprint(string1 + string2 + string3 + string4 + string5)\nprint(\"he's \" \"probably \" \"pining \" \"for the \" \"fjords\")\nprint(\"Hello \" * 5)\nprint(\"Hello \" * (5 + 4))\nprint(\"Hello \" * 5 + \"4\")\ntoday = \"friday\"",
        "detail": "sequence_operators",
        "documentation": {}
    },
    {
        "label": "string3",
        "kind": 5,
        "importPath": "sequence_operators",
        "description": "sequence_operators",
        "peekOfCode": "string3 = \"pining \"\nstring4 = \"for the \"\nstring5 = \"fjords\"\nprint(string1 + string2 + string3 + string4 + string5)\nprint(\"he's \" \"probably \" \"pining \" \"for the \" \"fjords\")\nprint(\"Hello \" * 5)\nprint(\"Hello \" * (5 + 4))\nprint(\"Hello \" * 5 + \"4\")\ntoday = \"friday\"\nprint(\"day\" in today)       # True",
        "detail": "sequence_operators",
        "documentation": {}
    },
    {
        "label": "string4",
        "kind": 5,
        "importPath": "sequence_operators",
        "description": "sequence_operators",
        "peekOfCode": "string4 = \"for the \"\nstring5 = \"fjords\"\nprint(string1 + string2 + string3 + string4 + string5)\nprint(\"he's \" \"probably \" \"pining \" \"for the \" \"fjords\")\nprint(\"Hello \" * 5)\nprint(\"Hello \" * (5 + 4))\nprint(\"Hello \" * 5 + \"4\")\ntoday = \"friday\"\nprint(\"day\" in today)       # True\nprint(\"fri\" in today)       # True",
        "detail": "sequence_operators",
        "documentation": {}
    },
    {
        "label": "string5",
        "kind": 5,
        "importPath": "sequence_operators",
        "description": "sequence_operators",
        "peekOfCode": "string5 = \"fjords\"\nprint(string1 + string2 + string3 + string4 + string5)\nprint(\"he's \" \"probably \" \"pining \" \"for the \" \"fjords\")\nprint(\"Hello \" * 5)\nprint(\"Hello \" * (5 + 4))\nprint(\"Hello \" * 5 + \"4\")\ntoday = \"friday\"\nprint(\"day\" in today)       # True\nprint(\"fri\" in today)       # True\nprint(\"thur\" in today)      # False",
        "detail": "sequence_operators",
        "documentation": {}
    },
    {
        "label": "today",
        "kind": 5,
        "importPath": "sequence_operators",
        "description": "sequence_operators",
        "peekOfCode": "today = \"friday\"\nprint(\"day\" in today)       # True\nprint(\"fri\" in today)       # True\nprint(\"thur\" in today)      # False\nprint(\"parrot\" in \"fjord\")  # False",
        "detail": "sequence_operators",
        "documentation": {}
    },
    {
        "label": "Calculator",
        "kind": 6,
        "importPath": "Tkinter Calculator",
        "description": "Tkinter Calculator",
        "peekOfCode": "class Calculator:\n    def __init__(self, master):\n        master.title(\"Grevy's Calculator\")\n        master.geometry('357x420+0+0')\n        master.config(bg='gray')\n        master.resizable(False,False)\n        self.equation=StringVar()\n        self.entry_value=' '\n        Entry(width=17,bg='#ccddff', font=('Arial Bold', 28), textvariable=self.equation).place(x=0, y=0)\n        Button(width=11,height=4,text='( ',relief='flat',bg='white',command=lambda:self.show(' ( ')).place(x=0 , y=50)",
        "detail": "Tkinter Calculator",
        "documentation": {}
    },
    {
        "label": "btn_click",
        "kind": 2,
        "importPath": "toy_calculator",
        "description": "toy_calculator",
        "peekOfCode": "def btn_click(char):\n    if char == '=':\n        if result.get():\n            try:\n                answer = str(eval(result.get()))\n            except SyntaxError:\n                tk.messagebox.showerror(\"Error\", \"Your calculation isn't valid\")\n            except ZeroDivisionError:\n                tk.messagebox.showerror(\"Error\", \"You can't divide by zero\")\n            else:",
        "detail": "toy_calculator",
        "documentation": {}
    },
    {
        "label": "keys",
        "kind": 5,
        "importPath": "toy_calculator",
        "description": "toy_calculator",
        "peekOfCode": "keys = [[('C', 1), ('CE', 1)],\n        [('7', 1), ('8', 1), ('9', 1), ('+', 1)],\n        [('4', 1), ('5', 1), ('6', 1), ('-', 1)],\n        [('1', 1), ('2', 1), ('3', 1), ('*', 1)],\n        [('0', 1), ('=', 2), ('/', 1)],\n        ]\ndef btn_click(char):\n    if char == '=':\n        if result.get():\n            try:",
        "detail": "toy_calculator",
        "documentation": {}
    },
    {
        "label": "main_window_padding",
        "kind": 5,
        "importPath": "toy_calculator",
        "description": "toy_calculator",
        "peekOfCode": "main_window_padding = 8\nmain_window = tk.Tk()\nmain_window.title(\"Calculator\")\nmain_window.geometry('640x480-8-200')\nmain_window['padx'] = main_window_padding\nmain_window.columnconfigure(0, weight=1)\nresult = tk.Entry(main_window)\nresult.grid(row=0, column=0, sticky='nsew')\nkeypad = tk.Frame(main_window)\nkeypad.grid(row=1, column=0, sticky='nsew')",
        "detail": "toy_calculator",
        "documentation": {}
    },
    {
        "label": "main_window",
        "kind": 5,
        "importPath": "toy_calculator",
        "description": "toy_calculator",
        "peekOfCode": "main_window = tk.Tk()\nmain_window.title(\"Calculator\")\nmain_window.geometry('640x480-8-200')\nmain_window['padx'] = main_window_padding\nmain_window.columnconfigure(0, weight=1)\nresult = tk.Entry(main_window)\nresult.grid(row=0, column=0, sticky='nsew')\nkeypad = tk.Frame(main_window)\nkeypad.grid(row=1, column=0, sticky='nsew')\nrow = 0",
        "detail": "toy_calculator",
        "documentation": {}
    },
    {
        "label": "main_window['padx']",
        "kind": 5,
        "importPath": "toy_calculator",
        "description": "toy_calculator",
        "peekOfCode": "main_window['padx'] = main_window_padding\nmain_window.columnconfigure(0, weight=1)\nresult = tk.Entry(main_window)\nresult.grid(row=0, column=0, sticky='nsew')\nkeypad = tk.Frame(main_window)\nkeypad.grid(row=1, column=0, sticky='nsew')\nrow = 0\nfor key_row in keys:\n    col = 0\n    for key in key_row:",
        "detail": "toy_calculator",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "toy_calculator",
        "description": "toy_calculator",
        "peekOfCode": "result = tk.Entry(main_window)\nresult.grid(row=0, column=0, sticky='nsew')\nkeypad = tk.Frame(main_window)\nkeypad.grid(row=1, column=0, sticky='nsew')\nrow = 0\nfor key_row in keys:\n    col = 0\n    for key in key_row:\n        btn = tk.Button(keypad, text=key[0], width=2,\n                        command=lambda char=key[0]: btn_click(char))",
        "detail": "toy_calculator",
        "documentation": {}
    },
    {
        "label": "keypad",
        "kind": 5,
        "importPath": "toy_calculator",
        "description": "toy_calculator",
        "peekOfCode": "keypad = tk.Frame(main_window)\nkeypad.grid(row=1, column=0, sticky='nsew')\nrow = 0\nfor key_row in keys:\n    col = 0\n    for key in key_row:\n        btn = tk.Button(keypad, text=key[0], width=2,\n                        command=lambda char=key[0]: btn_click(char))\n        # btn = tk.Button(keypad, text=key[0], width=2,\n        #                 command=lambda: btn_click(key[0]))",
        "detail": "toy_calculator",
        "documentation": {}
    },
    {
        "label": "row",
        "kind": 5,
        "importPath": "toy_calculator",
        "description": "toy_calculator",
        "peekOfCode": "row = 0\nfor key_row in keys:\n    col = 0\n    for key in key_row:\n        btn = tk.Button(keypad, text=key[0], width=2,\n                        command=lambda char=key[0]: btn_click(char))\n        # btn = tk.Button(keypad, text=key[0], width=2,\n        #                 command=lambda: btn_click(key[0]))\n        # print(lambda: btn_click(key[0]))\n        btn.grid(row=row, column=col, columnspan=key[1], sticky=tk.E + tk.W)",
        "detail": "toy_calculator",
        "documentation": {}
    }
]